@testable import Knowledge_DE;///
/// @Generated by Mockolo
///



import AcknowList
import Adjust
import AppTrackingTransparency
import BrazeKit
import Common
import DIKit
import Darwin
import DateToolsSwift
import DesignSystem
import Domain
import FirebaseCrashlytics
import Foundation
import IntentsUI
import Localization
import Network
import Networking
import PDFKit
import PharmaDatabase
import RichTextRenderer
import SafariServices
import StoreKit
import UIKit
import Usercentrics
import UsercentricsUI
import WebKit
import ZIPFoundation


class AttributionTrackingApplicationServiceTypeMock: AttributionTrackingApplicationServiceType {
    init() { }
    init(isEnabled: Bool = false) {
        self.isEnabled = isEnabled
    }


    private(set) var isEnabledSetCallCount = 0
    var isEnabled: Bool = false { didSet { isEnabledSetCallCount += 1 } }

    private(set) var resetCallCount = 0
    var resetHandler: (() -> ())?
    func reset()  {
        resetCallCount += 1
        if let resetHandler = resetHandler {
            resetHandler()
        }
        
    }

    private(set) var consentDidChangeCallCount = 0
    var consentDidChangeHandler: (([ConsentService: Bool]) -> ())?
    func consentDidChange(_ consents: [ConsentService: Bool])  {
        consentDidChangeCallCount += 1
        if let consentDidChangeHandler = consentDidChangeHandler {
            consentDidChangeHandler(consents)
        }
        
    }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class ConsentApplicationServiceTypeMock: ConsentApplicationServiceType {
    init() { }
    init(initialConsentDialogWasShown: Bool = false) {
        self.initialConsentDialogWasShown = initialConsentDialogWasShown
    }


    private(set) var showConsentDialogIfNeededCallCount = 0
    var showConsentDialogIfNeededHandler: (() -> ())?
    func showConsentDialogIfNeeded()  {
        showConsentDialogIfNeededCallCount += 1
        if let showConsentDialogIfNeededHandler = showConsentDialogIfNeededHandler {
            showConsentDialogIfNeededHandler()
        }
        
    }

    private(set) var showConsentSettingsCallCount = 0
    var showConsentSettingsHandler: (() -> ())?
    func showConsentSettings()  {
        showConsentSettingsCallCount += 1
        if let showConsentSettingsHandler = showConsentSettingsHandler {
            showConsentSettingsHandler()
        }
        
    }

    private(set) var resetCallCount = 0
    var resetHandler: (() -> ())?
    func reset()  {
        resetCallCount += 1
        if let resetHandler = resetHandler {
            resetHandler()
        }
        
    }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var initialConsentDialogWasShownSetCallCount = 0
    var initialConsentDialogWasShown: Bool = false { didSet { initialConsentDialogWasShownSetCallCount += 1 } }

    private(set) var setViewDismissalCompletionCallCount = 0
    var setViewDismissalCompletionHandler: ((((Bool) -> Void)?) -> ())?
    func setViewDismissalCompletion(completion: ((Bool) -> Void)?)  {
        setViewDismissalCompletionCallCount += 1
        if let setViewDismissalCompletionHandler = setViewDismissalCompletionHandler {
            setViewDismissalCompletionHandler(completion)
        }
        
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class ShortcutsRepositoryTypeMock: ShortcutsRepositoryType {
    init() { }


    private(set) var increaseUsageCountCallCount = 0
    var increaseUsageCountHandler: ((AmbossShortcut) -> ())?
    func increaseUsageCount(for ambossShortcut: AmbossShortcut)  {
        increaseUsageCountCallCount += 1
        if let increaseUsageCountHandler = increaseUsageCountHandler {
            increaseUsageCountHandler(ambossShortcut)
        }
        
    }

    private(set) var shouldOfferAddingVoiceShortcutCallCount = 0
    var shouldOfferAddingVoiceShortcutHandler: ((AmbossShortcut) -> (Bool))?
    func shouldOfferAddingVoiceShortcut(for ambossShortcut: AmbossShortcut) -> Bool {
        shouldOfferAddingVoiceShortcutCallCount += 1
        if let shouldOfferAddingVoiceShortcutHandler = shouldOfferAddingVoiceShortcutHandler {
            return shouldOfferAddingVoiceShortcutHandler(ambossShortcut)
        }
        return false
    }

    private(set) var addingVoiceShortcutWasOfferedCallCount = 0
    var addingVoiceShortcutWasOfferedHandler: ((AmbossShortcut) -> ())?
    func addingVoiceShortcutWasOffered(for ambossShortcut: AmbossShortcut)  {
        addingVoiceShortcutWasOfferedCallCount += 1
        if let addingVoiceShortcutWasOfferedHandler = addingVoiceShortcutWasOfferedHandler {
            addingVoiceShortcutWasOfferedHandler(ambossShortcut)
        }
        
    }
}

public class PharmaDatabaseTypeMock: PharmaDatabaseType {
    public init() { }


    public private(set) var versionCallCount = 0
    public var versionHandler: (() throws -> (Domain.Version))?
    public func version() throws -> Domain.Version {
        versionCallCount += 1
        if let versionHandler = versionHandler {
            return try versionHandler()
        }
        fatalError("versionHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var suggestionsCallCount = 0
    public var suggestionsHandler: ((String, Int) throws -> ([String]))?
    public func suggestions(for searchTerm: String, max: Int) throws -> [String] {
        suggestionsCallCount += 1
        if let suggestionsHandler = suggestionsHandler {
            return try suggestionsHandler(searchTerm, max)
        }
        return [String]()
    }

    public private(set) var itemsCallCount = 0
    public var itemsHandler: ((String) throws -> ([Domain.PharmaSearchItem]))?
    public func items(for searchTerm: String) throws -> [Domain.PharmaSearchItem] {
        itemsCallCount += 1
        if let itemsHandler = itemsHandler {
            return try itemsHandler(searchTerm)
        }
        return [Domain.PharmaSearchItem]()
    }

    public private(set) var substanceCallCount = 0
    public var substanceHandler: ((SubstanceIdentifier) throws -> (Domain.Substance))?
    public func substance(for identifier: SubstanceIdentifier) throws -> Domain.Substance {
        substanceCallCount += 1
        if let substanceHandler = substanceHandler {
            return try substanceHandler(identifier)
        }
        fatalError("substanceHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var drugCallCount = 0
    public var drugHandler: ((DrugIdentifier, PackageSizeSortingOrder) throws -> (Domain.Drug))?
    public func drug(for identifier: DrugIdentifier, sorting: PackageSizeSortingOrder) throws -> Domain.Drug {
        drugCallCount += 1
        if let drugHandler = drugHandler {
            return try drugHandler(identifier, sorting)
        }
        fatalError("drugHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var dosageCallCount = 0
    public var dosageHandler: ((DosageIdentifier) throws -> (Domain.Dosage))?
    public func dosage(for identifier: DosageIdentifier) throws -> Domain.Dosage {
        dosageCallCount += 1
        if let dosageHandler = dosageHandler {
            return try dosageHandler(identifier)
        }
        fatalError("dosageHandler returns can't have a default value thus its handler must be set")
    }
}

class CoordinatorMock: Coordinator {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class GalleryPresenterTypeMock: GalleryPresenterType {
    init() { }
    init(view: GalleryViewType? = nil, learningCardTitle: String? = nil) {
        self.view = view
        self.learningCardTitle = learningCardTitle
    }


    private(set) var viewSetCallCount = 0
    var view: GalleryViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var learningCardTitleSetCallCount = 0
    var learningCardTitle: String? = nil { didSet { learningCardTitleSetCallCount += 1 } }
}

class TracerMock: Tracer {
    init() { }


    private(set) var startedTraceCallCount = 0
    var startedTraceHandler: ((StaticString, MonitorContext) -> (Trace))?
    func startedTrace(name: StaticString, context: MonitorContext) -> Trace {
        startedTraceCallCount += 1
        if let startedTraceHandler = startedTraceHandler {
            return startedTraceHandler(name, context)
        }
        return TraceMock()
    }
}

class SearchDelegateMock: SearchDelegate {
    init() { }


    private(set) var navigateCallCount = 0
    var navigateHandler: ((LearningCardDeeplink) -> ())?
    func navigate(to learningCard: LearningCardDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(learningCard)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((PharmaCardDeeplink) -> ())?
    func navigate(to pharmaCard: PharmaCardDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(pharmaCard)
        }
        
    }

    private(set) var navigateToMonographDeeplinkCallCount = 0
    var navigateToMonographDeeplinkHandler: ((MonographDeeplink) -> ())?
    func navigate(to monograph: MonographDeeplink)  {
        navigateToMonographDeeplinkCallCount += 1
        if let navigateToMonographDeeplinkHandler = navigateToMonographDeeplinkHandler {
            navigateToMonographDeeplinkHandler(monograph)
        }
        
    }

    private(set) var dismissSearchViewCallCount = 0
    var dismissSearchViewHandler: (((() -> Void)?) -> ())?
    func dismissSearchView(completion: (() -> Void)?)  {
        dismissSearchViewCallCount += 1
        if let dismissSearchViewHandler = dismissSearchViewHandler {
            dismissSearchViewHandler(completion)
        }
        
    }
}

public class MonitoringMock: Monitoring {
    public init() { }


    public private(set) var logCallCount = 0
    public var logHandler: ((@autoclosure () -> Any, MonitorLevel, MonitorContext, String, String, UInt) -> ())?
    public func log(_ object: @autoclosure () -> Any, with level: MonitorLevel, context: MonitorContext, file: String, function: String, line: UInt)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(object(), level, context, file, function, line)
        }
        
    }
}

class UIApplicationTypeMock: UIApplicationType {
    init() { }
    init(keyWindow: UIWindow? = nil, applicationState: UIApplication.State) {
        self.keyWindow = keyWindow
        self._applicationState = applicationState
    }


    private(set) var keyWindowSetCallCount = 0
    var keyWindow: UIWindow? = nil { didSet { keyWindowSetCallCount += 1 } }

    private(set) var applicationStateSetCallCount = 0
    private var _applicationState: UIApplication.State!  { didSet { applicationStateSetCallCount += 1 } }
    var applicationState: UIApplication.State {
        get { return _applicationState }
        set { _applicationState = newValue }
    }

    private(set) var setMinimumBackgroundFetchIntervalCallCount = 0
    var setMinimumBackgroundFetchIntervalHandler: ((TimeInterval) -> ())?
    func setMinimumBackgroundFetchInterval(_ minimumBackgroundFetchInterval: TimeInterval)  {
        setMinimumBackgroundFetchIntervalCallCount += 1
        if let setMinimumBackgroundFetchIntervalHandler = setMinimumBackgroundFetchIntervalHandler {
            setMinimumBackgroundFetchIntervalHandler(minimumBackgroundFetchInterval)
        }
        
    }
}

class FeatureFlagRepositoryTypeMock: FeatureFlagRepositoryType {
    init() { }
    init(featureFlags: [String] = [String]()) {
        self.featureFlags = featureFlags
    }


    private(set) var featureFlagsSetCallCount = 0
    var featureFlags: [String] = [String]() { didSet { featureFlagsSetCallCount += 1 } }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

public class FileDownloaderTypeMock: FileDownloaderType {
    public init() { }


    public private(set) var downloadCallCount = 0
    public var downloadHandler: ((URL, URL, @escaping (Double) -> Void, @escaping (Result<(), FileDownloaderError>) -> Void) -> ())?
    public func download(from sourceURL: URL, to destinationURL: URL, progress: @escaping (Double) -> Void, completion: @escaping (Result<(), FileDownloaderError>) -> Void)  {
        downloadCallCount += 1
        if let downloadHandler = downloadHandler {
            downloadHandler(sourceURL, destinationURL, progress, completion)
        }
        
    }

    public private(set) var cancelCallCount = 0
    public var cancelHandler: (() -> ())?
    public func cancel()  {
        cancelCallCount += 1
        if let cancelHandler = cancelHandler {
            cancelHandler()
        }
        
    }
}

class ListTrackingProviderMock: ListTrackingProvider {
    init() { }


    private(set) var trackCallCount = 0
    var trackHandler: ((LearningCardIdentifier, Tag) -> ())?
    func track(learningCard identifier: LearningCardIdentifier, tag: Tag)  {
        trackCallCount += 1
        if let trackHandler = trackHandler {
            trackHandler(identifier, tag)
        }
        
    }
}

class DrugListDelegateMock: DrugListDelegate {
    init() { }


    private(set) var didSelectCallCount = 0
    var didSelectHandler: ((DrugIdentifier) -> ())?
    func didSelect(drug: DrugIdentifier)  {
        didSelectCallCount += 1
        if let didSelectHandler = didSelectHandler {
            didSelectHandler(drug)
        }
        
    }
}

class InAppPurchaseCoordinatorTypeMock: InAppPurchaseCoordinatorType {
    init() { }


    private(set) var manageInAppPurchaseSubscriptionCallCount = 0
    var manageInAppPurchaseSubscriptionHandler: (() -> ())?
    func manageInAppPurchaseSubscription()  {
        manageInAppPurchaseSubscriptionCallCount += 1
        if let manageInAppPurchaseSubscriptionHandler = manageInAppPurchaseSubscriptionHandler {
            manageInAppPurchaseSubscriptionHandler()
        }
        
    }

    private(set) var goToSupportCallCount = 0
    var goToSupportHandler: (() -> ())?
    func goToSupport()  {
        goToSupportCallCount += 1
        if let goToSupportHandler = goToSupportHandler {
            goToSupportHandler()
        }
        
    }
}

class ListCoordinatorTypeMock: ListCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((LearningCardDeeplink) -> ())?
    func navigate(to learningCard: LearningCardDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(learningCard)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class PDFViewerCoordinatorTypeMock: PDFViewerCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var shareDocumentCallCount = 0
    var shareDocumentHandler: ((URL, String) -> ())?
    func shareDocument(_ url: URL, with filename: String)  {
        shareDocumentCallCount += 1
        if let shareDocumentHandler = shareDocumentHandler {
            shareDocumentHandler(url, filename)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class SnippetTrackingProviderMock: SnippetTrackingProvider {
    init() { }


    private(set) var trackCallCount = 0
    var trackHandler: ((LearningCardIdentifier) -> ())?
    func track(learningCard identifier: LearningCardIdentifier)  {
        trackCallCount += 1
        if let trackHandler = trackHandler {
            trackHandler(identifier)
        }
        
    }
}

class QBankAnswerRepositoryTypeMock: QBankAnswerRepositoryType {
    init() { }


    private(set) var importWrongAnswersCallCount = 0
    var importWrongAnswersHandler: (([QBankAnswer]) -> ())?
    func importWrongAnswers(_ newAnswers: [QBankAnswer])  {
        importWrongAnswersCallCount += 1
        if let importWrongAnswersHandler = importWrongAnswersHandler {
            importWrongAnswersHandler(newAnswers)
        }
        
    }

    private(set) var wronglyAnsweredQuestionsCallCount = 0
    var wronglyAnsweredQuestionsHandler: (() -> ([QBankQuestionIdentifier]))?
    func wronglyAnsweredQuestions() -> [QBankQuestionIdentifier] {
        wronglyAnsweredQuestionsCallCount += 1
        if let wronglyAnsweredQuestionsHandler = wronglyAnsweredQuestionsHandler {
            return wronglyAnsweredQuestionsHandler()
        }
        return [QBankQuestionIdentifier]()
    }

    private(set) var wronglyAnsweredQuestionsForCallCount = 0
    var wronglyAnsweredQuestionsForHandler: (([QBankQuestionIdentifier]) -> ([QBankQuestionIdentifier]))?
    func wronglyAnsweredQuestions(for questionIDs: [QBankQuestionIdentifier]) -> [QBankQuestionIdentifier] {
        wronglyAnsweredQuestionsForCallCount += 1
        if let wronglyAnsweredQuestionsForHandler = wronglyAnsweredQuestionsForHandler {
            return wronglyAnsweredQuestionsForHandler(questionIDs)
        }
        return [QBankQuestionIdentifier]()
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class RegistrationRepositoryTypeMock: RegistrationRepositoryType {
    init() { }
    init(userStage: UserStage? = nil, usagePurpose: UsagePurpose? = nil, studyObjective: StudyObjective? = nil) {
        self.userStage = userStage
        self.usagePurpose = usagePurpose
        self.studyObjective = studyObjective
    }


    private(set) var userStageSetCallCount = 0
    var userStage: UserStage? = nil { didSet { userStageSetCallCount += 1 } }

    private(set) var usagePurposeSetCallCount = 0
    var usagePurpose: UsagePurpose? = nil { didSet { usagePurposeSetCallCount += 1 } }

    private(set) var studyObjectiveSetCallCount = 0
    var studyObjective: StudyObjective? = nil { didSet { studyObjectiveSetCallCount += 1 } }
}

class ExternalMediaRepositoryTypeMock: ExternalMediaRepositoryType {
    init() { }


    private(set) var getExternalAdditionCallCount = 0
    var getExternalAdditionHandler: ((ExternalAdditionIdentifier, @escaping (Result<ExternalAddition, Error>) -> Void) -> ())?
    func getExternalAddition(for externalAdditionId: ExternalAdditionIdentifier, completion: @escaping (Result<ExternalAddition, Error>) -> Void)  {
        getExternalAdditionCallCount += 1
        if let getExternalAdditionHandler = getExternalAdditionHandler {
            getExternalAdditionHandler(externalAdditionId, completion)
        }
        
    }
}

class SegmentTrackerTypeMock: SegmentTrackerType {
    init() { }
    init(anonymousId: String = "") {
        self.anonymousId = anonymousId
    }


    private(set) var anonymousIdSetCallCount = 0
    var anonymousId: String = "" { didSet { anonymousIdSetCallCount += 1 } }

    private(set) var setCallCount = 0
    var setHandler: (([UserTraits]) -> ())?
    func set(_ userTraits: [UserTraits])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(userTraits)
        }
        
    }

    private(set) var trackCallCount = 0
    var trackHandler: ((Event) -> ())?
    func track(_ event: Event)  {
        trackCallCount += 1
        if let trackHandler = trackHandler {
            trackHandler(event)
        }
        
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((UserTraits) -> ())?
    func update(_ userTraits: UserTraits)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(userTraits)
        }
        
    }
}

class UserStageCoordinatorTypeMock: UserStageCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var openURLCallCount = 0
    var openURLHandler: ((URL) -> ())?
    func openURL(_ url: URL)  {
        openURLCallCount += 1
        if let openURLHandler = openURLHandler {
            openURLHandler(url)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class HTMLContentSizeCalculatorTypeMock: HTMLContentSizeCalculatorType {
    init() { }


    private(set) var calculateSizeCallCount = 0
    var calculateSizeHandler: ((HtmlDocument, CGFloat, @escaping (CGSize) -> Void) -> ())?
    func calculateSize(for htmlDocument: HtmlDocument, width: CGFloat, completion: @escaping (CGSize) -> Void)  {
        calculateSizeCallCount += 1
        if let calculateSizeHandler = calculateSizeHandler {
            calculateSizeHandler(htmlDocument, width, completion)
        }
        
    }

    private(set) var calculateSizeForCallCount = 0
    var calculateSizeForHandler: ((URL, CGFloat, @escaping (CGSize) -> Void) -> ())?
    func calculateSize(for url: URL, width: CGFloat, completion: @escaping (CGSize) -> Void)  {
        calculateSizeForCallCount += 1
        if let calculateSizeForHandler = calculateSizeForHandler {
            calculateSizeForHandler(url, width, completion)
        }
        
    }
}

class ListsCoordinatorTypeMock: ListsCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var openFavouritesCallCount = 0
    var openFavouritesHandler: (() -> ())?
    func openFavourites()  {
        openFavouritesCallCount += 1
        if let openFavouritesHandler = openFavouritesHandler {
            openFavouritesHandler()
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var openLearnedCallCount = 0
    var openLearnedHandler: (() -> ())?
    func openLearned()  {
        openLearnedCallCount += 1
        if let openLearnedHandler = openLearnedHandler {
            openLearnedHandler()
        }
        
    }

    private(set) var openRecentsCallCount = 0
    var openRecentsHandler: (() -> ())?
    func openRecents()  {
        openRecentsCallCount += 1
        if let openRecentsHandler = openRecentsHandler {
            openRecentsHandler()
        }
        
    }

    private(set) var openNotesCallCount = 0
    var openNotesHandler: (() -> ())?
    func openNotes()  {
        openNotesCallCount += 1
        if let openNotesHandler = openNotesHandler {
            openNotesHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class SnippetLearningCardDisplayerMock: SnippetLearningCardDisplayer {
    init() { }


    private(set) var navigateCallCount = 0
    var navigateHandler: ((LearningCardDeeplink, Bool) -> ())?
    func navigate(to deeplink: LearningCardDeeplink, shouldPopToRoot: Bool)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(deeplink, shouldPopToRoot)
        }
        
    }
}

class SearchHistoryRepositoryTypeMock: SearchHistoryRepositoryType {
    init() { }
    init(lastAddedHistoryItem: String? = nil) {
        self.lastAddedHistoryItem = lastAddedHistoryItem
    }


    private(set) var lastAddedHistoryItemSetCallCount = 0
    var lastAddedHistoryItem: String? = nil { didSet { lastAddedHistoryItemSetCallCount += 1 } }

    private(set) var addSearchHistoryItemCallCount = 0
    var addSearchHistoryItemHandler: ((String) -> ())?
    func addSearchHistoryItem(_ item: String)  {
        addSearchHistoryItemCallCount += 1
        if let addSearchHistoryItemHandler = addSearchHistoryItemHandler {
            addSearchHistoryItemHandler(item)
        }
        
    }

    private(set) var getSearchHistoryItemsCallCount = 0
    var getSearchHistoryItemsHandler: (() -> ([String]))?
    func getSearchHistoryItems() -> [String] {
        getSearchHistoryItemsCallCount += 1
        if let getSearchHistoryItemsHandler = getSearchHistoryItemsHandler {
            return getSearchHistoryItemsHandler()
        }
        return [String]()
    }
}

class SnippetRepositoryTypeMock: SnippetRepositoryType {
    init() { }


    private(set) var snippetCallCount = 0
    var snippetHandler: ((LearningCardDeeplink) throws -> (Snippet?))?
    func snippet(for learningCardDeeplink: LearningCardDeeplink) throws -> Snippet? {
        snippetCallCount += 1
        if let snippetHandler = snippetHandler {
            return try snippetHandler(learningCardDeeplink)
        }
        return nil
    }

    private(set) var snippetForCallCount = 0
    var snippetForHandler: ((SnippetIdentifier, @escaping (Result<Snippet, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func snippet(for identifier: SnippetIdentifier, completion: @escaping (Result<Snippet, NetworkError<EmptyAPIError>>) -> Void)  {
        snippetForCallCount += 1
        if let snippetForHandler = snippetForHandler {
            snippetForHandler(identifier, completion)
        }
        
    }
}

class SupportApplicationServiceMock: SupportApplicationService {
    init() { }
    init(delegate: SupportApplicationServiceDelegate? = nil) {
        self.delegate = delegate
    }


    private(set) var showRequestViewControllerCallCount = 0
    var showRequestViewControllerHandler: ((UIViewController, SupportRequestConfiguration) -> ())?
    func showRequestViewController(on viewController: UIViewController, requestType: SupportRequestConfiguration)  {
        showRequestViewControllerCallCount += 1
        if let showRequestViewControllerHandler = showRequestViewControllerHandler {
            showRequestViewControllerHandler(viewController, requestType)
        }
        
    }

    private(set) var showHelpCenterOverviewViewControllerCallCount = 0
    var showHelpCenterOverviewViewControllerHandler: ((UIViewController, SupportRequestConfiguration) -> ())?
    func showHelpCenterOverviewViewController(on viewController: UIViewController, requestType: SupportRequestConfiguration)  {
        showHelpCenterOverviewViewControllerCallCount += 1
        if let showHelpCenterOverviewViewControllerHandler = showHelpCenterOverviewViewControllerHandler {
            showHelpCenterOverviewViewControllerHandler(viewController, requestType)
        }
        
    }

    private(set) var delegateSetCallCount = 0
    var delegate: SupportApplicationServiceDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class DrugListViewTypeMock: DrugListViewType {
    init() { }


    private(set) var setApplicationFormsCallCount = 0
    var setApplicationFormsHandler: (([TagButton.ViewData]) -> ())?
    func setApplicationForms(_ applicationForms: [TagButton.ViewData])  {
        setApplicationFormsCallCount += 1
        if let setApplicationFormsHandler = setApplicationFormsHandler {
            setApplicationFormsHandler(applicationForms)
        }
        
    }

    private(set) var updateDrugListCallCount = 0
    var updateDrugListHandler: (([DrugReferenceViewData]) -> ())?
    func updateDrugList(drugs: [DrugReferenceViewData])  {
        updateDrugListCallCount += 1
        if let updateDrugListHandler = updateDrugListHandler {
            updateDrugListHandler(drugs)
        }
        
    }

    private(set) var showIsLoadingCallCount = 0
    var showIsLoadingHandler: ((Bool) -> ())?
    func showIsLoading(_ isLoading: Bool)  {
        showIsLoadingCallCount += 1
        if let showIsLoadingHandler = showIsLoadingHandler {
            showIsLoadingHandler(isLoading)
        }
        
    }
}

class LibraryTypeMock: LibraryType {
        private var _zip: URL!
    init() { }
    init(metadata: LibraryMetadata, url: URL = URL(fileURLWithPath: ""), learningCardTreeItems: [LearningCardTreeItem] = [LearningCardTreeItem](), autolinks: [Autolink] = [Autolink]()) {
        self._metadata = metadata
        self.url = url
        self.learningCardTreeItems = learningCardTreeItems
        self.autolinks = autolinks
    }
    required init(with zip: URL = URL(fileURLWithPath: "")) throws {
        self._zip = zip
    }


    private(set) var metadataSetCallCount = 0
    private var _metadata: LibraryMetadata!  { didSet { metadataSetCallCount += 1 } }
    var metadata: LibraryMetadata {
        get { return _metadata }
        set { _metadata = newValue }
    }

    private(set) var urlSetCallCount = 0
    var url: URL = URL(fileURLWithPath: "") { didSet { urlSetCallCount += 1 } }

    private(set) var learningCardTreeItemsSetCallCount = 0
    var learningCardTreeItems: [LearningCardTreeItem] = [LearningCardTreeItem]() { didSet { learningCardTreeItemsSetCallCount += 1 } }

    private(set) var moveCallCount = 0
    var moveHandler: ((URL) -> ())?
    func move(toParent folder: URL)  {
        moveCallCount += 1
        if let moveHandler = moveHandler {
            moveHandler(folder)
        }
        
    }

    private(set) var galleryCallCount = 0
    var galleryHandler: ((GalleryIdentifier) throws -> (Gallery))?
    func gallery(with identifier: GalleryIdentifier) throws -> Gallery {
        galleryCallCount += 1
        if let galleryHandler = galleryHandler {
            return try galleryHandler(identifier)
        }
        fatalError("galleryHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var imageResourceCallCount = 0
    var imageResourceHandler: ((ImageResourceIdentifier) throws -> (ImageResourceType))?
    func imageResource(for identifier: ImageResourceIdentifier) throws -> ImageResourceType {
        imageResourceCallCount += 1
        if let imageResourceHandler = imageResourceHandler {
            return try imageResourceHandler(identifier)
        }
        fatalError("imageResourceHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var snippetCallCount = 0
    var snippetHandler: ((LearningCardDeeplink) throws -> (Snippet?))?
    func snippet(for learningCardDeeplink: LearningCardDeeplink) throws -> Snippet? {
        snippetCallCount += 1
        if let snippetHandler = snippetHandler {
            return try snippetHandler(learningCardDeeplink)
        }
        return nil
    }

    private(set) var snippetWithIdentifierCallCount = 0
    var snippetWithIdentifierHandler: ((SnippetIdentifier) throws -> (Snippet?))?
    func snippet(withIdentifier identifier: SnippetIdentifier) throws -> Snippet? {
        snippetWithIdentifierCallCount += 1
        if let snippetWithIdentifierHandler = snippetWithIdentifierHandler {
            return try snippetWithIdentifierHandler(identifier)
        }
        return nil
    }

    private(set) var learningCardMetaItemCallCount = 0
    var learningCardMetaItemHandler: ((LearningCardIdentifier) throws -> (LearningCardMetaItem))?
    func learningCardMetaItem(for identifier: LearningCardIdentifier) throws -> LearningCardMetaItem {
        learningCardMetaItemCallCount += 1
        if let learningCardMetaItemHandler = learningCardMetaItemHandler {
            return try learningCardMetaItemHandler(identifier)
        }
        fatalError("learningCardMetaItemHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var learningCardHtmlBodyCallCount = 0
    var learningCardHtmlBodyHandler: ((LearningCardIdentifier) throws -> (String))?
    func learningCardHtmlBody(for learningCard: LearningCardIdentifier) throws -> String {
        learningCardHtmlBodyCallCount += 1
        if let learningCardHtmlBodyHandler = learningCardHtmlBodyHandler {
            return try learningCardHtmlBodyHandler(learningCard)
        }
        return ""
    }

    private(set) var dataCallCount = 0
    var dataHandler: ((String) throws -> (Data))?
    func data(at path: String) throws -> Data {
        dataCallCount += 1
        if let dataHandler = dataHandler {
            return try dataHandler(path)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var autolinksSetCallCount = 0
    var autolinks: [Autolink] = [Autolink]() { didSet { autolinksSetCallCount += 1 } }
}

class LearningCardOptionsRepositoryTypeMock: LearningCardOptionsRepositoryType {
    init() { }
    init(isHighlightingModeOn: Bool = false, isHighYieldModeOn: Bool = false, isPhysikumFokusModeOn: Bool = false, isLearningRadarOn: Bool = false) {
        self.isHighlightingModeOn = isHighlightingModeOn
        self.isHighYieldModeOn = isHighYieldModeOn
        self.isPhysikumFokusModeOn = isPhysikumFokusModeOn
        self.isLearningRadarOn = isLearningRadarOn
    }


    private(set) var isHighlightingModeOnSetCallCount = 0
    var isHighlightingModeOn: Bool = false { didSet { isHighlightingModeOnSetCallCount += 1 } }

    private(set) var isHighYieldModeOnSetCallCount = 0
    var isHighYieldModeOn: Bool = false { didSet { isHighYieldModeOnSetCallCount += 1 } }

    private(set) var isPhysikumFokusModeOnSetCallCount = 0
    var isPhysikumFokusModeOn: Bool = false { didSet { isPhysikumFokusModeOnSetCallCount += 1 } }

    private(set) var isLearningRadarOnSetCallCount = 0
    var isLearningRadarOn: Bool = false { didSet { isLearningRadarOnSetCallCount += 1 } }

    private(set) var learningCardOptionsCallCount = 0
    var learningCardOptionsHandler: (() -> (LearningCardOptions))?
    func learningCardOptions() -> LearningCardOptions {
        learningCardOptionsCallCount += 1
        if let learningCardOptionsHandler = learningCardOptionsHandler {
            return learningCardOptionsHandler()
        }
        fatalError("learningCardOptionsHandler returns can't have a default value thus its handler must be set")
    }
}

public class MediaClientMock: MediaClient {
    public init() { }


    public private(set) var downloadDataCallCount = 0
    public var downloadDataHandler: ((URL, @escaping Completion<Data, NetworkError<EmptyAPIError>>) -> ())?
    public func downloadData(at url: URL, completion: @escaping Completion<Data, NetworkError<EmptyAPIError>>)  {
        downloadDataCallCount += 1
        if let downloadDataHandler = downloadDataHandler {
            downloadDataHandler(url, completion)
        }
        
    }

    public private(set) var getExternalAdditionCallCount = 0
    public var getExternalAdditionHandler: ((ExternalAdditionIdentifier, @escaping Completion<ExternalAddition, NetworkError<AccessProtectedError>>) -> ())?
    public func getExternalAddition(_ externalAdditionId: ExternalAdditionIdentifier, completion: @escaping Completion<ExternalAddition, NetworkError<AccessProtectedError>>)  {
        getExternalAdditionCallCount += 1
        if let getExternalAdditionHandler = getExternalAdditionHandler {
            getExternalAdditionHandler(externalAdditionId, completion)
        }
        
    }
}

public class QbankClientMock: QbankClient {
    public init() { }


    public private(set) var getMostRecentAnswerStatusesCallCount = 0
    public var getMostRecentAnswerStatusesHandler: ((PaginationCursor?, @escaping Completion<Page<QBankAnswer>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getMostRecentAnswerStatuses(after: PaginationCursor?, completion: @escaping Completion<Page<QBankAnswer>?, NetworkError<EmptyAPIError>>)  {
        getMostRecentAnswerStatusesCallCount += 1
        if let getMostRecentAnswerStatusesHandler = getMostRecentAnswerStatusesHandler {
            getMostRecentAnswerStatusesHandler(after, completion)
        }
        
    }
}

class ReadingRepositoryTypeMock: ReadingRepositoryType {
    init() { }


    private(set) var startReadingCallCount = 0
    var startReadingHandler: ((LearningCardIdentifier) -> ())?
    func startReading(for learningCard: LearningCardIdentifier)  {
        startReadingCallCount += 1
        if let startReadingHandler = startReadingHandler {
            startReadingHandler(learningCard)
        }
        
    }

    private(set) var endReadingCallCount = 0
    var endReadingHandler: ((LearningCardIdentifier) -> (LearningCardReading?))?
    func endReading(for learningCard: LearningCardIdentifier) -> LearningCardReading? {
        endReadingCallCount += 1
        if let endReadingHandler = endReadingHandler {
            return endReadingHandler(learningCard)
        }
        return nil
    }

    private(set) var readingsToBeSynchronizedCallCount = 0
    var readingsToBeSynchronizedHandler: (() -> ([LearningCardReading]))?
    func readingsToBeSynchronized() -> [LearningCardReading] {
        readingsToBeSynchronizedCallCount += 1
        if let readingsToBeSynchronizedHandler = readingsToBeSynchronizedHandler {
            return readingsToBeSynchronizedHandler()
        }
        return [LearningCardReading]()
    }

    private(set) var removeSynchronizedReadingsCallCount = 0
    var removeSynchronizedReadingsHandler: (() -> ())?
    func removeSynchronizedReadings()  {
        removeSynchronizedReadingsCallCount += 1
        if let removeSynchronizedReadingsHandler = removeSynchronizedReadingsHandler {
            removeSynchronizedReadingsHandler()
        }
        
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class RootPresenterTypeMock: RootPresenterType {
    init() { }
    init(view: RootViewType? = nil) {
        self.view = view
    }


    private(set) var viewSetCallCount = 0
    var view: RootViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var switchToCallCount = 0
    var switchToHandler: ((RootItem) -> ())?
    func switchTo(_ tab: RootItem)  {
        switchToCallCount += 1
        if let switchToHandler = switchToHandler {
            switchToHandler(tab)
        }
        
    }

    private(set) var didStartCallCount = 0
    var didStartHandler: (() -> ())?
    func didStart()  {
        didStartCallCount += 1
        if let didStartHandler = didStartHandler {
            didStartHandler()
        }
        
    }

    private(set) var didStopCallCount = 0
    var didStopHandler: (() -> ())?
    func didStop()  {
        didStopCallCount += 1
        if let didStopHandler = didStopHandler {
            didStopHandler()
        }
        
    }

    private(set) var didReceiveDeepLinkCallCount = 0
    var didReceiveDeepLinkHandler: ((Deeplink) -> ())?
    func didReceiveDeepLink(_ deepLink: Deeplink)  {
        didReceiveDeepLinkCallCount += 1
        if let didReceiveDeepLinkHandler = didReceiveDeepLinkHandler {
            didReceiveDeepLinkHandler(deepLink)
        }
        
    }
}

class TagRepositoryTypeMock: TagRepositoryType {
    init() { }


    private(set) var addTagCallCount = 0
    var addTagHandler: ((Tag, LearningCardIdentifier) -> ())?
    func addTag(_ type: Tag, for learningCard: LearningCardIdentifier)  {
        addTagCallCount += 1
        if let addTagHandler = addTagHandler {
            addTagHandler(type, learningCard)
        }
        
    }

    private(set) var removeTagCallCount = 0
    var removeTagHandler: ((Tag, LearningCardIdentifier) -> ())?
    func removeTag(_ type: Tag, for learningCard: LearningCardIdentifier)  {
        removeTagCallCount += 1
        if let removeTagHandler = removeTagHandler {
            removeTagHandler(type, learningCard)
        }
        
    }

    private(set) var tagsCallCount = 0
    var tagsHandler: ((LearningCardIdentifier) -> ([Tag]))?
    func tags(for learningCard: LearningCardIdentifier) -> [Tag] {
        tagsCallCount += 1
        if let tagsHandler = tagsHandler {
            return tagsHandler(learningCard)
        }
        return [Tag]()
    }

    private(set) var taggingsCallCount = 0
    var taggingsHandler: ((Date?, [Tag]) -> ([Tagging]))?
    func taggings(changedSince date: Date?, tags: [Tag]) -> [Tagging] {
        taggingsCallCount += 1
        if let taggingsHandler = taggingsHandler {
            return taggingsHandler(date, tags)
        }
        return [Tagging]()
    }

    private(set) var addTagsCallCount = 0
    var addTagsHandler: (([Tagging]) -> ())?
    func addTags(_ taggings: [Tagging])  {
        addTagsCallCount += 1
        if let addTagsHandler = addTagsHandler {
            addTagsHandler(taggings)
        }
        
    }

    private(set) var learningCardsCallCount = 0
    var learningCardsHandler: ((Tag) -> ([LearningCardIdentifier]))?
    func learningCards(with tag: Tag) -> [LearningCardIdentifier] {
        learningCardsCallCount += 1
        if let learningCardsHandler = learningCardsHandler {
            return learningCardsHandler(tag)
        }
        return [LearningCardIdentifier]()
    }

    private(set) var hasTagCallCount = 0
    var hasTagHandler: ((Tag, LearningCardIdentifier) -> (Bool))?
    func hasTag(_ tag: Tag, for learningCard: LearningCardIdentifier) -> Bool {
        hasTagCallCount += 1
        if let hasTagHandler = hasTagHandler {
            return hasTagHandler(tag, learningCard)
        }
        return false
    }

    private(set) var learningCardsSortedByDateCallCount = 0
    var learningCardsSortedByDateHandler: ((Tag) -> ([LearningCardIdentifier]))?
    func learningCardsSortedByDate(with tag: Tag) -> [LearningCardIdentifier] {
        learningCardsSortedByDateCallCount += 1
        if let learningCardsSortedByDateHandler = learningCardsSortedByDateHandler {
            return learningCardsSortedByDateHandler(tag)
        }
        return [LearningCardIdentifier]()
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

public class PharmaClientMock: PharmaClient {
    public init() { }


    public private(set) var getPharmaCardCallCount = 0
    public var getPharmaCardHandler: ((SubstanceIdentifier, DrugIdentifier, PackageSizeSortingOrder, TimeInterval, URLRequest.CachePolicy, @escaping Completion<PharmaCard, NetworkError<EmptyAPIError>>) -> ())?
    public func getPharmaCard(for substanceIdentifier: SubstanceIdentifier, drugIdentifier: DrugIdentifier, sorting: PackageSizeSortingOrder, timeout: TimeInterval, cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<PharmaCard, NetworkError<EmptyAPIError>>)  {
        getPharmaCardCallCount += 1
        if let getPharmaCardHandler = getPharmaCardHandler {
            getPharmaCardHandler(substanceIdentifier, drugIdentifier, sorting, timeout, cachePolicy, completion)
        }
        
    }

    public private(set) var getSubstanceCallCount = 0
    public var getSubstanceHandler: ((SubstanceIdentifier, TimeInterval, URLRequest.CachePolicy, @escaping Completion<Substance, NetworkError<EmptyAPIError>>) -> ())?
    public func getSubstance(for substanceIdentifier: SubstanceIdentifier, timeout: TimeInterval, cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<Substance, NetworkError<EmptyAPIError>>)  {
        getSubstanceCallCount += 1
        if let getSubstanceHandler = getSubstanceHandler {
            getSubstanceHandler(substanceIdentifier, timeout, cachePolicy, completion)
        }
        
    }

    public private(set) var getDrugCallCount = 0
    public var getDrugHandler: ((DrugIdentifier, PackageSizeSortingOrder, TimeInterval, URLRequest.CachePolicy, @escaping Completion<Drug, NetworkError<EmptyAPIError>>) -> ())?
    public func getDrug(for drugIdentifier: DrugIdentifier, sorting: PackageSizeSortingOrder, timeout: TimeInterval, cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<Drug, NetworkError<EmptyAPIError>>)  {
        getDrugCallCount += 1
        if let getDrugHandler = getDrugHandler {
            getDrugHandler(drugIdentifier, sorting, timeout, cachePolicy, completion)
        }
        
    }

    public private(set) var getDosageCallCount = 0
    public var getDosageHandler: ((DosageIdentifier, TimeInterval?, URLRequest.CachePolicy, @escaping Completion<Dosage, NetworkError<EmptyAPIError>>) -> ())?
    public func getDosage(for dosagerIdentifier: DosageIdentifier, timeout: TimeInterval?, cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<Dosage, NetworkError<EmptyAPIError>>)  {
        getDosageCallCount += 1
        if let getDosageHandler = getDosageHandler {
            getDosageHandler(dosagerIdentifier, timeout, cachePolicy, completion)
        }
        
    }

    public private(set) var getPharmaDatabasesCallCount = 0
    public var getPharmaDatabasesHandler: ((Int, @escaping Completion<[PharmaUpdate], NetworkError<EmptyAPIError>>) -> ())?
    public func getPharmaDatabases(for majorDBVersion: Int, completion: @escaping Completion<[PharmaUpdate], NetworkError<EmptyAPIError>>)  {
        getPharmaDatabasesCallCount += 1
        if let getPharmaDatabasesHandler = getPharmaDatabasesHandler {
            getPharmaDatabasesHandler(majorDBVersion, completion)
        }
        
    }

    public private(set) var getMonographCallCount = 0
    public var getMonographHandler: ((MonographIdentifier, @escaping Completion<Monograph, NetworkError<EmptyAPIError>>) -> ())?
    public func getMonograph(for monographIdentifier: MonographIdentifier, completion: @escaping Completion<Monograph, NetworkError<EmptyAPIError>>)  {
        getMonographCallCount += 1
        if let getMonographHandler = getMonographHandler {
            getMonographHandler(monographIdentifier, completion)
        }
        
    }
}

public class SearchClientMock: SearchClient {
    public init() { }


    public private(set) var getSuggestionsCallCount = 0
    public var getSuggestionsHandler: ((String, [SearchSuggestionResultType], TimeInterval, @escaping Completion<[SearchSuggestionItem], NetworkError<EmptyAPIError>>) -> ())?
    public func getSuggestions(for text: String, resultTypes: [SearchSuggestionResultType], timeout: TimeInterval, completion: @escaping Completion<[SearchSuggestionItem], NetworkError<EmptyAPIError>>)  {
        getSuggestionsCallCount += 1
        if let getSuggestionsHandler = getSuggestionsHandler {
            getSuggestionsHandler(text, resultTypes, timeout, completion)
        }
        
    }

    public private(set) var overviewSearchDECallCount = 0
    public var overviewSearchDEHandler: ((String, Int, TimeInterval, @escaping Completion<SearchOverviewResult, NetworkError<EmptyAPIError>>) -> ())?
    public func overviewSearchDE(for text: String, limit: Int, timeout: TimeInterval, completion: @escaping Completion<SearchOverviewResult, NetworkError<EmptyAPIError>>)  {
        overviewSearchDECallCount += 1
        if let overviewSearchDEHandler = overviewSearchDEHandler {
            overviewSearchDEHandler(text, limit, timeout, completion)
        }
        
    }

    public private(set) var overviewSearchUSCallCount = 0
    public var overviewSearchUSHandler: ((String, Int, TimeInterval, Bool, @escaping Completion<SearchOverviewResult, NetworkError<EmptyAPIError>>) -> ())?
    public func overviewSearchUS(for text: String, limit: Int, timeout: TimeInterval, isMonographSearchAvailable: Bool, completion: @escaping Completion<SearchOverviewResult, NetworkError<EmptyAPIError>>)  {
        overviewSearchUSCallCount += 1
        if let overviewSearchUSHandler = overviewSearchUSHandler {
            overviewSearchUSHandler(text, limit, timeout, isMonographSearchAvailable, completion)
        }
        
    }

    public private(set) var getArticleResultsCallCount = 0
    public var getArticleResultsHandler: ((String, Int, TimeInterval?, PaginationCursor?, @escaping Completion<Page<ArticleSearchItem>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getArticleResults(for text: String, limit: Int, timeout: TimeInterval?, after: PaginationCursor?, completion: @escaping Completion<Page<ArticleSearchItem>?, NetworkError<EmptyAPIError>>)  {
        getArticleResultsCallCount += 1
        if let getArticleResultsHandler = getArticleResultsHandler {
            getArticleResultsHandler(text, limit, timeout, after, completion)
        }
        
    }

    public private(set) var getPharmaResultsCallCount = 0
    public var getPharmaResultsHandler: ((String, Int, TimeInterval?, PaginationCursor?, @escaping Completion<Page<PharmaSearchItem>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getPharmaResults(for text: String, limit: Int, timeout: TimeInterval?, after: PaginationCursor?, completion: @escaping Completion<Page<PharmaSearchItem>?, NetworkError<EmptyAPIError>>)  {
        getPharmaResultsCallCount += 1
        if let getPharmaResultsHandler = getPharmaResultsHandler {
            getPharmaResultsHandler(text, limit, timeout, after, completion)
        }
        
    }

    public private(set) var getMonographResultsCallCount = 0
    public var getMonographResultsHandler: ((String, Int, TimeInterval?, PaginationCursor?, @escaping Completion<Page<MonographSearchItem>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getMonographResults(for text: String, limit: Int, timeout: TimeInterval?, after: PaginationCursor?, completion: @escaping Completion<Page<MonographSearchItem>?, NetworkError<EmptyAPIError>>)  {
        getMonographResultsCallCount += 1
        if let getMonographResultsHandler = getMonographResultsHandler {
            getMonographResultsHandler(text, limit, timeout, after, completion)
        }
        
    }

    public private(set) var getGuidelineResultsCallCount = 0
    public var getGuidelineResultsHandler: ((String, Int, TimeInterval?, PaginationCursor?, @escaping Completion<Page<GuidelineSearchItem>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getGuidelineResults(for text: String, limit: Int, timeout: TimeInterval?, after: PaginationCursor?, completion: @escaping Completion<Page<GuidelineSearchItem>?, NetworkError<EmptyAPIError>>)  {
        getGuidelineResultsCallCount += 1
        if let getGuidelineResultsHandler = getGuidelineResultsHandler {
            getGuidelineResultsHandler(text, limit, timeout, after, completion)
        }
        
    }

    public private(set) var getMediaResultsCallCount = 0
    public var getMediaResultsHandler: ((String, [String], Int, TimeInterval?, PaginationCursor?, @escaping Completion<(Page<MediaSearchItem>?, MediaFiltersResult), NetworkError<EmptyAPIError>>) -> ())?
    public func getMediaResults(for text: String, mediaFilters: [String], limit: Int, timeout: TimeInterval?, after: PaginationCursor?, completion: @escaping Completion<(Page<MediaSearchItem>?, MediaFiltersResult), NetworkError<EmptyAPIError>>)  {
        getMediaResultsCallCount += 1
        if let getMediaResultsHandler = getMediaResultsHandler {
            getMediaResultsHandler(text, mediaFilters, limit, timeout, after, completion)
        }
        
    }
}

class DeepLinkServiceTypeMock: DeepLinkServiceType {
    init() { }
    init(delegate: DeepLinkServiceDelegate? = nil, deferDeepLinks: Bool = false) {
        self.delegate = delegate
        self.deferDeepLinks = deferDeepLinks
    }


    private(set) var delegateSetCallCount = 0
    var delegate: DeepLinkServiceDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var deferDeepLinksSetCallCount = 0
    var deferDeepLinks: Bool = false { didSet { deferDeepLinksSetCallCount += 1 } }

    private(set) var handleDeepLinkCallCount = 0
    var handleDeepLinkHandler: ((Deeplink) -> ())?
    func handleDeepLink(_ deepLink: Deeplink)  {
        handleDeepLinkCallCount += 1
        if let handleDeepLinkHandler = handleDeepLinkHandler {
            handleDeepLinkHandler(deepLink)
        }
        
    }

    private(set) var handleWebpageURLCallCount = 0
    var handleWebpageURLHandler: ((URL) -> (Bool))?
    func handleWebpageURL(_ webpageURL: URL) -> Bool {
        handleWebpageURLCallCount += 1
        if let handleWebpageURLHandler = handleWebpageURLHandler {
            return handleWebpageURLHandler(webpageURL)
        }
        return false
    }
}

class ExtensionRepositoryTypeMock: ExtensionRepositoryType {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: ((Extension) -> ())?
    func set(ext: Extension)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(ext)
        }
        
    }

    private(set) var extensionsCallCount = 0
    var extensionsHandler: ((LearningCardIdentifier) -> ([Extension]))?
    func extensions(for learningCard: LearningCardIdentifier) -> [Extension] {
        extensionsCallCount += 1
        if let extensionsHandler = extensionsHandler {
            return extensionsHandler(learningCard)
        }
        return [Extension]()
    }

    private(set) var extensionsMetaDataCallCount = 0
    var extensionsMetaDataHandler: (() -> ([ExtensionMetadata]))?
    func extensionsMetaData() -> [ExtensionMetadata] {
        extensionsMetaDataCallCount += 1
        if let extensionsMetaDataHandler = extensionsMetaDataHandler {
            return extensionsMetaDataHandler()
        }
        return [ExtensionMetadata]()
    }

    private(set) var extensionForSectionCallCount = 0
    var extensionForSectionHandler: ((LearningCardSectionIdentifier) -> (Extension?))?
    func extensionForSection(_ section: LearningCardSectionIdentifier) -> Extension? {
        extensionForSectionCallCount += 1
        if let extensionForSectionHandler = extensionForSectionHandler {
            return extensionForSectionHandler(section)
        }
        return nil
    }

    private(set) var extensionsToBeUploadedCallCount = 0
    var extensionsToBeUploadedHandler: (() -> ([Extension]))?
    func extensionsToBeUploaded() -> [Extension] {
        extensionsToBeUploadedCallCount += 1
        if let extensionsToBeUploadedHandler = extensionsToBeUploadedHandler {
            return extensionsToBeUploadedHandler()
        }
        return [Extension]()
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class RemoteConfigTypeMock: RemoteConfigType {
    init() { }
    init(requestTimeout: NSNumber, searchAdConfig: SearchAdConfig, areMonographsEnabled: Bool = false, pharmaDosageTooltipV1Enabled: Bool = false, pharmaDosageNGDENavigationEnabled: Bool = false, brazeEnabled: Bool = false, contentCardsEnabled: Bool = false, iap5DayTrialRemoved: Bool = false, medicationLinkReplacements: [(snippet: SnippetIdentifier, monograph: MonographIdentifier)]? = nil, termsReAcceptanceEnabled: Bool = false, dashboardCMELinkEnabled: Bool = false) {
        self._requestTimeout = requestTimeout
        self._searchAdConfig = searchAdConfig
        self.areMonographsEnabled = areMonographsEnabled
        self.pharmaDosageTooltipV1Enabled = pharmaDosageTooltipV1Enabled
        self.pharmaDosageNGDENavigationEnabled = pharmaDosageNGDENavigationEnabled
        self.brazeEnabled = brazeEnabled
        self.contentCardsEnabled = contentCardsEnabled
        self.iap5DayTrialRemoved = iap5DayTrialRemoved
        self.medicationLinkReplacements = medicationLinkReplacements
        self.termsReAcceptanceEnabled = termsReAcceptanceEnabled
        self.dashboardCMELinkEnabled = dashboardCMELinkEnabled
    }


    private(set) var fetchCallCount = 0
    var fetchHandler: ((@escaping (Result<Void, RemoteConfigSynchError>) -> Void) -> ())?
    func fetch(completion: @escaping (Result<Void, RemoteConfigSynchError>) -> Void)  {
        fetchCallCount += 1
        if let fetchHandler = fetchHandler {
            fetchHandler(completion)
        }
        
    }

    private(set) var requestTimeoutSetCallCount = 0
    private var _requestTimeout: NSNumber!  { didSet { requestTimeoutSetCallCount += 1 } }
    var requestTimeout: NSNumber {
        get { return _requestTimeout }
        set { _requestTimeout = newValue }
    }

    private(set) var searchAdConfigSetCallCount = 0
    private var _searchAdConfig: SearchAdConfig!  { didSet { searchAdConfigSetCallCount += 1 } }
    var searchAdConfig: SearchAdConfig {
        get { return _searchAdConfig }
        set { _searchAdConfig = newValue }
    }

    private(set) var areMonographsEnabledSetCallCount = 0
    var areMonographsEnabled: Bool = false { didSet { areMonographsEnabledSetCallCount += 1 } }

    private(set) var pharmaDosageTooltipV1EnabledSetCallCount = 0
    var pharmaDosageTooltipV1Enabled: Bool = false { didSet { pharmaDosageTooltipV1EnabledSetCallCount += 1 } }

    private(set) var pharmaDosageNGDENavigationEnabledSetCallCount = 0
    var pharmaDosageNGDENavigationEnabled: Bool = false { didSet { pharmaDosageNGDENavigationEnabledSetCallCount += 1 } }

    private(set) var brazeEnabledSetCallCount = 0
    var brazeEnabled: Bool = false { didSet { brazeEnabledSetCallCount += 1 } }

    private(set) var contentCardsEnabledSetCallCount = 0
    var contentCardsEnabled: Bool = false { didSet { contentCardsEnabledSetCallCount += 1 } }

    private(set) var iap5DayTrialRemovedSetCallCount = 0
    var iap5DayTrialRemoved: Bool = false { didSet { iap5DayTrialRemovedSetCallCount += 1 } }

    private(set) var medicationLinkReplacementsSetCallCount = 0
    var medicationLinkReplacements: [(snippet: SnippetIdentifier, monograph: MonographIdentifier)]? = nil { didSet { medicationLinkReplacementsSetCallCount += 1 } }

    private(set) var termsReAcceptanceEnabledSetCallCount = 0
    var termsReAcceptanceEnabled: Bool = false { didSet { termsReAcceptanceEnabledSetCallCount += 1 } }

    private(set) var dashboardCMELinkEnabledSetCallCount = 0
    var dashboardCMELinkEnabled: Bool = false { didSet { dashboardCMELinkEnabledSetCallCount += 1 } }
}

public class SnippetClientMock: SnippetClient {
    public init() { }


    public private(set) var getSnippetCallCount = 0
    public var getSnippetHandler: ((SnippetIdentifier, URLRequest.CachePolicy, @escaping Completion<Snippet, NetworkError<EmptyAPIError>>) -> ())?
    public func getSnippet(for snippetIdentifier: SnippetIdentifier, cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<Snippet, NetworkError<EmptyAPIError>>)  {
        getSnippetCallCount += 1
        if let getSnippetHandler = getSnippetHandler {
            getSnippetHandler(snippetIdentifier, cachePolicy, completion)
        }
        
    }
}

class AuthorizationRepositoryTypeMock: AuthorizationRepositoryType {
    init() { }
    init(deviceId: String = "", authorization: Authorization? = nil, accountWasDeleted: Bool? = nil) {
        self.deviceId = deviceId
        self.authorization = authorization
        self.accountWasDeleted = accountWasDeleted
    }


    private(set) var deviceIdSetCallCount = 0
    var deviceId: String = "" { didSet { deviceIdSetCallCount += 1 } }

    private(set) var authorizationSetCallCount = 0
    var authorization: Authorization? = nil { didSet { authorizationSetCallCount += 1 } }

    private(set) var accountWasDeletedSetCallCount = 0
    var accountWasDeleted: Bool? = nil { didSet { accountWasDeletedSetCallCount += 1 } }
}

class FeedbackRepositoryTypeMock: FeedbackRepositoryType {
    init() { }


    private(set) var addFeedbackCallCount = 0
    var addFeedbackHandler: ((SectionFeedback) -> ())?
    func addFeedback(_ feedback: SectionFeedback)  {
        addFeedbackCallCount += 1
        if let addFeedbackHandler = addFeedbackHandler {
            addFeedbackHandler(feedback)
        }
        
    }

    private(set) var removeFeedbackCallCount = 0
    var removeFeedbackHandler: ((SectionFeedback) -> ())?
    func removeFeedback(_ feedback: SectionFeedback)  {
        removeFeedbackCallCount += 1
        if let removeFeedbackHandler = removeFeedbackHandler {
            removeFeedbackHandler(feedback)
        }
        
    }

    private(set) var getFirstFeedbackCallCount = 0
    var getFirstFeedbackHandler: (() -> (SectionFeedback?))?
    func getFirstFeedback() -> SectionFeedback? {
        getFirstFeedbackCallCount += 1
        if let getFirstFeedbackHandler = getFirstFeedbackHandler {
            return getFirstFeedbackHandler()
        }
        return nil
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class GalleryViewTypeMock: GalleryViewType {
    init() { }


    private(set) var setImagePresentersCallCount = 0
    var setImagePresentersHandler: (([GalleryImageViewPresenterType]) -> ())?
    func setImagePresenters(_ presenters: [GalleryImageViewPresenterType])  {
        setImagePresentersCallCount += 1
        if let setImagePresentersHandler = setImagePresentersHandler {
            setImagePresentersHandler(presenters)
        }
        
    }

    private(set) var goToImageCallCount = 0
    var goToImageHandler: ((Int, Bool) -> ())?
    func goToImage(atIndex index: Int, animated: Bool)  {
        goToImageCallCount += 1
        if let goToImageHandler = goToImageHandler {
            goToImageHandler(index, animated)
        }
        
    }
}

class LearningCardTrackerTypeMock: LearningCardTrackerType {
    init() { }
    init(trackingProvider: TrackingType = TrackingTypeMock()) {
        self.trackingProvider = trackingProvider
    }


    private(set) var trackingProviderSetCallCount = 0
    var trackingProvider: TrackingType = TrackingTypeMock() { didSet { trackingProviderSetCallCount += 1 } }

    private(set) var trackLearningRadarCallCount = 0
    var trackLearningRadarHandler: ((Bool) -> ())?
    func trackLearningRadar(isEnabled: Bool)  {
        trackLearningRadarCallCount += 1
        if let trackLearningRadarHandler = trackLearningRadarHandler {
            trackLearningRadarHandler(isEnabled)
        }
        
    }

    private(set) var trackInArticleSearchOpenedCallCount = 0
    var trackInArticleSearchOpenedHandler: (() -> ())?
    func trackInArticleSearchOpened()  {
        trackInArticleSearchOpenedCallCount += 1
        if let trackInArticleSearchOpenedHandler = trackInArticleSearchOpenedHandler {
            trackInArticleSearchOpenedHandler()
        }
        
    }

    private(set) var trackArticleFindInPageEditedCallCount = 0
    var trackArticleFindInPageEditedHandler: ((String?, Int, Int) -> ())?
    func trackArticleFindInPageEdited(currentInput: String?, totalMatches: Int, currentMatch: Int)  {
        trackArticleFindInPageEditedCallCount += 1
        if let trackArticleFindInPageEditedHandler = trackArticleFindInPageEditedHandler {
            trackArticleFindInPageEditedHandler(currentInput, totalMatches, currentMatch)
        }
        
    }

    private(set) var trackPresentShareSheetCallCount = 0
    var trackPresentShareSheetHandler: (() -> ())?
    func trackPresentShareSheet()  {
        trackPresentShareSheetCallCount += 1
        if let trackPresentShareSheetHandler = trackPresentShareSheetHandler {
            trackPresentShareSheetHandler()
        }
        
    }

    private(set) var trackShareSentCallCount = 0
    var trackShareSentHandler: (() -> ())?
    func trackShareSent()  {
        trackShareSentCallCount += 1
        if let trackShareSentHandler = trackShareSentHandler {
            trackShareSentHandler()
        }
        
    }

    private(set) var trackIsLearnedCallCount = 0
    var trackIsLearnedHandler: ((Bool) -> ())?
    func trackIsLearned(isEnabled: Bool)  {
        trackIsLearnedCallCount += 1
        if let trackIsLearnedHandler = trackIsLearnedHandler {
            trackIsLearnedHandler(isEnabled)
        }
        
    }

    private(set) var trackHighlightingCallCount = 0
    var trackHighlightingHandler: ((Bool) -> ())?
    func trackHighlighting(isEnabled: Bool)  {
        trackHighlightingCallCount += 1
        if let trackHighlightingHandler = trackHighlightingHandler {
            trackHighlightingHandler(isEnabled)
        }
        
    }

    private(set) var trackHighYieldCallCount = 0
    var trackHighYieldHandler: ((Bool) -> ())?
    func trackHighYield(isEnabled: Bool)  {
        trackHighYieldCallCount += 1
        if let trackHighYieldHandler = trackHighYieldHandler {
            trackHighYieldHandler(isEnabled)
        }
        
    }

    private(set) var trackArticleFavoriteCallCount = 0
    var trackArticleFavoriteHandler: ((Bool) -> ())?
    func trackArticleFavorite(isFavorite: Bool)  {
        trackArticleFavoriteCallCount += 1
        if let trackArticleFavoriteHandler = trackArticleFavoriteHandler {
            trackArticleFavoriteHandler(isFavorite)
        }
        
    }

    private(set) var trackArticleSelectedCallCount = 0
    var trackArticleSelectedHandler: (() -> ())?
    func trackArticleSelected()  {
        trackArticleSelectedCallCount += 1
        if let trackArticleSelectedHandler = trackArticleSelectedHandler {
            trackArticleSelectedHandler()
        }
        
    }

    private(set) var trackStartReadingCallCount = 0
    var trackStartReadingHandler: ((LearningCardIdentifier) -> ())?
    func trackStartReading(for identifier: LearningCardIdentifier)  {
        trackStartReadingCallCount += 1
        if let trackStartReadingHandler = trackStartReadingHandler {
            trackStartReadingHandler(identifier)
        }
        
    }

    private(set) var trackEndReadingCallCount = 0
    var trackEndReadingHandler: ((LearningCardIdentifier, LearningCardReading?) -> ())?
    func trackEndReading(for identifier: LearningCardIdentifier, with reading: LearningCardReading?)  {
        trackEndReadingCallCount += 1
        if let trackEndReadingHandler = trackEndReadingHandler {
            trackEndReadingHandler(identifier, reading)
        }
        
    }

    private(set) var trackTooltipOpenCallCount = 0
    var trackTooltipOpenHandler: ((String?) -> ())?
    func trackTooltipOpen(tooltipType: String?)  {
        trackTooltipOpenCallCount += 1
        if let trackTooltipOpenHandler = trackTooltipOpenHandler {
            trackTooltipOpenHandler(tooltipType)
        }
        
    }

    private(set) var trackSectionOpenedCallCount = 0
    var trackSectionOpenedHandler: ((String) -> ())?
    func trackSectionOpened(sectionID: String)  {
        trackSectionOpenedCallCount += 1
        if let trackSectionOpenedHandler = trackSectionOpenedHandler {
            trackSectionOpenedHandler(sectionID)
        }
        
    }

    private(set) var trackSectionClosedCallCount = 0
    var trackSectionClosedHandler: ((String) -> ())?
    func trackSectionClosed(sectionID: String)  {
        trackSectionClosedCallCount += 1
        if let trackSectionClosedHandler = trackSectionClosedHandler {
            trackSectionClosedHandler(sectionID)
        }
        
    }

    private(set) var trackOpenAllSectionsCallCount = 0
    var trackOpenAllSectionsHandler: (() -> ())?
    func trackOpenAllSections()  {
        trackOpenAllSectionsCallCount += 1
        if let trackOpenAllSectionsHandler = trackOpenAllSectionsHandler {
            trackOpenAllSectionsHandler()
        }
        
    }

    private(set) var trackCloseAllSectionsCallCount = 0
    var trackCloseAllSectionsHandler: (() -> ())?
    func trackCloseAllSections()  {
        trackCloseAllSectionsCallCount += 1
        if let trackCloseAllSectionsHandler = trackCloseAllSectionsHandler {
            trackCloseAllSectionsHandler()
        }
        
    }

    private(set) var trackArticleAnchorIdInvalidCallCount = 0
    var trackArticleAnchorIdInvalidHandler: ((String, String) -> ())?
    func trackArticleAnchorIdInvalid(articleID: String, id: String)  {
        trackArticleAnchorIdInvalidCallCount += 1
        if let trackArticleAnchorIdInvalidHandler = trackArticleAnchorIdInvalidHandler {
            trackArticleAnchorIdInvalidHandler(articleID, id)
        }
        
    }

    private(set) var trackArticleParticleIdInvalidCallCount = 0
    var trackArticleParticleIdInvalidHandler: ((String, String) -> ())?
    func trackArticleParticleIdInvalid(articleID: String, id: String)  {
        trackArticleParticleIdInvalidCallCount += 1
        if let trackArticleParticleIdInvalidHandler = trackArticleParticleIdInvalidHandler {
            trackArticleParticleIdInvalidHandler(articleID, id)
        }
        
    }

    private(set) var trackArticleDosageOpenedCallCount = 0
    var trackArticleDosageOpenedHandler: ((DosageIdentifier, DataSource) -> ())?
    func trackArticleDosageOpened(dosageID: DosageIdentifier, source: DataSource)  {
        trackArticleDosageOpenedCallCount += 1
        if let trackArticleDosageOpenedHandler = trackArticleDosageOpenedHandler {
            trackArticleDosageOpenedHandler(dosageID, source)
        }
        
    }

    private(set) var trackArticleDosageOpenFailedCallCount = 0
    var trackArticleDosageOpenFailedHandler: ((DosageIdentifier, Error) -> ())?
    func trackArticleDosageOpenFailed(dosageID: DosageIdentifier, error: Error)  {
        trackArticleDosageOpenFailedCallCount += 1
        if let trackArticleDosageOpenFailedHandler = trackArticleDosageOpenFailedHandler {
            trackArticleDosageOpenFailedHandler(dosageID, error)
        }
        
    }

    private(set) var trackNavigatedForwardCallCount = 0
    var trackNavigatedForwardHandler: (() -> ())?
    func trackNavigatedForward()  {
        trackNavigatedForwardCallCount += 1
        if let trackNavigatedForwardHandler = trackNavigatedForwardHandler {
            trackNavigatedForwardHandler()
        }
        
    }

    private(set) var trackNavigatedBackwardCallCount = 0
    var trackNavigatedBackwardHandler: (() -> ())?
    func trackNavigatedBackward()  {
        trackNavigatedBackwardCallCount += 1
        if let trackNavigatedBackwardHandler = trackNavigatedBackwardHandler {
            trackNavigatedBackwardHandler()
        }
        
    }

    private(set) var trackShowImageExplanationsCallCount = 0
    var trackShowImageExplanationsHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowImageExplanations(imageID: ImageResourceIdentifier)  {
        trackShowImageExplanationsCallCount += 1
        if let trackShowImageExplanationsHandler = trackShowImageExplanationsHandler {
            trackShowImageExplanationsHandler(imageID)
        }
        
    }

    private(set) var trackHideImageExplanationsCallCount = 0
    var trackHideImageExplanationsHandler: ((ImageResourceIdentifier) -> ())?
    func trackHideImageExplanations(imageID: ImageResourceIdentifier)  {
        trackHideImageExplanationsCallCount += 1
        if let trackHideImageExplanationsHandler = trackHideImageExplanationsHandler {
            trackHideImageExplanationsHandler(imageID)
        }
        
    }

    private(set) var trackShowImageOverlayCallCount = 0
    var trackShowImageOverlayHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowImageOverlay(imageID: ImageResourceIdentifier)  {
        trackShowImageOverlayCallCount += 1
        if let trackShowImageOverlayHandler = trackShowImageOverlayHandler {
            trackShowImageOverlayHandler(imageID)
        }
        
    }

    private(set) var trackHideImageOverlayCallCount = 0
    var trackHideImageOverlayHandler: ((ImageResourceIdentifier) -> ())?
    func trackHideImageOverlay(imageID: ImageResourceIdentifier)  {
        trackHideImageOverlayCallCount += 1
        if let trackHideImageOverlayHandler = trackHideImageOverlayHandler {
            trackHideImageOverlayHandler(imageID)
        }
        
    }

    private(set) var trackShowSmartZoomCallCount = 0
    var trackShowSmartZoomHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowSmartZoom(imageID: ImageResourceIdentifier)  {
        trackShowSmartZoomCallCount += 1
        if let trackShowSmartZoomHandler = trackShowSmartZoomHandler {
            trackShowSmartZoomHandler(imageID)
        }
        
    }

    private(set) var trackCloseSmartZoomCallCount = 0
    var trackCloseSmartZoomHandler: ((ImageResourceIdentifier) -> ())?
    func trackCloseSmartZoom(imageID: ImageResourceIdentifier)  {
        trackCloseSmartZoomCallCount += 1
        if let trackCloseSmartZoomHandler = trackCloseSmartZoomHandler {
            trackCloseSmartZoomHandler(imageID)
        }
        
    }

    private(set) var trackShowImageMediaviewerCallCount = 0
    var trackShowImageMediaviewerHandler: ((ImageResourceIdentifier?, String?, String?) -> ())?
    func trackShowImageMediaviewer(imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackShowImageMediaviewerCallCount += 1
        if let trackShowImageMediaviewerHandler = trackShowImageMediaviewerHandler {
            trackShowImageMediaviewerHandler(imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackCloseImageMediaviewerCallCount = 0
    var trackCloseImageMediaviewerHandler: ((ImageResourceIdentifier?, String?, String?) -> ())?
    func trackCloseImageMediaviewer(imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackCloseImageMediaviewerCallCount += 1
        if let trackCloseImageMediaviewerHandler = trackCloseImageMediaviewerHandler {
            trackCloseImageMediaviewerHandler(imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackShowImageMediaviewerArticleIdCallCount = 0
    var trackShowImageMediaviewerArticleIdHandler: ((String?, ImageResourceIdentifier?, String?, String?) -> ())?
    func trackShowImageMediaviewer(articleId: String?, imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackShowImageMediaviewerArticleIdCallCount += 1
        if let trackShowImageMediaviewerArticleIdHandler = trackShowImageMediaviewerArticleIdHandler {
            trackShowImageMediaviewerArticleIdHandler(articleId, imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackCloseImageMediaviewerArticleIdCallCount = 0
    var trackCloseImageMediaviewerArticleIdHandler: ((String?, ImageResourceIdentifier?, String?, String?) -> ())?
    func trackCloseImageMediaviewer(articleId: String?, imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackCloseImageMediaviewerArticleIdCallCount += 1
        if let trackCloseImageMediaviewerArticleIdHandler = trackCloseImageMediaviewerArticleIdHandler {
            trackCloseImageMediaviewerArticleIdHandler(articleId, imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackShowVideoMediaviewerCallCount = 0
    var trackShowVideoMediaviewerHandler: ((URL) -> ())?
    func trackShowVideoMediaviewer(url: URL)  {
        trackShowVideoMediaviewerCallCount += 1
        if let trackShowVideoMediaviewerHandler = trackShowVideoMediaviewerHandler {
            trackShowVideoMediaviewerHandler(url)
        }
        
    }

    private(set) var trackShowVideoMediaviewerArticleIdCallCount = 0
    var trackShowVideoMediaviewerArticleIdHandler: ((String?, URL) -> ())?
    func trackShowVideoMediaviewer(articleId: String?, url: URL)  {
        trackShowVideoMediaviewerArticleIdCallCount += 1
        if let trackShowVideoMediaviewerArticleIdHandler = trackShowVideoMediaviewerArticleIdHandler {
            trackShowVideoMediaviewerArticleIdHandler(articleId, url)
        }
        
    }

    private(set) var trackNoAccessBuyLicenseCallCount = 0
    var trackNoAccessBuyLicenseHandler: (() -> ())?
    func trackNoAccessBuyLicense()  {
        trackNoAccessBuyLicenseCallCount += 1
        if let trackNoAccessBuyLicenseHandler = trackNoAccessBuyLicenseHandler {
            trackNoAccessBuyLicenseHandler()
        }
        
    }

    private(set) var trackOptionsMenuOpenedCallCount = 0
    var trackOptionsMenuOpenedHandler: (() -> ())?
    func trackOptionsMenuOpened()  {
        trackOptionsMenuOpenedCallCount += 1
        if let trackOptionsMenuOpenedHandler = trackOptionsMenuOpenedHandler {
            trackOptionsMenuOpenedHandler()
        }
        
    }

    private(set) var renewFindInPageSessionIDCallCount = 0
    var renewFindInPageSessionIDHandler: (() -> ())?
    func renewFindInPageSessionID()  {
        renewFindInPageSessionIDCallCount += 1
        if let renewFindInPageSessionIDHandler = renewFindInPageSessionIDHandler {
            renewFindInPageSessionIDHandler()
        }
        
    }
}

public class UserDataClientMock: UserDataClient {
    public init() { }


    public private(set) var getCurrentUserDataCallCount = 0
    public var getCurrentUserDataHandler: ((URLRequest.CachePolicy, @escaping Completion<UserData, NetworkError<EmptyAPIError>>) -> ())?
    public func getCurrentUserData(cachePolicy: URLRequest.CachePolicy, completion: @escaping Completion<UserData, NetworkError<EmptyAPIError>>)  {
        getCurrentUserDataCallCount += 1
        if let getCurrentUserDataHandler = getCurrentUserDataHandler {
            getCurrentUserDataHandler(cachePolicy, completion)
        }
        
    }

    public private(set) var setUserStageCallCount = 0
    public var setUserStageHandler: ((UserStage, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    public func setUserStage(_ userStage: UserStage, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        setUserStageCallCount += 1
        if let setUserStageHandler = setUserStageHandler {
            setUserStageHandler(userStage, completion)
        }
        
    }

    public private(set) var setStudyObjectiveCallCount = 0
    public var setStudyObjectiveHandler: ((StudyObjective, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    public func setStudyObjective(_ studyObjective: StudyObjective, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        setStudyObjectiveCallCount += 1
        if let setStudyObjectiveHandler = setStudyObjectiveHandler {
            setStudyObjectiveHandler(studyObjective, completion)
        }
        
    }

    public private(set) var setHealthcareProfessionCallCount = 0
    public var setHealthcareProfessionHandler: ((Bool, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    public func setHealthcareProfession(isConfirmed: Bool, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        setHealthcareProfessionCallCount += 1
        if let setHealthcareProfessionHandler = setHealthcareProfessionHandler {
            setHealthcareProfessionHandler(isConfirmed, completion)
        }
        
    }

    public private(set) var getUserHealthCareProfessionStatusCallCount = 0
    public var getUserHealthCareProfessionStatusHandler: ((@escaping Completion<Bool, NetworkError<EmptyAPIError>>) -> ())?
    public func getUserHealthCareProfessionStatus(_ completion: @escaping Completion<Bool, NetworkError<EmptyAPIError>>)  {
        getUserHealthCareProfessionStatusCallCount += 1
        if let getUserHealthCareProfessionStatusHandler = getUserHealthCareProfessionStatusHandler {
            getUserHealthCareProfessionStatusHandler(completion)
        }
        
    }

    public private(set) var getAvailableStudyObjectivesCallCount = 0
    public var getAvailableStudyObjectivesHandler: ((@escaping Completion<[StudyObjective], NetworkError<EmptyAPIError>>) -> ())?
    public func getAvailableStudyObjectives(completion: @escaping Completion<[StudyObjective], NetworkError<EmptyAPIError>>)  {
        getAvailableStudyObjectivesCallCount += 1
        if let getAvailableStudyObjectivesHandler = getAvailableStudyObjectivesHandler {
            getAvailableStudyObjectivesHandler(completion)
        }
        
    }

    public private(set) var getTermsAndConditionsCallCount = 0
    public var getTermsAndConditionsHandler: ((@escaping Completion<Terms?, NetworkError<EmptyAPIError>>) -> ())?
    public func getTermsAndConditions(completion: @escaping Completion<Terms?, NetworkError<EmptyAPIError>>)  {
        getTermsAndConditionsCallCount += 1
        if let getTermsAndConditionsHandler = getTermsAndConditionsHandler {
            getTermsAndConditionsHandler(completion)
        }
        
    }

    public private(set) var acceptTermsAndConditionsCallCount = 0
    public var acceptTermsAndConditionsHandler: ((TermsIdentifier, @escaping Completion<Void, NetworkError<EmptyAPIError>>) -> ())?
    public func acceptTermsAndConditions(id: TermsIdentifier, completion: @escaping Completion<Void, NetworkError<EmptyAPIError>>)  {
        acceptTermsAndConditionsCallCount += 1
        if let acceptTermsAndConditionsHandler = acceptTermsAndConditionsHandler {
            acceptTermsAndConditionsHandler(id, completion)
        }
        
    }
}

class DrugListPresenterTypeMock: DrugListPresenterType {
    init() { }
    init(view: DrugListViewType? = nil, delegate: DrugListDelegate? = nil) {
        self.view = view
        self.delegate = delegate
    }


    private(set) var viewSetCallCount = 0
    var view: DrugListViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: DrugListDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var searchTriggeredCallCount = 0
    var searchTriggeredHandler: ((String, ApplicationForm) -> ())?
    func searchTriggered(with query: String, applicationForm: ApplicationForm)  {
        searchTriggeredCallCount += 1
        if let searchTriggeredHandler = searchTriggeredHandler {
            searchTriggeredHandler(query, applicationForm)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((DrugIdentifier, String) -> ())?
    func navigate(to drug: DrugIdentifier, title: String)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(drug, title)
        }
        
    }
}

class InArticleSearchViewTypeMock: InArticleSearchViewType {
    init() { }
    init(searchText: String? = nil) {
        self.searchText = searchText
    }


    private(set) var searchTextSetCallCount = 0
    var searchText: String? = nil { didSet { searchTextSetCallCount += 1 } }

    private(set) var startSearchCallCount = 0
    var startSearchHandler: ((String, @escaping (Result<InArticleSearchResponse?, BridgeError>) -> Void) -> ())?
    func startSearch(for query: String, completion: @escaping (Result<InArticleSearchResponse?, BridgeError>) -> Void)  {
        startSearchCallCount += 1
        if let startSearchHandler = startSearchHandler {
            startSearchHandler(query, completion)
        }
        
    }

    private(set) var goToQueryResultItemCallCount = 0
    var goToQueryResultItemHandler: ((InArticleResultIndentifier) -> ())?
    func goToQueryResultItem(withId queryResultId: InArticleResultIndentifier)  {
        goToQueryResultItemCallCount += 1
        if let goToQueryResultItemHandler = goToQueryResultItemHandler {
            goToQueryResultItemHandler(queryResultId)
        }
        
    }

    private(set) var stopSearchCallCount = 0
    var stopSearchHandler: ((InArticleSearchResponseIdentifier?) -> ())?
    func stopSearch(with id: InArticleSearchResponseIdentifier?)  {
        stopSearchCallCount += 1
        if let stopSearchHandler = stopSearchHandler {
            stopSearchHandler(id)
        }
        
    }

    private(set) var setSearchLabelTextCallCount = 0
    var setSearchLabelTextHandler: ((String) -> ())?
    func setSearchLabelText(_ text: String)  {
        setSearchLabelTextCallCount += 1
        if let setSearchLabelTextHandler = setSearchLabelTextHandler {
            setSearchLabelTextHandler(text)
        }
        
    }
}

public class KnowledgeClientMock: KnowledgeClient {
    public init() { }


    public private(set) var getDeprecationListCallCount = 0
    public var getDeprecationListHandler: ((@escaping Completion<[DeprecationItem], NetworkError<EmptyAPIError>>) -> ())?
    public func getDeprecationList(_ completion: @escaping Completion<[DeprecationItem], NetworkError<EmptyAPIError>>)  {
        getDeprecationListCallCount += 1
        if let getDeprecationListHandler = getDeprecationListHandler {
            getDeprecationListHandler(completion)
        }
        
    }
}

class AccessRepositoryTypeMock: AccessRepositoryType {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: (([TargetAccess]) -> ())?
    func set(accesses: [TargetAccess])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(accesses)
        }
        
    }

    private(set) var getAccessCallCount = 0
    var getAccessHandler: ((AccessTarget, @escaping (Result<Void, AccessError>) -> Void) -> ())?
    func getAccess(for target: AccessTarget, completion: @escaping (Result<Void, AccessError>) -> Void)  {
        getAccessCallCount += 1
        if let getAccessHandler = getAccessHandler {
            getAccessHandler(target, completion)
        }
        
    }

    private(set) var getAccessForCallCount = 0
    var getAccessForHandler: ((LearningCardMetaItem, @escaping (Result<Void, AccessError>) -> Void) -> ())?
    func getAccess(for learningCard: LearningCardMetaItem, completion: @escaping (Result<Void, AccessError>) -> Void)  {
        getAccessForCallCount += 1
        if let getAccessForHandler = getAccessForHandler {
            getAccessForHandler(learningCard, completion)
        }
        
    }

    private(set) var getAccessForCompletionCallCount = 0
    var getAccessForCompletionHandler: ((ExternalAddition, @escaping (Result<Void, AccessError>) -> Void) -> ())?
    func getAccess(for externalAddition: ExternalAddition, completion: @escaping (Result<Void, AccessError>) -> Void)  {
        getAccessForCompletionCallCount += 1
        if let getAccessForCompletionHandler = getAccessForCompletionHandler {
            getAccessForCompletionHandler(externalAddition, completion)
        }
        
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class DeviceSettingsRepositoryTypeMock: DeviceSettingsRepositoryType {
    init() { }
    init(keepScreenOn: Bool = false, currentFontScale: Float = 0.0, currentUserInterfaceStyle: UIUserInterfaceStyle) {
        self.keepScreenOn = keepScreenOn
        self.currentFontScale = currentFontScale
        self._currentUserInterfaceStyle = currentUserInterfaceStyle
    }


    private(set) var keepScreenOnSetCallCount = 0
    var keepScreenOn: Bool = false { didSet { keepScreenOnSetCallCount += 1 } }

    private(set) var currentFontScaleSetCallCount = 0
    var currentFontScale: Float = 0.0 { didSet { currentFontScaleSetCallCount += 1 } }

    private(set) var currentUserInterfaceStyleSetCallCount = 0
    private var _currentUserInterfaceStyle: UIUserInterfaceStyle!  { didSet { currentUserInterfaceStyleSetCallCount += 1 } }
    var currentUserInterfaceStyle: UIUserInterfaceStyle {
        get { return _currentUserInterfaceStyle }
        set { _currentUserInterfaceStyle = newValue }
    }
}

class PharmaRepositoryTypeMock: PharmaRepositoryType {
    init() { }
    init(pharmaResultWasDisplayedCount: Int = 0, pharmaDialogWasDisplayedDate: Date = Date(), shouldShowPharmaOfflineDialog: Bool = false) {
        self.pharmaResultWasDisplayedCount = pharmaResultWasDisplayedCount
        self.pharmaDialogWasDisplayedDate = pharmaDialogWasDisplayedDate
        self.shouldShowPharmaOfflineDialog = shouldShowPharmaOfflineDialog
    }


    private(set) var pharmaResultWasDisplayedCountSetCallCount = 0
    var pharmaResultWasDisplayedCount: Int = 0 { didSet { pharmaResultWasDisplayedCountSetCallCount += 1 } }

    private(set) var pharmaDialogWasDisplayedDateSetCallCount = 0
    var pharmaDialogWasDisplayedDate: Date = Date() { didSet { pharmaDialogWasDisplayedDateSetCallCount += 1 } }

    private(set) var shouldShowPharmaOfflineDialogSetCallCount = 0
    var shouldShowPharmaOfflineDialog: Bool = false { didSet { shouldShowPharmaOfflineDialogSetCallCount += 1 } }

    private(set) var pharmaCardCallCount = 0
    var pharmaCardHandler: ((SubstanceIdentifier, DrugIdentifier?, PackageSizeSortingOrder, URLRequest.CachePolicy, @escaping (Result<(PharmaCard, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func pharmaCard(for substanceIdentifier: SubstanceIdentifier, drugIdentifier: DrugIdentifier?, sorting: PackageSizeSortingOrder, cachePolicy: URLRequest.CachePolicy, completion: @escaping (Result<(PharmaCard, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void)  {
        pharmaCardCallCount += 1
        if let pharmaCardHandler = pharmaCardHandler {
            pharmaCardHandler(substanceIdentifier, drugIdentifier, sorting, cachePolicy, completion)
        }
        
    }

    private(set) var substanceCallCount = 0
    var substanceHandler: ((SubstanceIdentifier, URLRequest.CachePolicy, @escaping (Result<(Substance, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func substance(for substanceIdentifier: SubstanceIdentifier, cachePolicy: URLRequest.CachePolicy, completion: @escaping (Result<(Substance, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void)  {
        substanceCallCount += 1
        if let substanceHandler = substanceHandler {
            substanceHandler(substanceIdentifier, cachePolicy, completion)
        }
        
    }

    private(set) var drugCallCount = 0
    var drugHandler: ((DrugIdentifier, PackageSizeSortingOrder, @escaping (Result<(Drug, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func drug(for drugIdentifier: DrugIdentifier, sorting: PackageSizeSortingOrder, completion: @escaping (Result<(Drug, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void)  {
        drugCallCount += 1
        if let drugHandler = drugHandler {
            drugHandler(drugIdentifier, sorting, completion)
        }
        
    }

    private(set) var selectPharmaSearchResultCallCount = 0
    var selectPharmaSearchResultHandler: (() -> ())?
    func selectPharmaSearchResult()  {
        selectPharmaSearchResultCallCount += 1
        if let selectPharmaSearchResultHandler = selectPharmaSearchResultHandler {
            selectPharmaSearchResultHandler()
        }
        
    }

    private(set) var dosageCallCount = 0
    var dosageHandler: ((DosageIdentifier, @escaping (Result<(Dosage, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func dosage(for dosageIdentifier: DosageIdentifier, completion: @escaping (Result<(Dosage, Metrics.Source), NetworkError<EmptyAPIError>>) -> Void)  {
        dosageCallCount += 1
        if let dosageHandler = dosageHandler {
            dosageHandler(dosageIdentifier, completion)
        }
        
    }
}

class StudyObjectiveRepositoryTypeMock: StudyObjectiveRepositoryType {
    init() { }


    private(set) var getStudyObjectivesCallCount = 0
    var getStudyObjectivesHandler: ((@escaping(Result< [StudyObjective], NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func getStudyObjectives(completion: @escaping(Result< [StudyObjective], NetworkError<EmptyAPIError>>) -> Void)  {
        getStudyObjectivesCallCount += 1
        if let getStudyObjectivesHandler = getStudyObjectivesHandler {
            getStudyObjectivesHandler(completion)
        }
        
    }

    private(set) var setStudyObjectiveCallCount = 0
    var setStudyObjectiveHandler: ((StudyObjective, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func setStudyObjective(_ studyObjective: StudyObjective, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        setStudyObjectiveCallCount += 1
        if let setStudyObjectiveHandler = setStudyObjectiveHandler {
            setStudyObjectiveHandler(studyObjective, completion)
        }
        
    }

    private(set) var getStudyObjectiveCallCount = 0
    var getStudyObjectiveHandler: ((@escaping (Result<StudyObjective?, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func getStudyObjective(completion: @escaping (Result<StudyObjective?, NetworkError<EmptyAPIError>>) -> Void)  {
        getStudyObjectiveCallCount += 1
        if let getStudyObjectiveHandler = getStudyObjectiveHandler {
            getStudyObjectiveHandler(completion)
        }
        
    }
}

class LibraryRepositoryTypeMock: LibraryRepositoryType {
    init() { }
    init(library: LibraryType = LibraryTypeMock(), learningCardStack: PointableStack<LearningCardDeeplink>) {
        self.library = library
        self._learningCardStack = learningCardStack
    }


    private(set) var librarySetCallCount = 0
    var library: LibraryType = LibraryTypeMock() { didSet { librarySetCallCount += 1 } }

    private(set) var learningCardStackSetCallCount = 0
    private var _learningCardStack: PointableStack<LearningCardDeeplink>!  { didSet { learningCardStackSetCallCount += 1 } }
    var learningCardStack: PointableStack<LearningCardDeeplink> {
        get { return _learningCardStack }
        set { _learningCardStack = newValue }
    }

    private(set) var itemsForParentCallCount = 0
    var itemsForParentHandler: ((LearningCardTreeItem?) -> ([LearningCardTreeItem]))?
    func itemsForParent(_ parent: LearningCardTreeItem?) -> [LearningCardTreeItem] {
        itemsForParentCallCount += 1
        if let itemsForParentHandler = itemsForParentHandler {
            return itemsForParentHandler(parent)
        }
        return [LearningCardTreeItem]()
    }

    private(set) var itemForLearningCardIdentifierCallCount = 0
    var itemForLearningCardIdentifierHandler: ((LearningCardIdentifier) -> (LearningCardTreeItem?))?
    func itemForLearningCardIdentifier(_ learningCardIdentifiers: LearningCardIdentifier) -> LearningCardTreeItem? {
        itemForLearningCardIdentifierCallCount += 1
        if let itemForLearningCardIdentifierHandler = itemForLearningCardIdentifierHandler {
            return itemForLearningCardIdentifierHandler(learningCardIdentifiers)
        }
        return nil
    }
}

class LearningCardViewTypeMock: LearningCardViewType {
    init() { }
    init(canNavigateToPrevious: Bool = false, canNavigateToNext: Bool = false, canOpenAllSections: Bool = false, isFavorite: Bool = false) {
        self.canNavigateToPrevious = canNavigateToPrevious
        self.canNavigateToNext = canNavigateToNext
        self.canOpenAllSections = canOpenAllSections
        self.isFavorite = isFavorite
    }


    private(set) var canNavigateToPreviousSetCallCount = 0
    var canNavigateToPrevious: Bool = false { didSet { canNavigateToPreviousSetCallCount += 1 } }

    private(set) var canNavigateToNextSetCallCount = 0
    var canNavigateToNext: Bool = false { didSet { canNavigateToNextSetCallCount += 1 } }

    private(set) var canOpenAllSectionsSetCallCount = 0
    var canOpenAllSections: Bool = false { didSet { canOpenAllSectionsSetCallCount += 1 } }

    private(set) var isFavoriteSetCallCount = 0
    var isFavorite: Bool = false { didSet { isFavoriteSetCallCount += 1 } }

    private(set) var setTitleCallCount = 0
    var setTitleHandler: ((String) -> ())?
    func setTitle(_ title: String)  {
        setTitleCallCount += 1
        if let setTitleHandler = setTitleHandler {
            setTitleHandler(title)
        }
        
    }

    private(set) var loadCallCount = 0
    var loadHandler: ((LearningCardIdentifier, @escaping () -> Void) -> ())?
    func load(learningCard: LearningCardIdentifier, onSuccess: @escaping () -> Void)  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(learningCard, onSuccess)
        }
        
    }

    private(set) var canGoToCallCount = 0
    var canGoToHandler: ((LearningCardAnchorIdentifier) -> (Bool))?
    func canGoTo(anchor: LearningCardAnchorIdentifier) -> Bool {
        canGoToCallCount += 1
        if let canGoToHandler = canGoToHandler {
            return canGoToHandler(anchor)
        }
        return false
    }

    private(set) var goCallCount = 0
    var goHandler: ((LearningCardAnchorIdentifier, QBankQuestionIdentifier?) -> ())?
    func go(to anchor: LearningCardAnchorIdentifier, question: QBankQuestionIdentifier?)  {
        goCallCount += 1
        if let goHandler = goHandler {
            goHandler(anchor, question)
        }
        
    }

    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var presentLearningCardErrorCallCount = 0
    var presentLearningCardErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentLearningCardError(_ error: PresentableMessageType, _ actions: [MessageAction])  {
        presentLearningCardErrorCallCount += 1
        if let presentLearningCardErrorHandler = presentLearningCardErrorHandler {
            presentLearningCardErrorHandler(error, actions)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentMessage(_ message: PresentableMessageType, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message, actions)
        }
        
    }

    private(set) var closeAllSectionsCallCount = 0
    var closeAllSectionsHandler: (() -> ())?
    func closeAllSections()  {
        closeAllSectionsCallCount += 1
        if let closeAllSectionsHandler = closeAllSectionsHandler {
            closeAllSectionsHandler()
        }
        
    }

    private(set) var openAllSectionsCallCount = 0
    var openAllSectionsHandler: (() -> ())?
    func openAllSections()  {
        openAllSectionsCallCount += 1
        if let openAllSectionsHandler = openAllSectionsHandler {
            openAllSectionsHandler()
        }
        
    }

    private(set) var changeHighlightingModeCallCount = 0
    var changeHighlightingModeHandler: ((Bool) -> ())?
    func changeHighlightingMode(_ isOn: Bool)  {
        changeHighlightingModeCallCount += 1
        if let changeHighlightingModeHandler = changeHighlightingModeHandler {
            changeHighlightingModeHandler(isOn)
        }
        
    }

    private(set) var changeHighYieldModeCallCount = 0
    var changeHighYieldModeHandler: ((Bool) -> ())?
    func changeHighYieldMode(_ isOn: Bool)  {
        changeHighYieldModeCallCount += 1
        if let changeHighYieldModeHandler = changeHighYieldModeHandler {
            changeHighYieldModeHandler(isOn)
        }
        
    }

    private(set) var changePhysikumFokusModeCallCount = 0
    var changePhysikumFokusModeHandler: ((Bool) -> ())?
    func changePhysikumFokusMode(_ isOn: Bool)  {
        changePhysikumFokusModeCallCount += 1
        if let changePhysikumFokusModeHandler = changePhysikumFokusModeHandler {
            changePhysikumFokusModeHandler(isOn)
        }
        
    }

    private(set) var changeLearningRadarModeCallCount = 0
    var changeLearningRadarModeHandler: ((Bool) -> ())?
    func changeLearningRadarMode(_ isOn: Bool)  {
        changeLearningRadarModeCallCount += 1
        if let changeLearningRadarModeHandler = changeLearningRadarModeHandler {
            changeLearningRadarModeHandler(isOn)
        }
        
    }

    private(set) var setFontSizeCallCount = 0
    var setFontSizeHandler: ((Float) -> ())?
    func setFontSize(size: Float)  {
        setFontSizeCallCount += 1
        if let setFontSizeHandler = setFontSizeHandler {
            setFontSizeHandler(size)
        }
        
    }

    private(set) var hideTrademarksCallCount = 0
    var hideTrademarksHandler: (() -> ())?
    func hideTrademarks()  {
        hideTrademarksCallCount += 1
        if let hideTrademarksHandler = hideTrademarksHandler {
            hideTrademarksHandler()
        }
        
    }

    private(set) var revealTrademarksCallCount = 0
    var revealTrademarksHandler: (() -> ())?
    func revealTrademarks()  {
        revealTrademarksCallCount += 1
        if let revealTrademarksHandler = revealTrademarksHandler {
            revealTrademarksHandler()
        }
        
    }

    private(set) var revealDosagesCallCount = 0
    var revealDosagesHandler: (() -> ())?
    func revealDosages()  {
        revealDosagesCallCount += 1
        if let revealDosagesHandler = revealDosagesHandler {
            revealDosagesHandler()
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((String, String) -> ())?
    func showError(title: String, message: String)  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(title, message)
        }
        
    }

    private(set) var activateStudyObjectiveCallCount = 0
    var activateStudyObjectiveHandler: ((String) -> ())?
    func activateStudyObjective(_ studyObjective: String)  {
        activateStudyObjectiveCallCount += 1
        if let activateStudyObjectiveHandler = activateStudyObjectiveHandler {
            activateStudyObjectiveHandler(studyObjective)
        }
        
    }

    private(set) var setPhysicianModeIsOnCallCount = 0
    var setPhysicianModeIsOnHandler: ((Bool) -> ())?
    func setPhysicianModeIsOn(_ isOn: Bool)  {
        setPhysicianModeIsOnCallCount += 1
        if let setPhysicianModeIsOnHandler = setPhysicianModeIsOnHandler {
            setPhysicianModeIsOnHandler(isOn)
        }
        
    }

    private(set) var setExtensionsCallCount = 0
    var setExtensionsHandler: (([Extension]) -> ())?
    func setExtensions(_ extensions: [Extension])  {
        setExtensionsCallCount += 1
        if let setExtensionsHandler = setExtensionsHandler {
            setExtensionsHandler(extensions)
        }
        
    }

    private(set) var setSharedExtensionsCallCount = 0
    var setSharedExtensionsHandler: (([SharedExtension]) -> ())?
    func setSharedExtensions(_ sharedExtensions: [SharedExtension])  {
        setSharedExtensionsCallCount += 1
        if let setSharedExtensionsHandler = setSharedExtensionsHandler {
            setSharedExtensionsHandler(sharedExtensions)
        }
        
    }

    private(set) var getLearningCardModesCallCount = 0
    var getLearningCardModesHandler: ((@escaping (Result<[String], BridgeError>) -> Void) -> ())?
    func getLearningCardModes(completion: @escaping (Result<[String], BridgeError>) -> Void)  {
        getLearningCardModesCallCount += 1
        if let getLearningCardModesHandler = getLearningCardModesHandler {
            getLearningCardModesHandler(completion)
        }
        
    }

    private(set) var showInArticleSearchViewCallCount = 0
    var showInArticleSearchViewHandler: (() -> ())?
    func showInArticleSearchView()  {
        showInArticleSearchViewCallCount += 1
        if let showInArticleSearchViewHandler = showInArticleSearchViewHandler {
            showInArticleSearchViewHandler()
        }
        
    }

    private(set) var setWrongAnsweredQuestionsCallCount = 0
    var setWrongAnsweredQuestionsHandler: (([QBankQuestionIdentifier]) -> ())?
    func setWrongAnsweredQuestions(questionIDs: [QBankQuestionIdentifier])  {
        setWrongAnsweredQuestionsCallCount += 1
        if let setWrongAnsweredQuestionsHandler = setWrongAnsweredQuestionsHandler {
            setWrongAnsweredQuestionsHandler(questionIDs)
        }
        
    }

    private(set) var showDisclaimerDialogCallCount = 0
    var showDisclaimerDialogHandler: ((@escaping (Bool) -> Void) -> ())?
    func showDisclaimerDialog(completion: @escaping (Bool) -> Void)  {
        showDisclaimerDialogCallCount += 1
        if let showDisclaimerDialogHandler = showDisclaimerDialogHandler {
            showDisclaimerDialogHandler(completion)
        }
        
    }
}

class UserDataRepositoryTypeMock: UserDataRepositoryType {
    init() { }
    init(userStage: UserStage? = nil, studyObjective: StudyObjective? = nil, hasConfirmedHealthCareProfession: Bool? = nil, shouldUpdateTerms: Bool = false) {
        self.userStage = userStage
        self.studyObjective = studyObjective
        self.hasConfirmedHealthCareProfession = hasConfirmedHealthCareProfession
        self.shouldUpdateTerms = shouldUpdateTerms
    }


    private(set) var userStageSetCallCount = 0
    var userStage: UserStage? = nil { didSet { userStageSetCallCount += 1 } }

    private(set) var studyObjectiveSetCallCount = 0
    var studyObjective: StudyObjective? = nil { didSet { studyObjectiveSetCallCount += 1 } }

    private(set) var hasConfirmedHealthCareProfessionSetCallCount = 0
    var hasConfirmedHealthCareProfession: Bool? = nil { didSet { hasConfirmedHealthCareProfessionSetCallCount += 1 } }

    private(set) var shouldUpdateTermsSetCallCount = 0
    var shouldUpdateTerms: Bool = false { didSet { shouldUpdateTermsSetCallCount += 1 } }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

class AppReviewRepositoryTypeMock: AppReviewRepositoryType {
    init() { }


    private(set) var shouldDisplayAppReviewPromptCallCount = 0
    var shouldDisplayAppReviewPromptHandler: (() -> (Bool))?
    func shouldDisplayAppReviewPrompt() -> Bool {
        shouldDisplayAppReviewPromptCallCount += 1
        if let shouldDisplayAppReviewPromptHandler = shouldDisplayAppReviewPromptHandler {
            return shouldDisplayAppReviewPromptHandler()
        }
        return false
    }

    private(set) var appReviewPromptWasDisplayedCallCount = 0
    var appReviewPromptWasDisplayedHandler: (() -> ())?
    func appReviewPromptWasDisplayed()  {
        appReviewPromptWasDisplayedCallCount += 1
        if let appReviewPromptWasDisplayedHandler = appReviewPromptWasDisplayedHandler {
            appReviewPromptWasDisplayedHandler()
        }
        
    }
}

class RemoteConfigRepositoryTypeMock: RemoteConfigRepositoryType {
    init() { }
    init(requestTimeout: TimeInterval = 0.0, searchAdConfig: SearchAdConfig, areMonographsEnabled: Bool = false, pharmaDosageTooltipV1Enabled: Bool = false, pharmaDosageNGDENavigationEnabled: Bool = false, brazeEnabled: Bool = false, contentCardsEnabled: Bool = false, iap5DayTrialRemoved: Bool = false, medicationLinkReplacements: [(snippet: SnippetIdentifier, monograph: MonographIdentifier)]? = nil, termsReAcceptanceEnabled: Bool = false, dashboardCMELinkEnabled: Bool = false) {
        self.requestTimeout = requestTimeout
        self._searchAdConfig = searchAdConfig
        self.areMonographsEnabled = areMonographsEnabled
        self.pharmaDosageTooltipV1Enabled = pharmaDosageTooltipV1Enabled
        self.pharmaDosageNGDENavigationEnabled = pharmaDosageNGDENavigationEnabled
        self.brazeEnabled = brazeEnabled
        self.contentCardsEnabled = contentCardsEnabled
        self.iap5DayTrialRemoved = iap5DayTrialRemoved
        self.medicationLinkReplacements = medicationLinkReplacements
        self.termsReAcceptanceEnabled = termsReAcceptanceEnabled
        self.dashboardCMELinkEnabled = dashboardCMELinkEnabled
    }


    private(set) var requestTimeoutSetCallCount = 0
    var requestTimeout: TimeInterval = 0.0 { didSet { requestTimeoutSetCallCount += 1 } }

    private(set) var searchAdConfigSetCallCount = 0
    private var _searchAdConfig: SearchAdConfig!  { didSet { searchAdConfigSetCallCount += 1 } }
    var searchAdConfig: SearchAdConfig {
        get { return _searchAdConfig }
        set { _searchAdConfig = newValue }
    }

    private(set) var areMonographsEnabledSetCallCount = 0
    var areMonographsEnabled: Bool = false { didSet { areMonographsEnabledSetCallCount += 1 } }

    private(set) var pharmaDosageTooltipV1EnabledSetCallCount = 0
    var pharmaDosageTooltipV1Enabled: Bool = false { didSet { pharmaDosageTooltipV1EnabledSetCallCount += 1 } }

    private(set) var pharmaDosageNGDENavigationEnabledSetCallCount = 0
    var pharmaDosageNGDENavigationEnabled: Bool = false { didSet { pharmaDosageNGDENavigationEnabledSetCallCount += 1 } }

    private(set) var brazeEnabledSetCallCount = 0
    var brazeEnabled: Bool = false { didSet { brazeEnabledSetCallCount += 1 } }

    private(set) var contentCardsEnabledSetCallCount = 0
    var contentCardsEnabled: Bool = false { didSet { contentCardsEnabledSetCallCount += 1 } }

    private(set) var iap5DayTrialRemovedSetCallCount = 0
    var iap5DayTrialRemoved: Bool = false { didSet { iap5DayTrialRemovedSetCallCount += 1 } }

    private(set) var medicationLinkReplacementsSetCallCount = 0
    var medicationLinkReplacements: [(snippet: SnippetIdentifier, monograph: MonographIdentifier)]? = nil { didSet { medicationLinkReplacementsSetCallCount += 1 } }

    private(set) var termsReAcceptanceEnabledSetCallCount = 0
    var termsReAcceptanceEnabled: Bool = false { didSet { termsReAcceptanceEnabledSetCallCount += 1 } }

    private(set) var dashboardCMELinkEnabledSetCallCount = 0
    var dashboardCMELinkEnabled: Bool = false { didSet { dashboardCMELinkEnabledSetCallCount += 1 } }
}

class ExternalMediaCoordinatorTypeMock: ExternalMediaCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var openExternalAdditionCallCount = 0
    var openExternalAdditionHandler: ((ExternalAdditionIdentifier) -> ())?
    func openExternalAddition(with identifier: ExternalAdditionIdentifier)  {
        openExternalAdditionCallCount += 1
        if let openExternalAdditionHandler = openExternalAdditionHandler {
            openExternalAdditionHandler(identifier)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var openVideoWithoutCheckingForPermissionsCallCount = 0
    var openVideoWithoutCheckingForPermissionsHandler: ((URL) -> ())?
    func openVideoWithoutCheckingForPermissions(with url: URL)  {
        openVideoWithoutCheckingForPermissionsCallCount += 1
        if let openVideoWithoutCheckingForPermissionsHandler = openVideoWithoutCheckingForPermissionsHandler {
            openVideoWithoutCheckingForPermissionsHandler(url)
        }
        
    }

    private(set) var goToStoreCallCount = 0
    var goToStoreHandler: (() -> ())?
    func goToStore()  {
        goToStoreCallCount += 1
        if let goToStoreHandler = goToStoreHandler {
            goToStoreHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

public class AuthenticationClientMock: AuthenticationClient {
    public init() { }


    public private(set) var loginCallCount = 0
    public var loginHandler: ((String, String, String, @escaping Completion<Authorization, NetworkError<LoginAPIError>>) -> ())?
    public func login(username: String, password: String, deviceId: String, completion: @escaping Completion<Authorization, NetworkError<LoginAPIError>>)  {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            loginHandler(username, password, deviceId, completion)
        }
        
    }

    public private(set) var signupCallCount = 0
    public var signupHandler: ((String, String, UserStage, StudyObjective?, Bool, String, Bool, String, @escaping Completion<Void, NetworkError<SignupAPIError>>) -> ())?
    public func signup(email: String, password: String, stage: UserStage, studyObjective: StudyObjective?, isGeneralStudyObjectiveSelected: Bool, appCode: String, skipEmailVerification: Bool, deviceId: String, completion: @escaping Completion<Void, NetworkError<SignupAPIError>>)  {
        signupCallCount += 1
        if let signupHandler = signupHandler {
            signupHandler(email, password, stage, studyObjective, isGeneralStudyObjectiveSelected, appCode, skipEmailVerification, deviceId, completion)
        }
        
    }

    public private(set) var getRegistrationStudyObjectivesCallCount = 0
    public var getRegistrationStudyObjectivesHandler: ((@escaping Completion<[StudyObjective], NetworkError<EmptyAPIError>>) -> ())?
    public func getRegistrationStudyObjectives(completion: @escaping Completion<[StudyObjective], NetworkError<EmptyAPIError>>)  {
        getRegistrationStudyObjectivesCallCount += 1
        if let getRegistrationStudyObjectivesHandler = getRegistrationStudyObjectivesHandler {
            getRegistrationStudyObjectivesHandler(completion)
        }
        
    }

    public private(set) var logoutCallCount = 0
    public var logoutHandler: ((String, @escaping Completion<Void, NetworkError<LogoutAPIError>>) -> ())?
    public func logout(deviceId: String, completion: @escaping Completion<Void, NetworkError<LogoutAPIError>>)  {
        logoutCallCount += 1
        if let logoutHandler = logoutHandler {
            logoutHandler(deviceId, completion)
        }
        
    }

    public private(set) var issueOneTimeTokenCallCount = 0
    public var issueOneTimeTokenHandler: ((TimeInterval?, @escaping Completion<OneTimeToken, NetworkError<EmptyAPIError>>) -> ())?
    public func issueOneTimeToken(timeout: TimeInterval?, completion: @escaping Completion<OneTimeToken, NetworkError<EmptyAPIError>>)  {
        issueOneTimeTokenCallCount += 1
        if let issueOneTimeTokenHandler = issueOneTimeTokenHandler {
            issueOneTimeTokenHandler(timeout, completion)
        }
        
    }
}

class StartupDialogCoordinatorTypeMock: StartupDialogCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var showStoreCallCount = 0
    var showStoreHandler: ((@escaping () -> Void) -> ())?
    func showStore(completion: @escaping () -> Void)  {
        showStoreCallCount += 1
        if let showStoreHandler = showStoreHandler {
            showStoreHandler(completion)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

public class MembershipAccessClientMock: MembershipAccessClient {
    public init() { }


    public private(set) var getAmbossSubscriptionStateCallCount = 0
    public var getAmbossSubscriptionStateHandler: ((@escaping Completion<AmbossSubscriptionState, NetworkError<EmptyAPIError>>) -> ())?
    public func getAmbossSubscriptionState(_ completion: @escaping Completion<AmbossSubscriptionState, NetworkError<EmptyAPIError>>)  {
        getAmbossSubscriptionStateCallCount += 1
        if let getAmbossSubscriptionStateHandler = getAmbossSubscriptionStateHandler {
            getAmbossSubscriptionStateHandler(completion)
        }
        
    }

    public private(set) var getHasTrialAccessCallCount = 0
    public var getHasTrialAccessHandler: ((@escaping Completion<Bool, NetworkError<EmptyAPIError>>) -> ())?
    public func getHasTrialAccess(_ completion: @escaping Completion<Bool, NetworkError<EmptyAPIError>>)  {
        getHasTrialAccessCallCount += 1
        if let getHasTrialAccessHandler = getHasTrialAccessHandler {
            getHasTrialAccessHandler(completion)
        }
        
    }

    public private(set) var uploadInAppPurchaseSubscriptionReceiptCallCount = 0
    public var uploadInAppPurchaseSubscriptionReceiptHandler: ((Data, String, @escaping Completion<Void, NetworkError<InAppPurchaseError>>) -> ())?
    public func uploadInAppPurchaseSubscriptionReceipt(receiptData: Data, countryCode: String, completion: @escaping Completion<Void, NetworkError<InAppPurchaseError>>)  {
        uploadInAppPurchaseSubscriptionReceiptCallCount += 1
        if let uploadInAppPurchaseSubscriptionReceiptHandler = uploadInAppPurchaseSubscriptionReceiptHandler {
            uploadInAppPurchaseSubscriptionReceiptHandler(receiptData, countryCode, completion)
        }
        
    }

    public private(set) var applyAccessCodeCallCount = 0
    public var applyAccessCodeHandler: ((String, @escaping Completion<Void, NetworkError<ProductKeyError>>) -> ())?
    public func applyAccessCode(code: String, completion: @escaping Completion<Void, NetworkError<ProductKeyError>>)  {
        applyAccessCodeCallCount += 1
        if let applyAccessCodeHandler = applyAccessCodeHandler {
            applyAccessCodeHandler(code, completion)
        }
        
    }
}

class LearningCardPresenterTypeMock: LearningCardPresenterType {
    init() { }
    init(view: LearningCardViewType? = nil) {
        self.view = view
    }


    private(set) var webViewBridgeCallCount = 0
    var webViewBridgeHandler: ((WebViewBridge, WebViewBridge.Callback) -> ())?
    func webViewBridge(bridge: WebViewBridge, didReceiveCallback callback: WebViewBridge.Callback)  {
        webViewBridgeCallCount += 1
        if let webViewBridgeHandler = webViewBridgeHandler {
            webViewBridgeHandler(bridge, callback)
        }
        
    }

    private(set) var viewSetCallCount = 0
    var view: LearningCardViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var goCallCount = 0
    var goHandler: ((LearningCardDeeplink) -> ())?
    func go(to learningCardDeeplink: LearningCardDeeplink)  {
        goCallCount += 1
        if let goHandler = goHandler {
            goHandler(learningCardDeeplink)
        }
        
    }

    private(set) var goToPreviousLearningCardCallCount = 0
    var goToPreviousLearningCardHandler: (() -> ())?
    func goToPreviousLearningCard()  {
        goToPreviousLearningCardCallCount += 1
        if let goToPreviousLearningCardHandler = goToPreviousLearningCardHandler {
            goToPreviousLearningCardHandler()
        }
        
    }

    private(set) var goToNextLearningCardCallCount = 0
    var goToNextLearningCardHandler: (() -> ())?
    func goToNextLearningCard()  {
        goToNextLearningCardCallCount += 1
        if let goToNextLearningCardHandler = goToNextLearningCardHandler {
            goToNextLearningCardHandler()
        }
        
    }

    private(set) var closeLearningCardOverlayCallCount = 0
    var closeLearningCardOverlayHandler: (() -> ())?
    func closeLearningCardOverlay()  {
        closeLearningCardOverlayCallCount += 1
        if let closeLearningCardOverlayHandler = closeLearningCardOverlayHandler {
            closeLearningCardOverlayHandler()
        }
        
    }

    private(set) var closeAllSectionsCallCount = 0
    var closeAllSectionsHandler: (() -> ())?
    func closeAllSections()  {
        closeAllSectionsCallCount += 1
        if let closeAllSectionsHandler = closeAllSectionsHandler {
            closeAllSectionsHandler()
        }
        
    }

    private(set) var openAllSectionsCallCount = 0
    var openAllSectionsHandler: (() -> ())?
    func openAllSections()  {
        openAllSectionsCallCount += 1
        if let openAllSectionsHandler = openAllSectionsHandler {
            openAllSectionsHandler()
        }
        
    }

    private(set) var toggleIsFavoriteCallCount = 0
    var toggleIsFavoriteHandler: (() -> ())?
    func toggleIsFavorite()  {
        toggleIsFavoriteCallCount += 1
        if let toggleIsFavoriteHandler = toggleIsFavoriteHandler {
            toggleIsFavoriteHandler()
        }
        
    }

    private(set) var showInArticleSearchCallCount = 0
    var showInArticleSearchHandler: (() -> ())?
    func showInArticleSearch()  {
        showInArticleSearchCallCount += 1
        if let showInArticleSearchHandler = showInArticleSearchHandler {
            showInArticleSearchHandler()
        }
        
    }

    private(set) var showLearningCardOptionsCallCount = 0
    var showLearningCardOptionsHandler: (() -> ())?
    func showLearningCardOptions()  {
        showLearningCardOptionsCallCount += 1
        if let showLearningCardOptionsHandler = showLearningCardOptionsHandler {
            showLearningCardOptionsHandler()
        }
        
    }

    private(set) var openURLCallCount = 0
    var openURLHandler: ((URL) -> ())?
    func openURL(_ url: URL)  {
        openURLCallCount += 1
        if let openURLHandler = openURLHandler {
            openURLHandler(url)
        }
        
    }

    private(set) var showMiniMapCallCount = 0
    var showMiniMapHandler: (() -> ())?
    func showMiniMap()  {
        showMiniMapCallCount += 1
        if let showMiniMapHandler = showMiniMapHandler {
            showMiniMapHandler()
        }
        
    }

    private(set) var shareLearningCardCallCount = 0
    var shareLearningCardHandler: (() -> ())?
    func shareLearningCard()  {
        shareLearningCardCallCount += 1
        if let shareLearningCardHandler = shareLearningCardHandler {
            shareLearningCardHandler()
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((String, String) -> ())?
    func showError(title: String, message: String)  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(title, message)
        }
        
    }
}

class LibraryInstantiationCoordinatorTypeMock: LibraryInstantiationCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var finishInitializationCallCount = 0
    var finishInitializationHandler: ((LibraryRepositoryType) -> ())?
    func finishInitialization(repository: LibraryRepositoryType)  {
        finishInitializationCallCount += 1
        if let finishInitializationHandler = finishInitializationHandler {
            finishInitializationHandler(repository)
        }
        
    }

    private(set) var finishForceUpdateCallCount = 0
    var finishForceUpdateHandler: (() -> ())?
    func finishForceUpdate()  {
        finishForceUpdateCallCount += 1
        if let finishForceUpdateHandler = finishForceUpdateHandler {
            finishForceUpdateHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class UserStageRepositoryTypeMock: UserStageRepositoryType {
    init() { }


    private(set) var setUserStageCallCount = 0
    var setUserStageHandler: ((UserStage, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func setUserStage(_ userStage: UserStage, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        setUserStageCallCount += 1
        if let setUserStageHandler = setUserStageHandler {
            setUserStageHandler(userStage, completion)
        }
        
    }

    private(set) var getUserStageCallCount = 0
    var getUserStageHandler: ((@escaping (Result<UserStage?, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func getUserStage(completion: @escaping (Result<UserStage?, NetworkError<EmptyAPIError>>) -> Void)  {
        getUserStageCallCount += 1
        if let getUserStageHandler = getUserStageHandler {
            getUserStageHandler(completion)
        }
        
    }
}

class ContentListViewTypeMock: ContentListViewType {
    init() { }


    private(set) var setUpCallCount = 0
    var setUpHandler: ((String, String) -> ())?
    func setUp(title: String, placeholder: String)  {
        setUpCallCount += 1
        if let setUpHandler = setUpHandler {
            setUpHandler(title, placeholder)
        }
        
    }

    private(set) var setViewStateCallCount = 0
    var setViewStateHandler: ((ContentListViewState) -> ())?
    func setViewState(_ state: ContentListViewState)  {
        setViewStateCallCount += 1
        if let setViewStateHandler = setViewStateHandler {
            setViewStateHandler(state)
        }
        
    }

    private(set) var setOverlayCallCount = 0
    var setOverlayHandler: ((Bool) -> ())?
    func setOverlay(_ isOn: Bool)  {
        setOverlayCallCount += 1
        if let setOverlayHandler = setOverlayHandler {
            setOverlayHandler(isOn)
        }
        
    }
}

class TableDetailViewTypeMock: TableDetailViewType {
    init() { }


    private(set) var loadCallCount = 0
    var loadHandler: ((HtmlDocument) -> ())?
    func load(document: HtmlDocument)  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(document)
        }
        
    }

    private(set) var changeHighlightingModeCallCount = 0
    var changeHighlightingModeHandler: ((Bool) -> ())?
    func changeHighlightingMode(_ isOn: Bool)  {
        changeHighlightingModeCallCount += 1
        if let changeHighlightingModeHandler = changeHighlightingModeHandler {
            changeHighlightingModeHandler(isOn)
        }
        
    }

    private(set) var hideTrademarksCallCount = 0
    var hideTrademarksHandler: (() -> ())?
    func hideTrademarks()  {
        hideTrademarksCallCount += 1
        if let hideTrademarksHandler = hideTrademarksHandler {
            hideTrademarksHandler()
        }
        
    }

    private(set) var revealTrademarksCallCount = 0
    var revealTrademarksHandler: (() -> ())?
    func revealTrademarks()  {
        revealTrademarksCallCount += 1
        if let revealTrademarksHandler = revealTrademarksHandler {
            revealTrademarksHandler()
        }
        
    }

    private(set) var revealDosagesCallCount = 0
    var revealDosagesHandler: (() -> ())?
    func revealDosages()  {
        revealDosagesCallCount += 1
        if let revealDosagesHandler = revealDosagesHandler {
            revealDosagesHandler()
        }
        
    }

    private(set) var showDisclaimerDialogCallCount = 0
    var showDisclaimerDialogHandler: ((@escaping (Bool) -> Void) -> ())?
    func showDisclaimerDialog(completion: @escaping (Bool) -> Void)  {
        showDisclaimerDialogCallCount += 1
        if let showDisclaimerDialogHandler = showDisclaimerDialogHandler {
            showDisclaimerDialogHandler(completion)
        }
        
    }
}

class SharedExtensionRepositoryTypeMock: SharedExtensionRepositoryType {
    init() { }
    init(users: [User] = [User]()) {
        self.users = users
    }


    private(set) var usersSetCallCount = 0
    var users: [User] = [User]() { didSet { usersSetCallCount += 1 } }

    private(set) var addCallCount = 0
    var addHandler: ((Extension, User) -> ())?
    func add(ext: Extension, for user: User)  {
        addCallCount += 1
        if let addHandler = addHandler {
            addHandler(ext, user)
        }
        
    }

    private(set) var sharedExtensionsCallCount = 0
    var sharedExtensionsHandler: ((LearningCardIdentifier) -> ([SharedExtension]))?
    func sharedExtensions(for learningCard: LearningCardIdentifier) -> [SharedExtension] {
        sharedExtensionsCallCount += 1
        if let sharedExtensionsHandler = sharedExtensionsHandler {
            return sharedExtensionsHandler(learningCard)
        }
        return [SharedExtension]()
    }

    private(set) var userCallCount = 0
    var userHandler: ((UserIdentifier) -> (User?))?
    func user(with identifier: UserIdentifier) -> User? {
        userCallCount += 1
        if let userHandler = userHandler {
            return userHandler(identifier)
        }
        return nil
    }

    private(set) var setCallCount = 0
    var setHandler: (([User]) -> ())?
    func set(users: [User])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(users)
        }
        
    }

    private(set) var removeAllDataFromLocalStorageCallCount = 0
    var removeAllDataFromLocalStorageHandler: (() -> ())?
    func removeAllDataFromLocalStorage()  {
        removeAllDataFromLocalStorageCallCount += 1
        if let removeAllDataFromLocalStorageHandler = removeAllDataFromLocalStorageHandler {
            removeAllDataFromLocalStorageHandler()
        }
        
    }
}

public class LearningCardLibraryClientMock: LearningCardLibraryClient {
    public init() { }
    public init(downloadDelegate: DownloadDelegate? = nil) {
        self.downloadDelegate = downloadDelegate
    }


    public private(set) var downloadDelegateSetCallCount = 0
    public var downloadDelegate: DownloadDelegate? = nil { didSet { downloadDelegateSetCallCount += 1 } }

    public private(set) var downloadFileCallCount = 0
    public var downloadFileHandler: ((URL, Bool, Int64?) -> ())?
    public func downloadFile(at url: URL, isUserInitiated: Bool, countOfBytesClientExpectsToReceive: Int64?)  {
        downloadFileCallCount += 1
        if let downloadFileHandler = downloadFileHandler {
            downloadFileHandler(url, isUserInitiated, countOfBytesClientExpectsToReceive)
        }
        
    }

    public private(set) var checkForLibraryUpdateCallCount = 0
    public var checkForLibraryUpdateHandler: ((LibraryMetadata, @escaping Completion<LibraryUpdate?, NetworkError<EmptyAPIError>>) -> ())?
    public func checkForLibraryUpdate(currentLibrary: LibraryMetadata, completion: @escaping Completion<LibraryUpdate?, NetworkError<EmptyAPIError>>)  {
        checkForLibraryUpdateCallCount += 1
        if let checkForLibraryUpdateHandler = checkForLibraryUpdateHandler {
            checkForLibraryUpdateHandler(currentLibrary, completion)
        }
        
    }

    public private(set) var getLearningCardHtmlCallCount = 0
    public var getLearningCardHtmlHandler: ((Int, LearningCardIdentifier, @escaping Completion<String, NetworkError<LearningCardHtmlAPIError>>) -> ())?
    public func getLearningCardHtml(libraryVersion: Int, learningCard: LearningCardIdentifier, completion: @escaping Completion<String, NetworkError<LearningCardHtmlAPIError>>)  {
        getLearningCardHtmlCallCount += 1
        if let getLearningCardHtmlHandler = getLearningCardHtmlHandler {
            getLearningCardHtmlHandler(libraryVersion, learningCard, completion)
        }
        
    }

    public private(set) var submitFeedbackCallCount = 0
    public var submitFeedbackHandler: ((SectionFeedback, @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    public func submitFeedback(_ feedback: SectionFeedback, completion: @escaping (Result<Void, NetworkError<EmptyAPIError>>) -> Void)  {
        submitFeedbackCallCount += 1
        if let submitFeedbackHandler = submitFeedbackHandler {
            submitFeedbackHandler(feedback, completion)
        }
        
    }

    public private(set) var getTaggingsCallCount = 0
    public var getTaggingsHandler: ((PaginationCursor?, @escaping Completion<Page<Tagging>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getTaggings(after: PaginationCursor?, completion: @escaping Completion<Page<Tagging>?, NetworkError<EmptyAPIError>>)  {
        getTaggingsCallCount += 1
        if let getTaggingsHandler = getTaggingsHandler {
            getTaggingsHandler(after, completion)
        }
        
    }

    public private(set) var uploadTaggingsCallCount = 0
    public var uploadTaggingsHandler: (([Tagging], @escaping Completion<Void, NetworkError<EmptyAPIError>>) -> ())?
    public func uploadTaggings(_ taggings: [Tagging], completion: @escaping Completion<Void, NetworkError<EmptyAPIError>>)  {
        uploadTaggingsCallCount += 1
        if let uploadTaggingsHandler = uploadTaggingsHandler {
            uploadTaggingsHandler(taggings, completion)
        }
        
    }

    public private(set) var getCurrentUserExtensionsCallCount = 0
    public var getCurrentUserExtensionsHandler: ((PaginationCursor?, @escaping Completion<Page<Extension>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getCurrentUserExtensions(after: PaginationCursor?, completion: @escaping Completion<Page<Extension>?, NetworkError<EmptyAPIError>>)  {
        getCurrentUserExtensionsCallCount += 1
        if let getCurrentUserExtensionsHandler = getCurrentUserExtensionsHandler {
            getCurrentUserExtensionsHandler(after, completion)
        }
        
    }

    public private(set) var updateExtensionCallCount = 0
    public var updateExtensionHandler: ((LearningCardSectionIdentifier, String, @escaping Completion<Void, NetworkError<EmptyAPIError>>) -> ())?
    public func updateExtension(section: LearningCardSectionIdentifier, text: String, completion: @escaping Completion<Void, NetworkError<EmptyAPIError>>)  {
        updateExtensionCallCount += 1
        if let updateExtensionHandler = updateExtensionHandler {
            updateExtensionHandler(section, text, completion)
        }
        
    }

    public private(set) var getUsersWhoShareExtensionsWithCurrentUserCallCount = 0
    public var getUsersWhoShareExtensionsWithCurrentUserHandler: ((@escaping Completion<[User], NetworkError<EmptyAPIError>>) -> ())?
    public func getUsersWhoShareExtensionsWithCurrentUser(completion: @escaping Completion<[User], NetworkError<EmptyAPIError>>)  {
        getUsersWhoShareExtensionsWithCurrentUserCallCount += 1
        if let getUsersWhoShareExtensionsWithCurrentUserHandler = getUsersWhoShareExtensionsWithCurrentUserHandler {
            getUsersWhoShareExtensionsWithCurrentUserHandler(completion)
        }
        
    }

    public private(set) var getExtensionsCallCount = 0
    public var getExtensionsHandler: ((UserIdentifier, PaginationCursor?, @escaping Completion<Page<Extension>?, NetworkError<EmptyAPIError>>) -> ())?
    public func getExtensions(for userIdentifier: UserIdentifier, after: PaginationCursor?, completion: @escaping Completion<Page<Extension>?, NetworkError<EmptyAPIError>>)  {
        getExtensionsCallCount += 1
        if let getExtensionsHandler = getExtensionsHandler {
            getExtensionsHandler(userIdentifier, after, completion)
        }
        
    }

    public private(set) var getTargetAccessesCallCount = 0
    public var getTargetAccessesHandler: ((@escaping Completion<[TargetAccess], NetworkError<EmptyAPIError>>) -> ())?
    public func getTargetAccesses(completion: @escaping Completion<[TargetAccess], NetworkError<EmptyAPIError>>)  {
        getTargetAccessesCallCount += 1
        if let getTargetAccessesHandler = getTargetAccessesHandler {
            getTargetAccessesHandler(completion)
        }
        
    }

    public private(set) var uploadReadingsCallCount = 0
    public var uploadReadingsHandler: (([LearningCardReading], @escaping Completion<Void, NetworkError<EmptyAPIError>>) -> ())?
    public func uploadReadings(_ readings: [LearningCardReading], completion: @escaping Completion<Void, NetworkError<EmptyAPIError>>)  {
        uploadReadingsCallCount += 1
        if let uploadReadingsHandler = uploadReadingsHandler {
            uploadReadingsHandler(readings, completion)
        }
        
    }
}

class AboutViewTypeMock: AboutViewType {
    init() { }


    private(set) var setDataCallCount = 0
    var setDataHandler: (([AboutViewItem]) -> ())?
    func setData(_ items: [AboutViewItem])  {
        setDataCallCount += 1
        if let setDataHandler = setDataHandler {
            setDataHandler(items)
        }
        
    }
}

class LearningCardShareRepostitoryTypeMock: LearningCardShareRepostitoryType {
    init() { }


    private(set) var learningCardShareItemCallCount = 0
    var learningCardShareItemHandler: ((LearningCardMetaItem, String) -> (LearningCardShareItem))?
    func learningCardShareItem(for learningCardMetaItem: LearningCardMetaItem, with userName: String) -> LearningCardShareItem {
        learningCardShareItemCallCount += 1
        if let learningCardShareItemHandler = learningCardShareItemHandler {
            return learningCardShareItemHandler(learningCardMetaItem, userName)
        }
        fatalError("learningCardShareItemHandler returns can't have a default value thus its handler must be set")
    }
}

class MiniMapViewTypeMock: MiniMapViewType {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: (([MiniMapViewItem]) -> ())?
    func set(items: [MiniMapViewItem])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(items)
        }
        
    }
}

class MonographCoordinatorTypeMock: MonographCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((MonographDeeplink) -> ())?
    func navigate(to monograph: MonographDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(monograph)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var showSnippetViewCallCount = 0
    var showSnippetViewHandler: ((Snippet, Deeplink) -> ())?
    func showSnippetView(with snippet: Snippet, for deeplink: Deeplink)  {
        showSnippetViewCallCount += 1
        if let showSnippetViewHandler = showSnippetViewHandler {
            showSnippetViewHandler(snippet, deeplink)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((LearningCardDeeplink) -> ())?
    func navigate(to learningCard: LearningCardDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(learningCard)
        }
        
    }

    private(set) var openURLInternallyCallCount = 0
    var openURLInternallyHandler: ((URL) -> ())?
    func openURLInternally(_ url: URL)  {
        openURLInternallyCallCount += 1
        if let openURLInternallyHandler = openURLInternallyHandler {
            openURLInternallyHandler(url)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var showMonographComponentCallCount = 0
    var showMonographComponentHandler: ((MonographComponent, MonographPresenter.Tracker) -> ())?
    func showMonographComponent(_ monographComponent: MonographComponent, tracker: MonographPresenter.Tracker)  {
        showMonographComponentCallCount += 1
        if let showMonographComponentHandler = showMonographComponentHandler {
            showMonographComponentHandler(monographComponent, tracker)
        }
        
    }

    private(set) var sendFeedbackCallCount = 0
    var sendFeedbackHandler: (() -> ())?
    func sendFeedback()  {
        sendFeedbackCallCount += 1
        if let sendFeedbackHandler = sendFeedbackHandler {
            sendFeedbackHandler()
        }
        
    }

    private(set) var dismissViewCallCount = 0
    var dismissViewHandler: (() -> ())?
    func dismissView()  {
        dismissViewCallCount += 1
        if let dismissViewHandler = dismissViewHandler {
            dismissViewHandler()
        }
        
    }
}

class GalleryCoordinatorTypeMock: GalleryCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var openURLExternallyCallCount = 0
    var openURLExternallyHandler: ((URL) -> ())?
    func openURLExternally(_ url: URL)  {
        openURLExternallyCallCount += 1
        if let openURLExternallyHandler = openURLExternallyHandler {
            openURLExternallyHandler(url)
        }
        
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((ExternalAdditionIdentifier, @escaping (() -> Void)) -> ())?
    func navigate(to externalAddition: ExternalAdditionIdentifier, _ closeCompletionClosure: @escaping (() -> Void))  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(externalAddition, closeCompletionClosure)
        }
        
    }

    private(set) var goToStoreCallCount = 0
    var goToStoreHandler: (() -> ())?
    func goToStore()  {
        goToStoreCallCount += 1
        if let goToStoreHandler = goToStoreHandler {
            goToStoreHandler()
        }
        
    }

    private(set) var goCallCount = 0
    var goHandler: ((GalleryDeeplink) -> ())?
    func go(to galleryDeepLink: GalleryDeeplink)  {
        goCallCount += 1
        if let goHandler = goHandler {
            goHandler(galleryDeepLink)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var goToCallCount = 0
    var goToHandler: ((ImageResourceIdentifier) -> ())?
    func go(to imageResource: ImageResourceIdentifier)  {
        goToCallCount += 1
        if let goToHandler = goToHandler {
            goToHandler(imageResource)
        }
        
    }
}

class GalleryImageViewPresenterTypeMock: GalleryImageViewPresenterType {
    init() { }
    init(view: GalleryImageViewType? = nil, image: ImageResourceType, delegate: GalleryImageViewPresenterDelegate? = nil) {
        self.view = view
        self._image = image
        self.delegate = delegate
    }


    private(set) var viewSetCallCount = 0
    var view: GalleryImageViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var imageSetCallCount = 0
    private var _image: ImageResourceType!  { didSet { imageSetCallCount += 1 } }
    var image: ImageResourceType {
        get { return _image }
        set { _image = newValue }
    }

    private(set) var delegateSetCallCount = 0
    var delegate: GalleryImageViewPresenterDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var setFullscreenCallCount = 0
    var setFullscreenHandler: ((Bool) -> ())?
    func setFullscreen(_ value: Bool)  {
        setFullscreenCallCount += 1
        if let setFullscreenHandler = setFullscreenHandler {
            setFullscreenHandler(value)
        }
        
    }

    private(set) var toggleImageOverlayCallCount = 0
    var toggleImageOverlayHandler: (() -> ())?
    func toggleImageOverlay()  {
        toggleImageOverlayCallCount += 1
        if let toggleImageOverlayHandler = toggleImageOverlayHandler {
            toggleImageOverlayHandler()
        }
        
    }

    private(set) var openURLCallCount = 0
    var openURLHandler: ((URL) -> ())?
    func openURL(_ url: URL)  {
        openURLCallCount += 1
        if let openURLHandler = openURLHandler {
            openURLHandler(url)
        }
        
    }

    private(set) var trackImageDescriptionPresentedCallCount = 0
    var trackImageDescriptionPresentedHandler: (() -> ())?
    func trackImageDescriptionPresented()  {
        trackImageDescriptionPresentedCallCount += 1
        if let trackImageDescriptionPresentedHandler = trackImageDescriptionPresentedHandler {
            trackImageDescriptionPresentedHandler()
        }
        
    }

    private(set) var trackImageDescriptionDismissedCallCount = 0
    var trackImageDescriptionDismissedHandler: (() -> ())?
    func trackImageDescriptionDismissed()  {
        trackImageDescriptionDismissedCallCount += 1
        if let trackImageDescriptionDismissedHandler = trackImageDescriptionDismissedHandler {
            trackImageDescriptionDismissedHandler()
        }
        
    }

    private(set) var viewWillAppearCallCount = 0
    var viewWillAppearHandler: (() -> ())?
    func viewWillAppear()  {
        viewWillAppearCallCount += 1
        if let viewWillAppearHandler = viewWillAppearHandler {
            viewWillAppearHandler()
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((ExternalAddition) -> ())?
    func navigate(to externalAddition: ExternalAddition)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(externalAddition)
        }
        
    }

    private(set) var viewDidDisappearCallCount = 0
    var viewDidDisappearHandler: (() -> ())?
    func viewDidDisappear()  {
        viewDidDisappearCallCount += 1
        if let viewDidDisappearHandler = viewDidDisappearHandler {
            viewDidDisappearHandler()
        }
        
    }

    private(set) var updateDraggingStateCallCount = 0
    var updateDraggingStateHandler: ((Bool) -> ())?
    func updateDraggingState(isDragging: Bool)  {
        updateDraggingStateCallCount += 1
        if let updateDraggingStateHandler = updateDraggingStateHandler {
            updateDraggingStateHandler(isDragging)
        }
        
    }
}

class PopoverViewTypeMock: PopoverViewType {
    init() { }
    init(preferredContentSize: CGSize = .zero) {
        self.preferredContentSize = preferredContentSize
    }


    private(set) var preferredContentSizeSetCallCount = 0
    var preferredContentSize: CGSize = .zero { didSet { preferredContentSizeSetCallCount += 1 } }

    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var loadCallCount = 0
    var loadHandler: ((HtmlDocument) -> ())?
    func load(document: HtmlDocument)  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(document)
        }
        
    }
}

class SearchRepositoryTypeMock: SearchRepositoryType {
    init() { }


    private(set) var overviewSearchCallCount = 0
    var overviewSearchHandler: ((String, TimeInterval, @escaping (Result<SearchResult, SearchError>) -> Void) -> ())?
    func overviewSearch(for text: String, requestTimeout: TimeInterval, completion: @escaping (Result<SearchResult, SearchError>) -> Void)  {
        overviewSearchCallCount += 1
        if let overviewSearchHandler = overviewSearchHandler {
            overviewSearchHandler(text, requestTimeout, completion)
        }
        
    }

    private(set) var fetchArticleSearchResultPageCallCount = 0
    var fetchArticleSearchResultPageHandler: ((String, Int, TimeInterval?, String?, @escaping (Result<Page<ArticleSearchItem>?, SearchError>) -> Void) -> ())?
    func fetchArticleSearchResultPage(for text: String, limit: Int, requestTimeout: TimeInterval?, after cursor: String?, completion: @escaping (Result<Page<ArticleSearchItem>?, SearchError>) -> Void)  {
        fetchArticleSearchResultPageCallCount += 1
        if let fetchArticleSearchResultPageHandler = fetchArticleSearchResultPageHandler {
            fetchArticleSearchResultPageHandler(text, limit, requestTimeout, cursor, completion)
        }
        
    }

    private(set) var fetchPharmaSearchResultPageCallCount = 0
    var fetchPharmaSearchResultPageHandler: ((String, Int, TimeInterval?, String?, @escaping (Result<Page<PharmaSearchItem>?, SearchError>) -> Void) -> ())?
    func fetchPharmaSearchResultPage(for text: String, limit: Int, requestTimeout: TimeInterval?, after cursor: String?, completion: @escaping (Result<Page<PharmaSearchItem>?, SearchError>) -> Void)  {
        fetchPharmaSearchResultPageCallCount += 1
        if let fetchPharmaSearchResultPageHandler = fetchPharmaSearchResultPageHandler {
            fetchPharmaSearchResultPageHandler(text, limit, requestTimeout, cursor, completion)
        }
        
    }

    private(set) var fetchPharmaSearchResultOfflineCallCount = 0
    var fetchPharmaSearchResultOfflineHandler: ((String, @escaping ([PharmaSearchItem]?) -> Void) -> ())?
    func fetchPharmaSearchResultOffline(for text: String, completion: @escaping ([PharmaSearchItem]?) -> Void)  {
        fetchPharmaSearchResultOfflineCallCount += 1
        if let fetchPharmaSearchResultOfflineHandler = fetchPharmaSearchResultOfflineHandler {
            fetchPharmaSearchResultOfflineHandler(text, completion)
        }
        
    }

    private(set) var fetchMonographSearchResultPageCallCount = 0
    var fetchMonographSearchResultPageHandler: ((String, Int, TimeInterval?, String?, @escaping (Result<Page<MonographSearchItem>?, SearchError>) -> Void) -> ())?
    func fetchMonographSearchResultPage(for text: String, limit: Int, requestTimeout: TimeInterval?, after cursor: String?, completion: @escaping (Result<Page<MonographSearchItem>?, SearchError>) -> Void)  {
        fetchMonographSearchResultPageCallCount += 1
        if let fetchMonographSearchResultPageHandler = fetchMonographSearchResultPageHandler {
            fetchMonographSearchResultPageHandler(text, limit, requestTimeout, cursor, completion)
        }
        
    }

    private(set) var fetchGuidelineSearchResultPageCallCount = 0
    var fetchGuidelineSearchResultPageHandler: ((String, Int, TimeInterval?, String?, @escaping (Result<Page<GuidelineSearchItem>?, SearchError>) -> Void) -> ())?
    func fetchGuidelineSearchResultPage(for text: String, limit: Int, requestTimeout: TimeInterval?, after cursor: String?, completion: @escaping (Result<Page<GuidelineSearchItem>?, SearchError>) -> Void)  {
        fetchGuidelineSearchResultPageCallCount += 1
        if let fetchGuidelineSearchResultPageHandler = fetchGuidelineSearchResultPageHandler {
            fetchGuidelineSearchResultPageHandler(text, limit, requestTimeout, cursor, completion)
        }
        
    }

    private(set) var fetchMediaSearchResultPageCallCount = 0
    var fetchMediaSearchResultPageHandler: ((String, [String], Int, TimeInterval?, String?, @escaping (Result<(Page<MediaSearchItem>?, MediaFiltersResult), SearchError>) -> Void) -> ())?
    func fetchMediaSearchResultPage(for text: String, mediaFilters: [String], limit: Int, requestTimeout: TimeInterval?, after cursor: String?, completion: @escaping (Result<(Page<MediaSearchItem>?, MediaFiltersResult), SearchError>) -> Void)  {
        fetchMediaSearchResultPageCallCount += 1
        if let fetchMediaSearchResultPageHandler = fetchMediaSearchResultPageHandler {
            fetchMediaSearchResultPageHandler(text, mediaFilters, limit, requestTimeout, cursor, completion)
        }
        
    }

    private(set) var hasOfflinePharmaDBCallCount = 0
    var hasOfflinePharmaDBHandler: (() -> (Bool))?
    func hasOfflinePharmaDB() -> Bool {
        hasOfflinePharmaDBCallCount += 1
        if let hasOfflinePharmaDBHandler = hasOfflinePharmaDBHandler {
            return hasOfflinePharmaDBHandler()
        }
        return false
    }
}

class ShortcutsServiceTypeMock: ShortcutsServiceType {
    init() { }


    private(set) var deepLinkCallCount = 0
    var deepLinkHandler: ((NSUserActivity) -> (Deeplink?))?
    func deepLink(for userActivity: NSUserActivity) -> Deeplink? {
        deepLinkCallCount += 1
        if let deepLinkHandler = deepLinkHandler {
            return deepLinkHandler(userActivity)
        }
        return nil
    }

    private(set) var userActivityCallCount = 0
    var userActivityHandler: ((AmbossShortcut) -> (NSUserActivity))?
    func userActivity(for shortcut: AmbossShortcut) -> NSUserActivity {
        userActivityCallCount += 1
        if let userActivityHandler = userActivityHandler {
            return userActivityHandler(shortcut)
        }
        fatalError("userActivityHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var newAddVoiceShortcutViewControllerCallCount = 0
    var newAddVoiceShortcutViewControllerHandler: ((AmbossShortcut, INUIAddVoiceShortcutViewControllerDelegate) -> (UIViewController))?
    func newAddVoiceShortcutViewController(for shortcut: AmbossShortcut, delegate: INUIAddVoiceShortcutViewControllerDelegate) -> UIViewController {
        newAddVoiceShortcutViewControllerCallCount += 1
        if let newAddVoiceShortcutViewControllerHandler = newAddVoiceShortcutViewControllerHandler {
            return newAddVoiceShortcutViewControllerHandler(shortcut, delegate)
        }
        return UIViewController()
    }
}

class ListViewTypeMock: ListViewType {
    init() { }


    private(set) var setEmptyViewTextCallCount = 0
    var setEmptyViewTextHandler: ((String) -> ())?
    func setEmptyViewText(_ text: String)  {
        setEmptyViewTextCallCount += 1
        if let setEmptyViewTextHandler = setEmptyViewTextHandler {
            setEmptyViewTextHandler(text)
        }
        
    }

    private(set) var setTagListViewItemsCallCount = 0
    var setTagListViewItemsHandler: (([TagListViewData]) -> ())?
    func setTagListViewItems(_ items: [TagListViewData])  {
        setTagListViewItemsCallCount += 1
        if let setTagListViewItemsHandler = setTagListViewItemsHandler {
            setTagListViewItemsHandler(items)
        }
        
    }
}

class ListsViewTypeMock: ListsViewType {
    init() { }


    private(set) var setItemsCallCount = 0
    var setItemsHandler: (([List]) -> ())?
    func setItems(_ items: [List])  {
        setItemsCallCount += 1
        if let setItemsHandler = setItemsHandler {
            setItemsHandler(items)
        }
        
    }

    private(set) var selectCallCount = 0
    var selectHandler: ((List) -> ())?
    func select(_ item: List)  {
        selectCallCount += 1
        if let selectHandler = selectHandler {
            selectHandler(item)
        }
        
    }
}

class GalleryImageViewTypeMock: GalleryImageViewType {
    init() { }


    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func showError(_ error: PresentableMessageType, actions: [MessageAction])  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(error, actions)
        }
        
    }

    private(set) var setImageCallCount = 0
    var setImageHandler: ((UIImage) -> ())?
    func setImage(_ image: UIImage)  {
        setImageCallCount += 1
        if let setImageHandler = setImageHandler {
            setImageHandler(image)
        }
        
    }

    private(set) var setExternalAdditionsCallCount = 0
    var setExternalAdditionsHandler: (([ExternalAddition], Bool) -> ())?
    func setExternalAdditions(_ features: [ExternalAddition], hasOverlay: Bool)  {
        setExternalAdditionsCallCount += 1
        if let setExternalAdditionsHandler = setExternalAdditionsHandler {
            setExternalAdditionsHandler(features, hasOverlay)
        }
        
    }
}

class ExtensionViewTypeMock: ExtensionViewType {
    init() { }


    private(set) var setExtensionsCallCount = 0
    var setExtensionsHandler: (([ExtensionViewData]) -> ())?
    func setExtensions(_ extensions: [ExtensionViewData])  {
        setExtensionsCallCount += 1
        if let setExtensionsHandler = setExtensionsHandler {
            setExtensionsHandler(extensions)
        }
        
    }
}

class AppearanceApplicationServiceTypeMock: AppearanceApplicationServiceType {
    init() { }
    init(userCanChangeInterfaceStyle: Bool = false) {
        self.userCanChangeInterfaceStyle = userCanChangeInterfaceStyle
    }


    private(set) var userCanChangeInterfaceStyleSetCallCount = 0
    var userCanChangeInterfaceStyle: Bool = false { didSet { userCanChangeInterfaceStyleSetCallCount += 1 } }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class PDFViewerViewTypeMock: PDFViewerViewType {
    init() { }


    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func showError(_ error: PresentableMessageType, actions: [MessageAction])  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(error, actions)
        }
        
    }

    private(set) var showDocumentCallCount = 0
    var showDocumentHandler: ((PDFDocument) -> ())?
    func showDocument(_ document: PDFDocument)  {
        showDocumentCallCount += 1
        if let showDocumentHandler = showDocumentHandler {
            showDocumentHandler(document)
        }
        
    }

    private(set) var setCallCount = 0
    var setHandler: ((String) -> ())?
    func set(title: String)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(title)
        }
        
    }
}

class SearchCoordinatorTypeMock: SearchCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((SearchDeeplink) -> ())?
    func navigate(to searchDeepLink: SearchDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(searchDeepLink)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((UncommitedSearchDeeplink) -> ())?
    func navigate(to uncommitedSearchDeepLink: UncommitedSearchDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(uncommitedSearchDeepLink)
        }
        
    }

    private(set) var navigateToLearningCardDeeplinkCallCount = 0
    var navigateToLearningCardDeeplinkHandler: ((LearningCardDeeplink) -> ())?
    func navigate(to learningCard: LearningCardDeeplink)  {
        navigateToLearningCardDeeplinkCallCount += 1
        if let navigateToLearningCardDeeplinkHandler = navigateToLearningCardDeeplinkHandler {
            navigateToLearningCardDeeplinkHandler(learningCard)
        }
        
    }

    private(set) var navigateToDrugCallCount = 0
    var navigateToDrugHandler: ((SubstanceIdentifier, DrugIdentifier?) -> ())?
    func navigate(to substance: SubstanceIdentifier, drug: DrugIdentifier?)  {
        navigateToDrugCallCount += 1
        if let navigateToDrugHandler = navigateToDrugHandler {
            navigateToDrugHandler(substance, drug)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var navigateToMonographDeeplinkCallCount = 0
    var navigateToMonographDeeplinkHandler: ((MonographDeeplink) -> ())?
    func navigate(to monographDeeplink: MonographDeeplink)  {
        navigateToMonographDeeplinkCallCount += 1
        if let navigateToMonographDeeplinkHandler = navigateToMonographDeeplinkHandler {
            navigateToMonographDeeplinkHandler(monographDeeplink)
        }
        
    }

    private(set) var navigateToImageResourceIdentifierCallCount = 0
    var navigateToImageResourceIdentifierHandler: ((ImageResourceIdentifier) -> ())?
    func navigate(to imageResourceIdentifier: ImageResourceIdentifier)  {
        navigateToImageResourceIdentifierCallCount += 1
        if let navigateToImageResourceIdentifierHandler = navigateToImageResourceIdentifierHandler {
            navigateToImageResourceIdentifierHandler(imageResourceIdentifier)
        }
        
    }

    private(set) var navigateToExternalAdditionIdentifierCallCount = 0
    var navigateToExternalAdditionIdentifierHandler: ((ExternalAdditionIdentifier) -> ())?
    func navigate(to externalAddition: ExternalAdditionIdentifier)  {
        navigateToExternalAdditionIdentifierCallCount += 1
        if let navigateToExternalAdditionIdentifierHandler = navigateToExternalAdditionIdentifierHandler {
            navigateToExternalAdditionIdentifierHandler(externalAddition)
        }
        
    }

    private(set) var navigateToAddVoiceSearchShortcutCallCount = 0
    var navigateToAddVoiceSearchShortcutHandler: (() -> ())?
    func navigateToAddVoiceSearchShortcut()  {
        navigateToAddVoiceSearchShortcutCallCount += 1
        if let navigateToAddVoiceSearchShortcutHandler = navigateToAddVoiceSearchShortcutHandler {
            navigateToAddVoiceSearchShortcutHandler()
        }
        
    }

    private(set) var openURLInternallyCallCount = 0
    var openURLInternallyHandler: ((URL) -> ())?
    func openURLInternally(_ url: URL)  {
        openURLInternallyCallCount += 1
        if let openURLInternallyHandler = openURLInternallyHandler {
            openURLInternallyHandler(url)
        }
        
    }

    private(set) var openURLExternallyCallCount = 0
    var openURLExternallyHandler: ((URL) -> ())?
    func openURLExternally(_ url: URL)  {
        openURLExternallyCallCount += 1
        if let openURLExternallyHandler = openURLExternallyHandler {
            openURLExternallyHandler(url)
        }
        
    }
}

class GalleryAnalyticsTrackingProviderTypeMock: GalleryAnalyticsTrackingProviderType {
    init() { }


    private(set) var trackShowImageExplanationsCallCount = 0
    var trackShowImageExplanationsHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowImageExplanations(imageID: ImageResourceIdentifier)  {
        trackShowImageExplanationsCallCount += 1
        if let trackShowImageExplanationsHandler = trackShowImageExplanationsHandler {
            trackShowImageExplanationsHandler(imageID)
        }
        
    }

    private(set) var trackHideImageExplanationsCallCount = 0
    var trackHideImageExplanationsHandler: ((ImageResourceIdentifier) -> ())?
    func trackHideImageExplanations(imageID: ImageResourceIdentifier)  {
        trackHideImageExplanationsCallCount += 1
        if let trackHideImageExplanationsHandler = trackHideImageExplanationsHandler {
            trackHideImageExplanationsHandler(imageID)
        }
        
    }

    private(set) var trackShowImageOverlayCallCount = 0
    var trackShowImageOverlayHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowImageOverlay(imageID: ImageResourceIdentifier)  {
        trackShowImageOverlayCallCount += 1
        if let trackShowImageOverlayHandler = trackShowImageOverlayHandler {
            trackShowImageOverlayHandler(imageID)
        }
        
    }

    private(set) var trackHideImageOverlayCallCount = 0
    var trackHideImageOverlayHandler: ((ImageResourceIdentifier) -> ())?
    func trackHideImageOverlay(imageID: ImageResourceIdentifier)  {
        trackHideImageOverlayCallCount += 1
        if let trackHideImageOverlayHandler = trackHideImageOverlayHandler {
            trackHideImageOverlayHandler(imageID)
        }
        
    }

    private(set) var trackShowSmartZoomCallCount = 0
    var trackShowSmartZoomHandler: ((ImageResourceIdentifier) -> ())?
    func trackShowSmartZoom(imageID: ImageResourceIdentifier)  {
        trackShowSmartZoomCallCount += 1
        if let trackShowSmartZoomHandler = trackShowSmartZoomHandler {
            trackShowSmartZoomHandler(imageID)
        }
        
    }

    private(set) var trackCloseSmartZoomCallCount = 0
    var trackCloseSmartZoomHandler: ((ImageResourceIdentifier) -> ())?
    func trackCloseSmartZoom(imageID: ImageResourceIdentifier)  {
        trackCloseSmartZoomCallCount += 1
        if let trackCloseSmartZoomHandler = trackCloseSmartZoomHandler {
            trackCloseSmartZoomHandler(imageID)
        }
        
    }

    private(set) var trackShowImageMediaviewerCallCount = 0
    var trackShowImageMediaviewerHandler: ((ImageResourceIdentifier?, String?, String?) -> ())?
    func trackShowImageMediaviewer(imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackShowImageMediaviewerCallCount += 1
        if let trackShowImageMediaviewerHandler = trackShowImageMediaviewerHandler {
            trackShowImageMediaviewerHandler(imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackCloseImageMediaviewerCallCount = 0
    var trackCloseImageMediaviewerHandler: ((ImageResourceIdentifier?, String?, String?) -> ())?
    func trackCloseImageMediaviewer(imageID: ImageResourceIdentifier?, title: String?, externalAdditionType: String?)  {
        trackCloseImageMediaviewerCallCount += 1
        if let trackCloseImageMediaviewerHandler = trackCloseImageMediaviewerHandler {
            trackCloseImageMediaviewerHandler(imageID, title, externalAdditionType)
        }
        
    }

    private(set) var trackShowVideoMediaviewerCallCount = 0
    var trackShowVideoMediaviewerHandler: ((URL) -> ())?
    func trackShowVideoMediaviewer(url: URL)  {
        trackShowVideoMediaviewerCallCount += 1
        if let trackShowVideoMediaviewerHandler = trackShowVideoMediaviewerHandler {
            trackShowVideoMediaviewerHandler(url)
        }
        
    }

    private(set) var trackNoAccessBuyLicenseCallCount = 0
    var trackNoAccessBuyLicenseHandler: (() -> ())?
    func trackNoAccessBuyLicense()  {
        trackNoAccessBuyLicenseCallCount += 1
        if let trackNoAccessBuyLicenseHandler = trackNoAccessBuyLicenseHandler {
            trackNoAccessBuyLicenseHandler()
        }
        
    }
}

class LoginViewTypeMock: LoginViewType {
    init() { }


    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var setLoginButtonIsEnabledCallCount = 0
    var setLoginButtonIsEnabledHandler: ((Bool) -> ())?
    func setLoginButtonIsEnabled(_ isEnabled: Bool)  {
        setLoginButtonIsEnabledCallCount += 1
        if let setLoginButtonIsEnabledHandler = setLoginButtonIsEnabledHandler {
            setLoginButtonIsEnabledHandler(isEnabled)
        }
        
    }

    private(set) var prefillCallCount = 0
    var prefillHandler: ((String?, String?) -> ())?
    func prefill(email: String?, password: String?)  {
        prefillCallCount += 1
        if let prefillHandler = prefillHandler {
            prefillHandler(email, password)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType) -> ())?
    func presentMessage(_ message: PresentableMessageType)  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message)
        }
        
    }
}

class LearningCardCoordinatorTypeMock: LearningCardCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((LearningCardDeeplink, Bool, Bool) -> ())?
    func navigate(to deeplink: LearningCardDeeplink, snippetAllowed: Bool, shouldPopToRoot: Bool)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(deeplink, snippetAllowed, shouldPopToRoot)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((PharmaCardDeeplink) -> ())?
    func navigate(to pharmaCard: PharmaCardDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(pharmaCard)
        }
        
    }

    private(set) var navigateToMonographDeeplinkCallCount = 0
    var navigateToMonographDeeplinkHandler: ((MonographDeeplink) -> ())?
    func navigate(to monograph: MonographDeeplink)  {
        navigateToMonographDeeplinkCallCount += 1
        if let navigateToMonographDeeplinkHandler = navigateToMonographDeeplinkHandler {
            navigateToMonographDeeplinkHandler(monograph)
        }
        
    }

    private(set) var navigateToTrackerCallCount = 0
    var navigateToTrackerHandler: ((ExternalAdditionIdentifier, GalleryAnalyticsTrackingProviderType) -> ())?
    func navigate(to externalAddition: ExternalAdditionIdentifier, tracker: GalleryAnalyticsTrackingProviderType)  {
        navigateToTrackerCallCount += 1
        if let navigateToTrackerHandler = navigateToTrackerHandler {
            navigateToTrackerHandler(externalAddition, tracker)
        }
        
    }

    private(set) var navigateToTrackerURLCallCount = 0
    var navigateToTrackerURLHandler: ((URL, GalleryAnalyticsTrackingProviderType) -> ())?
    func navigate(to videoURL: URL, tracker: GalleryAnalyticsTrackingProviderType)  {
        navigateToTrackerURLCallCount += 1
        if let navigateToTrackerURLHandler = navigateToTrackerURLHandler {
            navigateToTrackerURLHandler(videoURL, tracker)
        }
        
    }

    private(set) var showTableCallCount = 0
    var showTableHandler: ((HtmlDocument, LearningCardTracker) -> ())?
    func showTable(htmlDocument: HtmlDocument, tracker: LearningCardTracker)  {
        showTableCallCount += 1
        if let showTableHandler = showTableHandler {
            showTableHandler(htmlDocument, tracker)
        }
        
    }

    private(set) var showPopoverCallCount = 0
    var showPopoverHandler: ((HtmlDocument, LearningCardTracker, CGSize) -> ())?
    func showPopover(htmlDocument: HtmlDocument, tracker: LearningCardTracker, preferredContentSize: CGSize)  {
        showPopoverCallCount += 1
        if let showPopoverHandler = showPopoverHandler {
            showPopoverHandler(htmlDocument, tracker, preferredContentSize)
        }
        
    }

    private(set) var showPopoverForCallCount = 0
    var showPopoverForHandler: ((DosageIdentifier, LearningCardTracker) -> ())?
    func showPopover(for dosageIdentifier: DosageIdentifier, tracker: LearningCardTracker)  {
        showPopoverForCallCount += 1
        if let showPopoverForHandler = showPopoverForHandler {
            showPopoverForHandler(dosageIdentifier, tracker)
        }
        
    }

    private(set) var closePopoverCallCount = 0
    var closePopoverHandler: (() -> ())?
    func closePopover()  {
        closePopoverCallCount += 1
        if let closePopoverHandler = closePopoverHandler {
            closePopoverHandler()
        }
        
    }

    private(set) var showLearningCardOptionsCallCount = 0
    var showLearningCardOptionsHandler: ((LearningCardTracker) -> ())?
    func showLearningCardOptions(tracker: LearningCardTracker)  {
        showLearningCardOptionsCallCount += 1
        if let showLearningCardOptionsHandler = showLearningCardOptionsHandler {
            showLearningCardOptionsHandler(tracker)
        }
        
    }

    private(set) var closeLearningCardOptionsCallCount = 0
    var closeLearningCardOptionsHandler: (() -> ())?
    func closeLearningCardOptions()  {
        closeLearningCardOptionsCallCount += 1
        if let closeLearningCardOptionsHandler = closeLearningCardOptionsHandler {
            closeLearningCardOptionsHandler()
        }
        
    }

    private(set) var showImageGalleryCallCount = 0
    var showImageGalleryHandler: ((GalleryDeeplink, GalleryAnalyticsTrackingProviderType) -> ())?
    func showImageGallery(_ galleryDeeplink: GalleryDeeplink, tracker: GalleryAnalyticsTrackingProviderType)  {
        showImageGalleryCallCount += 1
        if let showImageGalleryHandler = showImageGalleryHandler {
            showImageGalleryHandler(galleryDeeplink, tracker)
        }
        
    }

    private(set) var openURLExternallyCallCount = 0
    var openURLExternallyHandler: ((URL) -> ())?
    func openURLExternally(_ url: URL)  {
        openURLExternallyCallCount += 1
        if let openURLExternallyHandler = openURLExternallyHandler {
            openURLExternallyHandler(url)
        }
        
    }

    private(set) var openURLInternallyCallCount = 0
    var openURLInternallyHandler: ((URL) -> ())?
    func openURLInternally(_ url: URL)  {
        openURLInternallyCallCount += 1
        if let openURLInternallyHandler = openURLInternallyHandler {
            openURLInternallyHandler(url)
        }
        
    }

    private(set) var showUserFeedbackCallCount = 0
    var showUserFeedbackHandler: ((FeedbackDeeplink) -> ())?
    func showUserFeedback(for deeplink: FeedbackDeeplink)  {
        showUserFeedbackCallCount += 1
        if let showUserFeedbackHandler = showUserFeedbackHandler {
            showUserFeedbackHandler(deeplink)
        }
        
    }

    private(set) var showSnippetViewCallCount = 0
    var showSnippetViewHandler: ((Snippet, Deeplink) -> ())?
    func showSnippetView(with snippet: Snippet, for deeplink: Deeplink)  {
        showSnippetViewCallCount += 1
        if let showSnippetViewHandler = showSnippetViewHandler {
            showSnippetViewHandler(snippet, deeplink)
        }
        
    }

    private(set) var dismissFeedbackViewCallCount = 0
    var dismissFeedbackViewHandler: (() -> ())?
    func dismissFeedbackView()  {
        dismissFeedbackViewCallCount += 1
        if let dismissFeedbackViewHandler = dismissFeedbackViewHandler {
            dismissFeedbackViewHandler()
        }
        
    }

    private(set) var showExtensionViewCallCount = 0
    var showExtensionViewHandler: ((LearningCardIdentifier, LearningCardSectionIdentifier) -> ())?
    func showExtensionView(for learningCard: LearningCardIdentifier, and section: LearningCardSectionIdentifier)  {
        showExtensionViewCallCount += 1
        if let showExtensionViewHandler = showExtensionViewHandler {
            showExtensionViewHandler(learningCard, section)
        }
        
    }

    private(set) var dismissExtensionViewCallCount = 0
    var dismissExtensionViewHandler: (() -> ())?
    func dismissExtensionView()  {
        dismissExtensionViewCallCount += 1
        if let dismissExtensionViewHandler = dismissExtensionViewHandler {
            dismissExtensionViewHandler()
        }
        
    }

    private(set) var showMiniMapCallCount = 0
    var showMiniMapHandler: ((LearningCardIdentifier, [String]) -> ())?
    func showMiniMap(for learningCardIdentifier: LearningCardIdentifier, with currentModes: [String])  {
        showMiniMapCallCount += 1
        if let showMiniMapHandler = showMiniMapHandler {
            showMiniMapHandler(learningCardIdentifier, currentModes)
        }
        
    }

    private(set) var dismissMiniMapViewCallCount = 0
    var dismissMiniMapViewHandler: (() -> ())?
    func dismissMiniMapView()  {
        dismissMiniMapViewCallCount += 1
        if let dismissMiniMapViewHandler = dismissMiniMapViewHandler {
            dismissMiniMapViewHandler()
        }
        
    }

    private(set) var shareCallCount = 0
    var shareHandler: ((LearningCardShareItem, @escaping (Bool) -> Void) -> ())?
    func share(_ learningCardShareItem: LearningCardShareItem, completion: @escaping (Bool) -> Void)  {
        shareCallCount += 1
        if let shareHandler = shareHandler {
            shareHandler(learningCardShareItem, completion)
        }
        
    }

    private(set) var sendEmailCallCount = 0
    var sendEmailHandler: ((String, (EmailSendingError) -> Void) -> ())?
    func sendEmail(to emailAddress: String, onFailure: (EmailSendingError) -> Void)  {
        sendEmailCallCount += 1
        if let sendEmailHandler = sendEmailHandler {
            sendEmailHandler(emailAddress, onFailure)
        }
        
    }

    private(set) var showManageSharedExtensionsViewCallCount = 0
    var showManageSharedExtensionsViewHandler: (() -> ())?
    func showManageSharedExtensionsView()  {
        showManageSharedExtensionsViewCallCount += 1
        if let showManageSharedExtensionsViewHandler = showManageSharedExtensionsViewHandler {
            showManageSharedExtensionsViewHandler()
        }
        
    }

    private(set) var showSearchViewCallCount = 0
    var showSearchViewHandler: (() -> ())?
    func showSearchView()  {
        showSearchViewCallCount += 1
        if let showSearchViewHandler = showSearchViewHandler {
            showSearchViewHandler()
        }
        
    }

    private(set) var openQBankSessionCreationCallCount = 0
    var openQBankSessionCreationHandler: ((LearningCardIdentifier) -> ())?
    func openQBankSessionCreation(for learningCard: LearningCardIdentifier)  {
        openQBankSessionCreationCallCount += 1
        if let openQBankSessionCreationHandler = openQBankSessionCreationHandler {
            openQBankSessionCreationHandler(learningCard)
        }
        
    }

    private(set) var goToStoreCallCount = 0
    var goToStoreHandler: ((Bool, Bool) -> ())?
    func goToStore(dismissModally: Bool, animated: Bool)  {
        goToStoreCallCount += 1
        if let goToStoreHandler = goToStoreHandler {
            goToStoreHandler(dismissModally, animated)
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((String, String) -> ())?
    func showError(title: String, message: String)  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(title, message)
        }
        
    }

    private(set) var navigateToUserStageSettingsCallCount = 0
    var navigateToUserStageSettingsHandler: (() -> ())?
    func navigateToUserStageSettings()  {
        navigateToUserStageSettingsCallCount += 1
        if let navigateToUserStageSettingsHandler = navigateToUserStageSettingsHandler {
            navigateToUserStageSettingsHandler()
        }
        
    }
}

class MonographComponentWebViewTypeMock: MonographComponentWebViewType {
    init() { }


    private(set) var loadCallCount = 0
    var loadHandler: ((MonographComponent) -> ())?
    func load(monographComponent: MonographComponent)  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(monographComponent)
        }
        
    }
}

class AppearanceSettingsTableViewTypeMock: AppearanceSettingsTableViewType {
    init() { }


    private(set) var setSectionsCallCount = 0
    var setSectionsHandler: (([AppearanceSettingsSection]) -> ())?
    func setSections(_ sections: [AppearanceSettingsSection])  {
        setSectionsCallCount += 1
        if let setSectionsHandler = setSectionsHandler {
            setSectionsHandler(sections)
        }
        
    }
}

class ContentListPresenterTypeMock: ContentListPresenterType {
    init() { }
    init(view: ContentListViewType? = nil, paginationThreshold: Int = 0) {
        self.view = view
        self.paginationThreshold = paginationThreshold
    }


    private(set) var viewSetCallCount = 0
    var view: ContentListViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var paginationThresholdSetCallCount = 0
    var paginationThreshold: Int = 0 { didSet { paginationThresholdSetCallCount += 1 } }

    private(set) var searchBarTappedCallCount = 0
    var searchBarTappedHandler: (() -> ())?
    func searchBarTapped()  {
        searchBarTappedCallCount += 1
        if let searchBarTappedHandler = searchBarTappedHandler {
            searchBarTappedHandler()
        }
        
    }

    private(set) var searchBarTextFieldCanBeginEdittingCallCount = 0
    var searchBarTextFieldCanBeginEdittingHandler: (() -> (Bool))?
    func searchBarTextFieldCanBeginEditting() -> Bool {
        searchBarTextFieldCanBeginEdittingCallCount += 1
        if let searchBarTextFieldCanBeginEdittingHandler = searchBarTextFieldCanBeginEdittingHandler {
            return searchBarTextFieldCanBeginEdittingHandler()
        }
        return false
    }

    private(set) var searchBarTextFieldDidBeginEditingCallCount = 0
    var searchBarTextFieldDidBeginEditingHandler: (() -> ())?
    func searchBarTextFieldDidBeginEditing()  {
        searchBarTextFieldDidBeginEditingCallCount += 1
        if let searchBarTextFieldDidBeginEditingHandler = searchBarTextFieldDidBeginEditingHandler {
            searchBarTextFieldDidBeginEditingHandler()
        }
        
    }

    private(set) var searchBarTextFieldDidEndEditingCallCount = 0
    var searchBarTextFieldDidEndEditingHandler: (() -> ())?
    func searchBarTextFieldDidEndEditing()  {
        searchBarTextFieldDidEndEditingCallCount += 1
        if let searchBarTextFieldDidEndEditingHandler = searchBarTextFieldDidEndEditingHandler {
            searchBarTextFieldDidEndEditingHandler()
        }
        
    }

    private(set) var searchButtonTappedCallCount = 0
    var searchButtonTappedHandler: ((String) -> ())?
    func searchButtonTapped(query: String)  {
        searchButtonTappedCallCount += 1
        if let searchButtonTappedHandler = searchButtonTappedHandler {
            searchButtonTappedHandler(query)
        }
        
    }

    private(set) var searchBarCancelButtonTappedCallCount = 0
    var searchBarCancelButtonTappedHandler: (() -> ())?
    func searchBarCancelButtonTapped()  {
        searchBarCancelButtonTappedCallCount += 1
        if let searchBarCancelButtonTappedHandler = searchBarCancelButtonTappedHandler {
            searchBarCancelButtonTappedHandler()
        }
        
    }

    private(set) var retryButtonTappedCallCount = 0
    var retryButtonTappedHandler: (() -> ())?
    func retryButtonTapped()  {
        retryButtonTappedCallCount += 1
        if let retryButtonTappedHandler = retryButtonTappedHandler {
            retryButtonTappedHandler()
        }
        
    }

    private(set) var didScrollToBottomCallCount = 0
    var didScrollToBottomHandler: (() -> ())?
    func didScrollToBottom()  {
        didScrollToBottomCallCount += 1
        if let didScrollToBottomHandler = didScrollToBottomHandler {
            didScrollToBottomHandler()
        }
        
    }

    private(set) var didSelectCallCount = 0
    var didSelectHandler: ((ContentListItemViewData) -> ())?
    func didSelect(item: ContentListItemViewData)  {
        didSelectCallCount += 1
        if let didSelectHandler = didSelectHandler {
            didSelectHandler(item)
        }
        
    }
}

class ExternalMediaPresenterTypeMock: ExternalMediaPresenterType {
    init() { }
    init(view: WebViewControllerType? = nil) {
        self.view = view
    }


    public private(set) var viewSetCallCount = 0
    public var view: WebViewControllerType? = nil { didSet { viewSetCallCount += 1 } }

    public private(set) var failedToLoadCallCount = 0
    public var failedToLoadHandler: ((Error) -> ())?
    public func failedToLoad(with error: Error)  {
        failedToLoadCallCount += 1
        if let failedToLoadHandler = failedToLoadHandler {
            failedToLoadHandler(error)
        }
        
    }

    private(set) var fetchAndShowExternalAdditionCallCount = 0
    var fetchAndShowExternalAdditionHandler: ((ExternalAdditionIdentifier) -> ())?
    func fetchAndShowExternalAddition(with identifier: ExternalAdditionIdentifier)  {
        fetchAndShowExternalAdditionCallCount += 1
        if let fetchAndShowExternalAdditionHandler = fetchAndShowExternalAdditionHandler {
            fetchAndShowExternalAdditionHandler(identifier)
        }
        
    }

    public private(set) var canNavigateCallCount = 0
    public var canNavigateHandler: ((URL) -> (Bool))?
    public func canNavigate(to url: URL) -> Bool {
        canNavigateCallCount += 1
        if let canNavigateHandler = canNavigateHandler {
            return canNavigateHandler(url)
        }
        return false
    }

    public private(set) var openExternallyCallCount = 0
    public var openExternallyHandler: ((URL) -> ())?
    public func openExternally(url: URL)  {
        openExternallyCallCount += 1
        if let openExternallyHandler = openExternallyHandler {
            openExternallyHandler(url)
        }
        
    }

    private(set) var showExternalAdditionCallCount = 0
    var showExternalAdditionHandler: ((URL, ExternalAddition.Types) -> ())?
    func showExternalAddition(with url: URL, and type: ExternalAddition.Types)  {
        showExternalAdditionCallCount += 1
        if let showExternalAdditionHandler = showExternalAdditionHandler {
            showExternalAdditionHandler(url, type)
        }
        
    }

    private(set) var dismissExternalAdditionCallCount = 0
    var dismissExternalAdditionHandler: (() -> ())?
    func dismissExternalAddition()  {
        dismissExternalAdditionCallCount += 1
        if let dismissExternalAdditionHandler = dismissExternalAdditionHandler {
            dismissExternalAdditionHandler()
        }
        
    }
}

class LibraryUpdaterLegacyCleanerTypeMock: LibraryUpdaterLegacyCleanerType {
    init() { }


    private(set) var cleanupCallCount = 0
    var cleanupHandler: (() -> ())?
    func cleanup()  {
        cleanupCallCount += 1
        if let cleanupHandler = cleanupHandler {
            cleanupHandler()
        }
        
    }
}

class CrashlyticsMonitoringMock: CrashlyticsMonitoring {
    init() { }


    private(set) var logCallCount = 0
    var logHandler: ((String) -> ())?
    func log(_ msg: String)  {
        logCallCount += 1
        if let logHandler = logHandler {
            logHandler(msg)
        }
        
    }

    private(set) var recordCallCount = 0
    var recordHandler: ((Error) -> ())?
    func record(error: Error)  {
        recordCallCount += 1
        if let recordHandler = recordHandler {
            recordHandler(error)
        }
        
    }
}

class InAppPurchaseStorePresenterTypeMock: InAppPurchaseStorePresenterType {
    init() { }
    init(view: InAppPurchaseStoreViewType? = nil) {
        self.view = view
    }


    private(set) var viewSetCallCount = 0
    var view: InAppPurchaseStoreViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var startPurchaseWasTappedCallCount = 0
    var startPurchaseWasTappedHandler: (() -> ())?
    func startPurchaseWasTapped()  {
        startPurchaseWasTappedCallCount += 1
        if let startPurchaseWasTappedHandler = startPurchaseWasTappedHandler {
            startPurchaseWasTappedHandler()
        }
        
    }

    private(set) var restorePurchaseWasTappedCallCount = 0
    var restorePurchaseWasTappedHandler: (() -> ())?
    func restorePurchaseWasTapped()  {
        restorePurchaseWasTappedCallCount += 1
        if let restorePurchaseWasTappedHandler = restorePurchaseWasTappedHandler {
            restorePurchaseWasTappedHandler()
        }
        
    }

    private(set) var linkPurchaseWasTappedCallCount = 0
    var linkPurchaseWasTappedHandler: (() -> ())?
    func linkPurchaseWasTapped()  {
        linkPurchaseWasTappedCallCount += 1
        if let linkPurchaseWasTappedHandler = linkPurchaseWasTappedHandler {
            linkPurchaseWasTappedHandler()
        }
        
    }

    private(set) var cancelSubscriptionWasTappedCallCount = 0
    var cancelSubscriptionWasTappedHandler: (() -> ())?
    func cancelSubscriptionWasTapped()  {
        cancelSubscriptionWasTappedCallCount += 1
        if let cancelSubscriptionWasTappedHandler = cancelSubscriptionWasTappedHandler {
            cancelSubscriptionWasTappedHandler()
        }
        
    }

    private(set) var contactSupportWasTappedCallCount = 0
    var contactSupportWasTappedHandler: (() -> ())?
    func contactSupportWasTapped()  {
        contactSupportWasTappedCallCount += 1
        if let contactSupportWasTappedHandler = contactSupportWasTappedHandler {
            contactSupportWasTappedHandler()
        }
        
    }

    private(set) var retryWasTappedCallCount = 0
    var retryWasTappedHandler: (() -> ())?
    func retryWasTapped()  {
        retryWasTappedCallCount += 1
        if let retryWasTappedHandler = retryWasTappedHandler {
            retryWasTappedHandler()
        }
        
    }

    private(set) var pageDidChangeCallCount = 0
    var pageDidChangeHandler: ((Int) -> ())?
    func pageDidChange(_ page: Int)  {
        pageDidChangeCallCount += 1
        if let pageDidChangeHandler = pageDidChangeHandler {
            pageDidChangeHandler(page)
        }
        
    }
}

class MonographRepositoryTypeMock: MonographRepositoryType {
    init() { }


    private(set) var monographCallCount = 0
    var monographHandler: ((MonographIdentifier, @escaping(Result<Monograph, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func monograph(with id: MonographIdentifier, completion: @escaping(Result<Monograph, NetworkError<EmptyAPIError>>) -> Void)  {
        monographCallCount += 1
        if let monographHandler = monographHandler {
            monographHandler(id, completion)
        }
        
    }
}

class UsagePurposeViewTypeMock: UsagePurposeViewType {
    init() { }


    private(set) var setUsagePurposesCallCount = 0
    var setUsagePurposesHandler: (([UsagePurpose]) -> ())?
    func setUsagePurposes(_ usagePurposes: [UsagePurpose])  {
        setUsagePurposesCallCount += 1
        if let setUsagePurposesHandler = setUsagePurposesHandler {
            setUsagePurposesHandler(usagePurposes)
        }
        
    }
}

class PharmaUpdaterTypeMock: PharmaUpdaterType {
    init() { }
    init(currentVersion: Version) {
        self._currentVersion = currentVersion
    }


    static private(set) var dbFilenameInArchiveSetCallCount = 0
    static private var _dbFilenameInArchive: String = "" { didSet { dbFilenameInArchiveSetCallCount += 1 } }
    static var dbFilenameInArchive: String {
        get { return _dbFilenameInArchive }
        set { _dbFilenameInArchive = newValue }
    }

    private(set) var currentVersionSetCallCount = 0
    private var _currentVersion: Version!  { didSet { currentVersionSetCallCount += 1 } }
    var currentVersion: Version {
        get { return _currentVersion }
        set { _currentVersion = newValue }
    }

    private(set) var checkForUpdateCallCount = 0
    var checkForUpdateHandler: ((@escaping (Result<PharmaUpdate?, PharmaUpdaterError>) -> Void) -> ())?
    func checkForUpdate(completion: @escaping (Result<PharmaUpdate?, PharmaUpdaterError>) -> Void)  {
        checkForUpdateCallCount += 1
        if let checkForUpdateHandler = checkForUpdateHandler {
            checkForUpdateHandler(completion)
        }
        
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((Bool, @escaping (Double) -> Void, @escaping (Result<URL, PharmaUpdaterError>) -> Void) -> ())?
    func update(isUserTriggeredUpdate: Bool, progressHandler: @escaping (Double) -> Void, completionHandler: @escaping (Result<URL, PharmaUpdaterError>) -> Void)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(isUserTriggeredUpdate, progressHandler, completionHandler)
        }
        
    }

    private(set) var cancelCallCount = 0
    var cancelHandler: (() -> ())?
    func cancel()  {
        cancelCallCount += 1
        if let cancelHandler = cancelHandler {
            cancelHandler()
        }
        
    }
}

class SnippetViewTypeMock: SnippetViewType {
    init() { }


    private(set) var setViewDataCallCount = 0
    var setViewDataHandler: ((Snippet, Deeplink) -> ())?
    func setViewData(_ snippet: Snippet, for deeplink: Deeplink)  {
        setViewDataCallCount += 1
        if let setViewDataHandler = setViewDataHandler {
            setViewDataHandler(snippet, deeplink)
        }
        
    }
}

public class WebViewControllerTypeMock: WebViewControllerType {
    public init() { }


    public private(set) var setIsLoadingCallCount = 0
    public var setIsLoadingHandler: ((Bool) -> ())?
    public func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    public private(set) var showErrorCallCount = 0
    public var showErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    public func showError(_ error: PresentableMessageType, actions: [MessageAction])  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(error, actions)
        }
        
    }

    public private(set) var loadRequestCallCount = 0
    public var loadRequestHandler: ((URLRequest) -> ())?
    public func loadRequest(_ request: URLRequest)  {
        loadRequestCallCount += 1
        if let loadRequestHandler = loadRequestHandler {
            loadRequestHandler(request)
        }
        
    }

    public private(set) var loadHTMLCallCount = 0
    public var loadHTMLHandler: ((String) -> ())?
    public func loadHTML(_ html: String)  {
        loadHTMLCallCount += 1
        if let loadHTMLHandler = loadHTMLHandler {
            loadHTMLHandler(html)
        }
        
    }
}

class AuthenticationCoordinatorTypeMock: AuthenticationCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var goToUserStageSelectionCallCount = 0
    var goToUserStageSelectionHandler: (() -> ())?
    func goToUserStageSelection()  {
        goToUserStageSelectionCallCount += 1
        if let goToUserStageSelectionHandler = goToUserStageSelectionHandler {
            goToUserStageSelectionHandler()
        }
        
    }

    private(set) var goToPurposeSelectionCallCount = 0
    var goToPurposeSelectionHandler: (() -> ())?
    func goToPurposeSelection()  {
        goToPurposeSelectionCallCount += 1
        if let goToPurposeSelectionHandler = goToPurposeSelectionHandler {
            goToPurposeSelectionHandler()
        }
        
    }

    private(set) var goToStudyObjectiveSelectionCallCount = 0
    var goToStudyObjectiveSelectionHandler: (() -> ())?
    func goToStudyObjectiveSelection()  {
        goToStudyObjectiveSelectionCallCount += 1
        if let goToStudyObjectiveSelectionHandler = goToStudyObjectiveSelectionHandler {
            goToStudyObjectiveSelectionHandler()
        }
        
    }

    private(set) var goToRegistrationCallCount = 0
    var goToRegistrationHandler: (() -> ())?
    func goToRegistration()  {
        goToRegistrationCallCount += 1
        if let goToRegistrationHandler = goToRegistrationHandler {
            goToRegistrationHandler()
        }
        
    }

    private(set) var goToLoginCallCount = 0
    var goToLoginHandler: ((String?, String?) -> ())?
    func goToLogin(email: String?, password: String?)  {
        goToLoginCallCount += 1
        if let goToLoginHandler = goToLoginHandler {
            goToLoginHandler(email, password)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var goToUrlCallCount = 0
    var goToUrlHandler: ((URL) -> ())?
    func goToUrl(_ url: URL)  {
        goToUrlCallCount += 1
        if let goToUrlHandler = goToUrlHandler {
            goToUrlHandler(url)
        }
        
    }

    private(set) var finishCallCount = 0
    var finishHandler: (() -> ())?
    func finish()  {
        finishCallCount += 1
        if let finishHandler = finishHandler {
            finishHandler()
        }
        
    }
}

class SearchSuggestionRepositoryTypeMock: SearchSuggestionRepositoryType {
    init() { }


    private(set) var suggestionsCallCount = 0
    var suggestionsHandler: ((String, @escaping (SearchSuggestionResult) -> Void) -> ())?
    func suggestions(for text: String, completion: @escaping (SearchSuggestionResult) -> Void)  {
        suggestionsCallCount += 1
        if let suggestionsHandler = suggestionsHandler {
            suggestionsHandler(text, completion)
        }
        
    }
}

class GalleryRepositoryTypeMock: GalleryRepositoryType {
    init() { }


    private(set) var galleryCallCount = 0
    var galleryHandler: ((GalleryIdentifier) throws -> (Gallery))?
    func gallery(with identifier: GalleryIdentifier) throws -> Gallery {
        galleryCallCount += 1
        if let galleryHandler = galleryHandler {
            return try galleryHandler(identifier)
        }
        fatalError("galleryHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var imageResourceCallCount = 0
    var imageResourceHandler: ((ImageResourceIdentifier) throws -> (ImageResourceType))?
    func imageResource(for identifier: ImageResourceIdentifier) throws -> ImageResourceType {
        imageResourceCallCount += 1
        if let imageResourceHandler = imageResourceHandler {
            return try imageResourceHandler(identifier)
        }
        fatalError("imageResourceHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var externalAdditionsForImageCallCount = 0
    var externalAdditionsForImageHandler: ((GalleryDeeplink) throws -> ([ExternalAddition]))?
    func externalAdditionsForImage(at galleryDeeplink: GalleryDeeplink) throws -> [ExternalAddition] {
        externalAdditionsForImageCallCount += 1
        if let externalAdditionsForImageHandler = externalAdditionsForImageHandler {
            return try externalAdditionsForImageHandler(galleryDeeplink)
        }
        return [ExternalAddition]()
    }

    private(set) var hasPlaceholderImageCallCount = 0
    var hasPlaceholderImageHandler: ((GalleryDeeplink) throws -> (Bool))?
    func hasPlaceholderImage(for galleryDeeplink: GalleryDeeplink) throws -> Bool {
        hasPlaceholderImageCallCount += 1
        if let hasPlaceholderImageHandler = hasPlaceholderImageHandler {
            return try hasPlaceholderImageHandler(galleryDeeplink)
        }
        return false
    }

    private(set) var primaryExternalAdditionCallCount = 0
    var primaryExternalAdditionHandler: ((GalleryDeeplink) -> (ExternalAddition?))?
    func primaryExternalAddition(for galleryDeeplink: GalleryDeeplink) -> ExternalAddition? {
        primaryExternalAdditionCallCount += 1
        if let primaryExternalAdditionHandler = primaryExternalAdditionHandler {
            return primaryExternalAdditionHandler(galleryDeeplink)
        }
        return nil
    }

    private(set) var loadImageCallCount = 0
    var loadImageHandler: ((ImageReference, @escaping (Result<UIImage, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func loadImage(for reference: ImageReference, completion: @escaping (Result<UIImage, NetworkError<EmptyAPIError>>) -> Void)  {
        loadImageCallCount += 1
        if let loadImageHandler = loadImageHandler {
            loadImageHandler(reference, completion)
        }
        
    }
}

class PharmaViewTypeMock: PharmaViewType {
    init() { }


    private(set) var setDataCallCount = 0
    var setDataHandler: ((PharmaViewData) -> ())?
    func setData(for pharmaViewData: PharmaViewData)  {
        setDataCallCount += 1
        if let setDataHandler = setDataHandler {
            setDataHandler(pharmaViewData)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentMessage(_ message: PresentableMessageType, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message, actions)
        }
        
    }
}

public class RegistrationViewTypeMock: RegistrationViewType {
    public init() { }


    public private(set) var setIsLoadingCallCount = 0
    public var setIsLoadingHandler: ((Bool) -> ())?
    public func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    public private(set) var showEmailInformationLabelCallCount = 0
    public var showEmailInformationLabelHandler: ((String) -> ())?
    public func showEmailInformationLabel(text: String)  {
        showEmailInformationLabelCallCount += 1
        if let showEmailInformationLabelHandler = showEmailInformationLabelHandler {
            showEmailInformationLabelHandler(text)
        }
        
    }

    public private(set) var setButtonTitleCallCount = 0
    public var setButtonTitleHandler: ((String) -> ())?
    public func setButtonTitle(text: String)  {
        setButtonTitleCallCount += 1
        if let setButtonTitleHandler = setButtonTitleHandler {
            setButtonTitleHandler(text)
        }
        
    }

    public private(set) var presentMessageCallCount = 0
    public var presentMessageHandler: ((PresentableMessageType) -> ())?
    public func presentMessage(_ message: PresentableMessageType)  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message)
        }
        
    }
}

class LibraryViewTypeMock: LibraryViewType {
    init() { }


    private(set) var setTitleCallCount = 0
    var setTitleHandler: ((String?) -> ())?
    func setTitle(_ title: String?)  {
        setTitleCallCount += 1
        if let setTitleHandler = setTitleHandler {
            setTitleHandler(title)
        }
        
    }

    private(set) var setLearningCardTreeItemsCallCount = 0
    var setLearningCardTreeItemsHandler: (([LearningCardTreeItem]) -> ())?
    func setLearningCardTreeItems(_ learningCardTreeItems: [LearningCardTreeItem])  {
        setLearningCardTreeItemsCallCount += 1
        if let setLearningCardTreeItemsHandler = setLearningCardTreeItemsHandler {
            setLearningCardTreeItemsHandler(learningCardTreeItems)
        }
        
    }

    private(set) var setIsSyncingCallCount = 0
    var setIsSyncingHandler: ((Bool) -> ())?
    func setIsSyncing(_ isSyncing: Bool)  {
        setIsSyncingCallCount += 1
        if let setIsSyncingHandler = setIsSyncingHandler {
            setIsSyncingHandler(isSyncing)
        }
        
    }
}

class PharmaPresenterDelegateMock: PharmaPresenterDelegate {
    init() { }


    private(set) var shouldShowSnippetCallCount = 0
    var shouldShowSnippetHandler: ((SnippetIdentifier) -> ())?
    func shouldShowSnippet(for snippetIdentifier: SnippetIdentifier)  {
        shouldShowSnippetCallCount += 1
        if let shouldShowSnippetHandler = shouldShowSnippetHandler {
            shouldShowSnippetHandler(snippetIdentifier)
        }
        
    }

    private(set) var shouldShowDrugListCallCount = 0
    var shouldShowDrugListHandler: (() -> ())?
    func shouldShowDrugList()  {
        shouldShowDrugListCallCount += 1
        if let shouldShowDrugListHandler = shouldShowDrugListHandler {
            shouldShowDrugListHandler()
        }
        
    }

    private(set) var shouldSwitchPocketCardToCallCount = 0
    var shouldSwitchPocketCardToHandler: ((String) -> ())?
    func shouldSwitchPocketCardTo(anchor: String)  {
        shouldSwitchPocketCardToCallCount += 1
        if let shouldSwitchPocketCardToHandler = shouldSwitchPocketCardToHandler {
            shouldSwitchPocketCardToHandler(anchor)
        }
        
    }

    private(set) var shouldShowPricesAndPackageSizesCallCount = 0
    var shouldShowPricesAndPackageSizesHandler: (() -> ())?
    func shouldShowPricesAndPackageSizes()  {
        shouldShowPricesAndPackageSizesCallCount += 1
        if let shouldShowPricesAndPackageSizesHandler = shouldShowPricesAndPackageSizesHandler {
            shouldShowPricesAndPackageSizesHandler()
        }
        
    }
}

class PriceAndPackageViewTypeMock: PriceAndPackageViewType {
    init() { }


    private(set) var loadCallCount = 0
    var loadHandler: (([PriceAndPackage]) -> ())?
    func load(data: [PriceAndPackage])  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(data)
        }
        
    }
}

class SettingsViewTypeMock: SettingsViewType {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: (([Settings.Section]) -> ())?
    func set(sections: [Settings.Section])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(sections)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((String, [MessageAction]) -> ())?
    func presentMessage(_ title: String, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(title, actions)
        }
        
    }
}

class AccountSettingsViewTypeMock: AccountSettingsViewType {
    init() { }


    private(set) var setEmailCallCount = 0
    var setEmailHandler: ((String) -> ())?
    func setEmail(_ email: String)  {
        setEmailCallCount += 1
        if let setEmailHandler = setEmailHandler {
            setEmailHandler(email)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((String, String, [MessageAction]) -> ())?
    func presentMessage(title: String, message: String, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(title, message, actions)
        }
        
    }
}

class LearningCardOptionsViewTypeMock: LearningCardOptionsViewType {
    init() { }


    private(set) var setShareButtonCallCount = 0
    var setShareButtonHandler: ((String, UIImage, Bool) -> ())?
    func setShareButton(title: String, image: UIImage, isEnabled: Bool)  {
        setShareButtonCallCount += 1
        if let setShareButtonHandler = setShareButtonHandler {
            setShareButtonHandler(title, image, isEnabled)
        }
        
    }

    private(set) var setLearnedButtonCallCount = 0
    var setLearnedButtonHandler: ((String, UIImage, Bool) -> ())?
    func setLearnedButton(title: String, image: UIImage, isEnabled: Bool)  {
        setLearnedButtonCallCount += 1
        if let setLearnedButtonHandler = setLearnedButtonHandler {
            setLearnedButtonHandler(title, image, isEnabled)
        }
        
    }

    private(set) var setQbankButtonCallCount = 0
    var setQbankButtonHandler: ((String, UIImage, Bool) -> ())?
    func setQbankButton(title: String, image: UIImage, isEnabled: Bool)  {
        setQbankButtonCallCount += 1
        if let setQbankButtonHandler = setQbankButtonHandler {
            setQbankButtonHandler(title, image, isEnabled)
        }
        
    }

    private(set) var setHighlightingSwitchCallCount = 0
    var setHighlightingSwitchHandler: ((String, String, Bool, Bool) -> ())?
    func setHighlightingSwitch(title: String, subtitle: String, isOn: Bool, isEnabled: Bool)  {
        setHighlightingSwitchCallCount += 1
        if let setHighlightingSwitchHandler = setHighlightingSwitchHandler {
            setHighlightingSwitchHandler(title, subtitle, isOn, isEnabled)
        }
        
    }

    private(set) var setHighYieldModeSwitchCallCount = 0
    var setHighYieldModeSwitchHandler: ((String, String, Bool, Bool) -> ())?
    func setHighYieldModeSwitch(title: String, subtitle: String, isOn: Bool, isEnabled: Bool)  {
        setHighYieldModeSwitchCallCount += 1
        if let setHighYieldModeSwitchHandler = setHighYieldModeSwitchHandler {
            setHighYieldModeSwitchHandler(title, subtitle, isOn, isEnabled)
        }
        
    }

    private(set) var setPhysikumFokusSwitchCallCount = 0
    var setPhysikumFokusSwitchHandler: ((String, String, Bool, Bool) -> ())?
    func setPhysikumFokusSwitch(title: String, subtitle: String, isOn: Bool, isEnabled: Bool)  {
        setPhysikumFokusSwitchCallCount += 1
        if let setPhysikumFokusSwitchHandler = setPhysikumFokusSwitchHandler {
            setPhysikumFokusSwitchHandler(title, subtitle, isOn, isEnabled)
        }
        
    }

    private(set) var setLearningRadarSwitchCallCount = 0
    var setLearningRadarSwitchHandler: ((String, String, Bool, Bool) -> ())?
    func setLearningRadarSwitch(title: String, subtitle: String, isOn: Bool, isEnabled: Bool)  {
        setLearningRadarSwitchCallCount += 1
        if let setLearningRadarSwitchHandler = setLearningRadarSwitchHandler {
            setLearningRadarSwitchHandler(title, subtitle, isOn, isEnabled)
        }
        
    }

    private(set) var setModeCalloutCallCount = 0
    var setModeCalloutHandler: ((NSAttributedString, Bool) -> ())?
    func setModeCallout(text: NSAttributedString, isVisible: Bool)  {
        setModeCalloutCallCount += 1
        if let setModeCalloutHandler = setModeCalloutHandler {
            setModeCalloutHandler(text, isVisible)
        }
        
    }

    private(set) var setFontSizeCallCount = 0
    var setFontSizeHandler: ((String, Float) -> ())?
    func setFontSize(title: String, value: Float)  {
        setFontSizeCallCount += 1
        if let setFontSizeHandler = setFontSizeHandler {
            setFontSizeHandler(title, value)
        }
        
    }

    private(set) var updatePreferredContentSizeCallCount = 0
    var updatePreferredContentSizeHandler: (() -> ())?
    func updatePreferredContentSize()  {
        updatePreferredContentSizeCallCount += 1
        if let updatePreferredContentSizeHandler = updatePreferredContentSizeHandler {
            updatePreferredContentSizeHandler()
        }
        
    }
}

class StudyObjectiveViewTypeMock: StudyObjectiveViewType {
    init() { }


    private(set) var setStudyObjectivesCallCount = 0
    var setStudyObjectivesHandler: (([StudyObjective]) -> ())?
    func setStudyObjectives(_ studyObjectives: [StudyObjective])  {
        setStudyObjectivesCallCount += 1
        if let setStudyObjectivesHandler = setStudyObjectivesHandler {
            setStudyObjectivesHandler(studyObjectives)
        }
        
    }

    private(set) var setCurrentStudyObjectiveCallCount = 0
    var setCurrentStudyObjectiveHandler: ((String) -> ())?
    func setCurrentStudyObjective(withId id: String)  {
        setCurrentStudyObjectiveCallCount += 1
        if let setCurrentStudyObjectiveHandler = setCurrentStudyObjectiveHandler {
            setCurrentStudyObjectiveHandler(id)
        }
        
    }

    private(set) var setIsSyncingCallCount = 0
    var setIsSyncingHandler: ((Bool) -> ())?
    func setIsSyncing(_ isSyncing: Bool)  {
        setIsSyncingCallCount += 1
        if let setIsSyncingHandler = setIsSyncingHandler {
            setIsSyncingHandler(isSyncing)
        }
        
    }

    private(set) var presentStudyObjectiveSubviewErrorCallCount = 0
    var presentStudyObjectiveSubviewErrorHandler: ((PresentableMessageType) -> ())?
    func presentStudyObjectiveSubviewError(_ error: PresentableMessageType)  {
        presentStudyObjectiveSubviewErrorCallCount += 1
        if let presentStudyObjectiveSubviewErrorHandler = presentStudyObjectiveSubviewErrorHandler {
            presentStudyObjectiveSubviewErrorHandler(error)
        }
        
    }

    private(set) var presentStudyObjectiveAlertErrorCallCount = 0
    var presentStudyObjectiveAlertErrorHandler: ((PresentableMessageType) -> ())?
    func presentStudyObjectiveAlertError(_ error: PresentableMessageType)  {
        presentStudyObjectiveAlertErrorCallCount += 1
        if let presentStudyObjectiveAlertErrorHandler = presentStudyObjectiveAlertErrorHandler {
            presentStudyObjectiveAlertErrorHandler(error)
        }
        
    }

    private(set) var setBottomButtonIsEnabledCallCount = 0
    var setBottomButtonIsEnabledHandler: ((Bool) -> ())?
    func setBottomButtonIsEnabled(_ isEnabled: Bool)  {
        setBottomButtonIsEnabledCallCount += 1
        if let setBottomButtonIsEnabledHandler = setBottomButtonIsEnabledHandler {
            setBottomButtonIsEnabledHandler(isEnabled)
        }
        
    }

    private(set) var setBottomButtonTitleCallCount = 0
    var setBottomButtonTitleHandler: ((String) -> ())?
    func setBottomButtonTitle(_ title: String)  {
        setBottomButtonTitleCallCount += 1
        if let setBottomButtonTitleHandler = setBottomButtonTitleHandler {
            setBottomButtonTitleHandler(title)
        }
        
    }
}

class AdjustTypeMock: AdjustType {
    init() { }


    static private(set) var isEnabledCallCount = 0
    static var isEnabledHandler: (() -> (Bool))?
    static func isEnabled() -> Bool {
        isEnabledCallCount += 1
        if let isEnabledHandler = isEnabledHandler {
            return isEnabledHandler()
        }
        return false
    }

    static private(set) var setEnabledCallCount = 0
    static var setEnabledHandler: ((Bool) -> ())?
    static func setEnabled(_ enabled: Bool)  {
        setEnabledCallCount += 1
        if let setEnabledHandler = setEnabledHandler {
            setEnabledHandler(enabled)
        }
        
    }

    static private(set) var appDidLaunchCallCount = 0
    static var appDidLaunchHandler: ((ADJConfig?) -> ())?
    static func appDidLaunch(_ adjustConfig: ADJConfig?)  {
        appDidLaunchCallCount += 1
        if let appDidLaunchHandler = appDidLaunchHandler {
            appDidLaunchHandler(adjustConfig)
        }
        
    }

    static private(set) var requestTrackingAuthorizationCallCount = 0
    static var requestTrackingAuthorizationHandler: ((((UInt) -> Void)?) -> ())?
    static func requestTrackingAuthorization(completionHandler completion: ((UInt) -> Void)?)  {
        requestTrackingAuthorizationCallCount += 1
        if let requestTrackingAuthorizationHandler = requestTrackingAuthorizationHandler {
            requestTrackingAuthorizationHandler(completion)
        }
        
    }

    static private(set) var addSessionPartnerParameterCallCount = 0
    static var addSessionPartnerParameterHandler: ((String, String) -> ())?
    static func addSessionPartnerParameter(_ key: String, value: String)  {
        addSessionPartnerParameterCallCount += 1
        if let addSessionPartnerParameterHandler = addSessionPartnerParameterHandler {
            addSessionPartnerParameterHandler(key, value)
        }
        
    }

    static private(set) var removeSessionPartnerParameterCallCount = 0
    static var removeSessionPartnerParameterHandler: ((String) -> ())?
    static func removeSessionPartnerParameter(_ key: String)  {
        removeSessionPartnerParameterCallCount += 1
        if let removeSessionPartnerParameterHandler = removeSessionPartnerParameterHandler {
            removeSessionPartnerParameterHandler(key)
        }
        
    }
}

class InAppPurchaseApplicationServiceTypeMock: InAppPurchaseApplicationServiceType {
    init() { }
    init(storeState: InAppPurchaseStoreState) {
        self._storeState = storeState
    }


    private(set) var storeStateSetCallCount = 0
    private var _storeState: InAppPurchaseStoreState!  { didSet { storeStateSetCallCount += 1 } }
    var storeState: InAppPurchaseStoreState {
        get { return _storeState }
        set { _storeState = newValue }
    }

    private(set) var purchaseInfoCallCount = 0
    var purchaseInfoHandler: (() -> (InAppPurchaseInfo))?
    func purchaseInfo() -> InAppPurchaseInfo {
        purchaseInfoCallCount += 1
        if let purchaseInfoHandler = purchaseInfoHandler {
            return purchaseInfoHandler()
        }
        fatalError("purchaseInfoHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var updateStoreStateCallCount = 0
    var updateStoreStateHandler: (() -> ())?
    func updateStoreState()  {
        updateStoreStateCallCount += 1
        if let updateStoreStateHandler = updateStoreStateHandler {
            updateStoreStateHandler()
        }
        
    }

    private(set) var buyAndLinkCallCount = 0
    var buyAndLinkHandler: ((@escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func buyAndLink(completion: @escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void)  {
        buyAndLinkCallCount += 1
        if let buyAndLinkHandler = buyAndLinkHandler {
            buyAndLinkHandler(completion)
        }
        
    }

    private(set) var restoreAndLinkCallCount = 0
    var restoreAndLinkHandler: ((@escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func restoreAndLink(completion: @escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void)  {
        restoreAndLinkCallCount += 1
        if let restoreAndLinkHandler = restoreAndLinkHandler {
            restoreAndLinkHandler(completion)
        }
        
    }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var linkCallCount = 0
    var linkHandler: ((@escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func link(completion: @escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void)  {
        linkCallCount += 1
        if let linkHandler = linkHandler {
            linkHandler(completion)
        }
        
    }

    private(set) var completeAndLinkTransactionsCallCount = 0
    var completeAndLinkTransactionsHandler: ((@escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func completeAndLinkTransactions(completion: @escaping (Result<Void, InAppPurchaseApplicationServiceError>) -> Void)  {
        completeAndLinkTransactionsCallCount += 1
        if let completeAndLinkTransactionsHandler = completeAndLinkTransactionsHandler {
            completeAndLinkTransactionsHandler(completion)
        }
        
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var updateProductMetadataCallCount = 0
    var updateProductMetadataHandler: ((@escaping (InAppPurchaseApplicationServiceError?) -> Void) -> ())?
    func updateProductMetadata(completion: @escaping (InAppPurchaseApplicationServiceError?) -> Void)  {
        updateProductMetadataCallCount += 1
        if let updateProductMetadataHandler = updateProductMetadataHandler {
            updateProductMetadataHandler(completion)
        }
        
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class InAppPurchaseStoreViewTypeMock: InAppPurchaseStoreViewType {
    init() { }


    private(set) var presentErrorCallCount = 0
    var presentErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentError(_ error: PresentableMessageType, _ actions: [MessageAction])  {
        presentErrorCallCount += 1
        if let presentErrorHandler = presentErrorHandler {
            presentErrorHandler(error, actions)
        }
        
    }

    private(set) var setLoadingCallCount = 0
    var setLoadingHandler: (() -> ())?
    func setLoading()  {
        setLoadingCallCount += 1
        if let setLoadingHandler = setLoadingHandler {
            setLoadingHandler()
        }
        
    }

    private(set) var setReadyToBuyCallCount = 0
    var setReadyToBuyHandler: ((String, String?, @escaping () -> Void, @escaping () -> Void) -> ())?
    func setReadyToBuy(localizedPrice: String, offer: String?, subscribeAction: @escaping () -> Void, reactivateAction: @escaping () -> Void)  {
        setReadyToBuyCallCount += 1
        if let setReadyToBuyHandler = setReadyToBuyHandler {
            setReadyToBuyHandler(localizedPrice, offer, subscribeAction, reactivateAction)
        }
        
    }

    private(set) var setUnlinkedInAppPurchaseSubscriptionCallCount = 0
    var setUnlinkedInAppPurchaseSubscriptionHandler: ((@escaping () -> Void, @escaping () -> Void) -> ())?
    func setUnlinkedInAppPurchaseSubscription(connectAction: @escaping () -> Void, cancelAction: @escaping () -> Void)  {
        setUnlinkedInAppPurchaseSubscriptionCallCount += 1
        if let setUnlinkedInAppPurchaseSubscriptionHandler = setUnlinkedInAppPurchaseSubscriptionHandler {
            setUnlinkedInAppPurchaseSubscriptionHandler(connectAction, cancelAction)
        }
        
    }

    private(set) var setActiveInAppPurchaseSubscriptionCallCount = 0
    var setActiveInAppPurchaseSubscriptionHandler: ((@escaping () -> Void) -> ())?
    func setActiveInAppPurchaseSubscription(buttonAction: @escaping () -> Void)  {
        setActiveInAppPurchaseSubscriptionCallCount += 1
        if let setActiveInAppPurchaseSubscriptionHandler = setActiveInAppPurchaseSubscriptionHandler {
            setActiveInAppPurchaseSubscriptionHandler(buttonAction)
        }
        
    }

    private(set) var setActiveExternalSubscriptionCallCount = 0
    var setActiveExternalSubscriptionHandler: (() -> ())?
    func setActiveExternalSubscription()  {
        setActiveExternalSubscriptionCallCount += 1
        if let setActiveExternalSubscriptionHandler = setActiveExternalSubscriptionHandler {
            setActiveExternalSubscriptionHandler()
        }
        
    }

    private(set) var showGenericErrorCallCount = 0
    var showGenericErrorHandler: (() -> ())?
    func showGenericError()  {
        showGenericErrorCallCount += 1
        if let showGenericErrorHandler = showGenericErrorHandler {
            showGenericErrorHandler()
        }
        
    }
}

public class UserStageViewTypeMock: UserStageViewType {
    public init() { }


    public private(set) var setViewDataCallCount = 0
    public var setViewDataHandler: ((UserStageViewData) -> ())?
    public func setViewData(_ viewData: UserStageViewData)  {
        setViewDataCallCount += 1
        if let setViewDataHandler = setViewDataHandler {
            setViewDataHandler(viewData)
        }
        
    }

    public private(set) var selectUserStageCallCount = 0
    public var selectUserStageHandler: ((UserStage) -> ())?
    public func selectUserStage(_ userStage: UserStage)  {
        selectUserStageCallCount += 1
        if let selectUserStageHandler = selectUserStageHandler {
            selectUserStageHandler(userStage)
        }
        
    }

    public private(set) var setDisclaimerCallCount = 0
    public var setDisclaimerHandler: ((UserStageViewData.DisclaimerState, @escaping () -> Void) -> ())?
    public func setDisclaimer(_ visibility: UserStageViewData.DisclaimerState, completion: @escaping () -> Void)  {
        setDisclaimerCallCount += 1
        if let setDisclaimerHandler = setDisclaimerHandler {
            setDisclaimerHandler(visibility, completion)
        }
        
    }

    public private(set) var setIsLoadingCallCount = 0
    public var setIsLoadingHandler: ((Bool) -> ())?
    public func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    public private(set) var presentMessageCallCount = 0
    public var presentMessageHandler: ((PresentableMessageType) -> ())?
    public func presentMessage(_ message: PresentableMessageType)  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message)
        }
        
    }

    public private(set) var showSaveNotificationCallCount = 0
    public var showSaveNotificationHandler: (() -> ())?
    public func showSaveNotification()  {
        showSaveNotificationCallCount += 1
        if let showSaveNotificationHandler = showSaveNotificationHandler {
            showSaveNotificationHandler()
        }
        
    }
}

class LibrariesSettingsViewTypeMock: LibrariesSettingsViewType {
    init() { }


    private(set) var setStateCallCount = 0
    var setStateHandler: ((LibrariesSettingsStateViewData) -> ())?
    func setState(_ state: LibrariesSettingsStateViewData)  {
        setStateCallCount += 1
        if let setStateHandler = setStateHandler {
            setStateHandler(state)
        }
        
    }

    private(set) var setIsLibraryAutoUpdateEnabledCallCount = 0
    var setIsLibraryAutoUpdateEnabledHandler: ((Bool) -> ())?
    func setIsLibraryAutoUpdateEnabled(_ isAutoUpdateEnabled: Bool)  {
        setIsLibraryAutoUpdateEnabledCallCount += 1
        if let setIsLibraryAutoUpdateEnabledHandler = setIsLibraryAutoUpdateEnabledHandler {
            setIsLibraryAutoUpdateEnabledHandler(isAutoUpdateEnabled)
        }
        
    }

    private(set) var setIsPharmaAutoUpdateEnabledCallCount = 0
    var setIsPharmaAutoUpdateEnabledHandler: ((Bool) -> ())?
    func setIsPharmaAutoUpdateEnabled(_ isAutoUpdateEnabled: Bool)  {
        setIsPharmaAutoUpdateEnabledCallCount += 1
        if let setIsPharmaAutoUpdateEnabledHandler = setIsPharmaAutoUpdateEnabledHandler {
            setIsPharmaAutoUpdateEnabledHandler(isAutoUpdateEnabled)
        }
        
    }

    private(set) var removePharmaDataCallCount = 0
    var removePharmaDataHandler: (() -> ())?
    func removePharmaData()  {
        removePharmaDataCallCount += 1
        if let removePharmaDataHandler = removePharmaDataHandler {
            removePharmaDataHandler()
        }
        
    }

    private(set) var setPharmaDatabaseDeletableCallCount = 0
    var setPharmaDatabaseDeletableHandler: ((Bool) -> ())?
    func setPharmaDatabaseDeletable(_ isDeletable: Bool)  {
        setPharmaDatabaseDeletableCallCount += 1
        if let setPharmaDatabaseDeletableHandler = setPharmaDatabaseDeletableHandler {
            setPharmaDatabaseDeletableHandler(isDeletable)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentMessage(_ message: PresentableMessageType, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message, actions)
        }
        
    }
}

class RootCoordinatorTypeMock: RootCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((Deeplink) -> ())?
    func navigate(to deepLink: Deeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(deepLink)
        }
        
    }

    private(set) var navigateToTagListCallCount = 0
    var navigateToTagListHandler: ((Tag) -> ())?
    func navigateToTagList(with type: Tag)  {
        navigateToTagListCallCount += 1
        if let navigateToTagListHandler = navigateToTagListHandler {
            navigateToTagListHandler(type)
        }
        
    }

    private(set) var showStartupDialogsCallCount = 0
    var showStartupDialogsHandler: (() -> ())?
    func showStartupDialogs()  {
        showStartupDialogsCallCount += 1
        if let showStartupDialogsHandler = showStartupDialogsHandler {
            showStartupDialogsHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }
}

class SearchPresenterTypeMock: SearchPresenterType {
    init() { }
    init(view: SearchViewType? = nil, lastSelectedSearchScope: SearchScope? = nil) {
        self.view = view
        self.lastSelectedSearchScope = lastSelectedSearchScope
    }


    private(set) var viewSetCallCount = 0
    var view: SearchViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var lastSelectedSearchScopeSetCallCount = 0
    var lastSelectedSearchScope: SearchScope? = nil { didSet { lastSelectedSearchScopeSetCallCount += 1 } }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((SearchDeeplink) -> ())?
    func navigate(to searchDeepLink: SearchDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(searchDeepLink)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((UncommitedSearchDeeplink) -> ())?
    func navigate(to searchDeepLink: UncommitedSearchDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(searchDeepLink)
        }
        
    }

    private(set) var searchBarTextDidChangeCallCount = 0
    var searchBarTextDidChangeHandler: ((String) -> ())?
    func searchBarTextDidChange(query: String)  {
        searchBarTextDidChangeCallCount += 1
        if let searchBarTextDidChangeHandler = searchBarTextDidChangeHandler {
            searchBarTextDidChangeHandler(query)
        }
        
    }

    private(set) var searchBarClearButtonTappedCallCount = 0
    var searchBarClearButtonTappedHandler: (() -> ())?
    func searchBarClearButtonTapped()  {
        searchBarClearButtonTappedCallCount += 1
        if let searchBarClearButtonTappedHandler = searchBarClearButtonTappedHandler {
            searchBarClearButtonTappedHandler()
        }
        
    }

    private(set) var searchBarTextFieldTappedCallCount = 0
    var searchBarTextFieldTappedHandler: ((String) -> ())?
    func searchBarTextFieldTapped(text: String)  {
        searchBarTextFieldTappedCallCount += 1
        if let searchBarTextFieldTappedHandler = searchBarTextFieldTappedHandler {
            searchBarTextFieldTappedHandler(text)
        }
        
    }

    private(set) var searchBarSearchButtonTappedCallCount = 0
    var searchBarSearchButtonTappedHandler: ((String) -> ())?
    func searchBarSearchButtonTapped(query: String)  {
        searchBarSearchButtonTappedCallCount += 1
        if let searchBarSearchButtonTappedHandler = searchBarSearchButtonTappedHandler {
            searchBarSearchButtonTappedHandler(query)
        }
        
    }

    private(set) var didYouMeanResultTappedCallCount = 0
    var didYouMeanResultTappedHandler: ((String, String) -> ())?
    func didYouMeanResultTapped(searchTerm: String, didYouMean: String)  {
        didYouMeanResultTappedCallCount += 1
        if let didYouMeanResultTappedHandler = didYouMeanResultTappedHandler {
            didYouMeanResultTappedHandler(searchTerm, didYouMean)
        }
        
    }

    private(set) var didSelectCallCount = 0
    var didSelectHandler: ((SearchResultItemViewData, Int, Int?) -> ())?
    func didSelect(searchItem: SearchResultItemViewData, at index: Int, subIndex: Int?)  {
        didSelectCallCount += 1
        if let didSelectHandler = didSelectHandler {
            didSelectHandler(searchItem, index, subIndex)
        }
        
    }

    private(set) var didTapScopeCallCount = 0
    var didTapScopeHandler: ((SearchScope, String) -> ())?
    func didTapScope(_ scope: SearchScope, query: String)  {
        didTapScopeCallCount += 1
        if let didTapScopeHandler = didTapScopeHandler {
            didTapScopeHandler(scope, query)
        }
        
    }

    private(set) var dismissViewCallCount = 0
    var dismissViewHandler: ((String) -> ())?
    func dismissView(query: String)  {
        dismissViewCallCount += 1
        if let dismissViewHandler = dismissViewHandler {
            dismissViewHandler(query)
        }
        
    }

    private(set) var contactUsButtonTappedCallCount = 0
    var contactUsButtonTappedHandler: (() -> ())?
    func contactUsButtonTapped()  {
        contactUsButtonTappedCallCount += 1
        if let contactUsButtonTappedHandler = contactUsButtonTappedHandler {
            contactUsButtonTappedHandler()
        }
        
    }

    private(set) var didScrollToBottomCallCount = 0
    var didScrollToBottomHandler: ((SearchScope) -> ())?
    func didScrollToBottom(with scope: SearchScope)  {
        didScrollToBottomCallCount += 1
        if let didScrollToBottomHandler = didScrollToBottomHandler {
            didScrollToBottomHandler(scope)
        }
        
    }

    private(set) var didTapPhrasionaryTargetCallCount = 0
    var didTapPhrasionaryTargetHandler: ((Int) -> ())?
    func didTapPhrasionaryTarget(at index: Int)  {
        didTapPhrasionaryTargetCallCount += 1
        if let didTapPhrasionaryTargetHandler = didTapPhrasionaryTargetHandler {
            didTapPhrasionaryTargetHandler(index)
        }
        
    }
}

class SearchViewTypeMock: SearchViewType {
    init() { }


    private(set) var showSectionsCallCount = 0
    var showSectionsHandler: (([SearchResultSection], String, SearchScope?) -> ())?
    func showSections(_ sections: [SearchResultSection], searchTerm: String, scope: SearchScope?)  {
        showSectionsCallCount += 1
        if let showSectionsHandler = showSectionsHandler {
            showSectionsHandler(sections, searchTerm, scope)
        }
        
    }

    private(set) var showSectionsScrolledToTopCallCount = 0
    var showSectionsScrolledToTopHandler: (([SearchResultSection], String, SearchScope?) -> ())?
    func showSectionsScrolledToTop(_ sections: [SearchResultSection], searchTerm: String, scope: SearchScope?)  {
        showSectionsScrolledToTopCallCount += 1
        if let showSectionsScrolledToTopHandler = showSectionsScrolledToTopHandler {
            showSectionsScrolledToTopHandler(sections, searchTerm, scope)
        }
        
    }

    private(set) var showIsLoadingCallCount = 0
    var showIsLoadingHandler: ((Bool) -> ())?
    func showIsLoading(_ isLoading: Bool)  {
        showIsLoadingCallCount += 1
        if let showIsLoadingHandler = showIsLoadingHandler {
            showIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var scrollToSelectedMediaFilterCallCount = 0
    var scrollToSelectedMediaFilterHandler: (() -> ())?
    func scrollToSelectedMediaFilter()  {
        scrollToSelectedMediaFilterCallCount += 1
        if let scrollToSelectedMediaFilterHandler = scrollToSelectedMediaFilterHandler {
            scrollToSelectedMediaFilterHandler()
        }
        
    }

    private(set) var setSearchTextFieldTextCallCount = 0
    var setSearchTextFieldTextHandler: ((String) -> ())?
    func setSearchTextFieldText(_ text: String)  {
        setSearchTextFieldTextCallCount += 1
        if let setSearchTextFieldTextHandler = setSearchTextFieldTextHandler {
            setSearchTextFieldTextHandler(text)
        }
        
    }

    private(set) var hideKeyboardCallCount = 0
    var hideKeyboardHandler: (() -> ())?
    func hideKeyboard()  {
        hideKeyboardCallCount += 1
        if let hideKeyboardHandler = hideKeyboardHandler {
            hideKeyboardHandler()
        }
        
    }

    private(set) var showAvailableSearchScopesCallCount = 0
    var showAvailableSearchScopesHandler: (([SearchScope]) -> ())?
    func showAvailableSearchScopes(_ searchScopes: [SearchScope])  {
        showAvailableSearchScopesCallCount += 1
        if let showAvailableSearchScopesHandler = showAvailableSearchScopesHandler {
            showAvailableSearchScopesHandler(searchScopes)
        }
        
    }

    private(set) var changeSelectedScopeCallCount = 0
    var changeSelectedScopeHandler: ((SearchScope) -> ())?
    func changeSelectedScope(_ selectedScope: SearchScope)  {
        changeSelectedScopeCallCount += 1
        if let changeSelectedScopeHandler = changeSelectedScopeHandler {
            changeSelectedScopeHandler(selectedScope)
        }
        
    }

    private(set) var showDisclaimerDialogCallCount = 0
    var showDisclaimerDialogHandler: ((@escaping (Bool) -> Void) -> ())?
    func showDisclaimerDialog(completion: @escaping (Bool) -> Void)  {
        showDisclaimerDialogCallCount += 1
        if let showDisclaimerDialogHandler = showDisclaimerDialogHandler {
            showDisclaimerDialogHandler(completion)
        }
        
    }

    private(set) var showOfflineHintCallCount = 0
    var showOfflineHintHandler: ((@escaping () -> Void) -> ())?
    func showOfflineHint(retryAction: @escaping () -> Void)  {
        showOfflineHintCallCount += 1
        if let showOfflineHintHandler = showOfflineHintHandler {
            showOfflineHintHandler(retryAction)
        }
        
    }

    private(set) var hideOfflineHintCallCount = 0
    var hideOfflineHintHandler: (() -> ())?
    func hideOfflineHint()  {
        hideOfflineHintCallCount += 1
        if let hideOfflineHintHandler = hideOfflineHintHandler {
            hideOfflineHintHandler()
        }
        
    }

    private(set) var showDidYouMeanViewIfNeededCallCount = 0
    var showDidYouMeanViewIfNeededHandler: ((String, String?) -> ())?
    func showDidYouMeanViewIfNeeded(searchTerm: String, didYouMean: String?)  {
        showDidYouMeanViewIfNeededCallCount += 1
        if let showDidYouMeanViewIfNeededHandler = showDidYouMeanViewIfNeededHandler {
            showDidYouMeanViewIfNeededHandler(searchTerm, didYouMean)
        }
        
    }

    private(set) var hideDidYouMeanViewCallCount = 0
    var hideDidYouMeanViewHandler: (() -> ())?
    func hideDidYouMeanView()  {
        hideDidYouMeanViewCallCount += 1
        if let hideDidYouMeanViewHandler = hideDidYouMeanViewHandler {
            hideDidYouMeanViewHandler()
        }
        
    }

    private(set) var showNoResultViewCallCount = 0
    var showNoResultViewHandler: (() -> ())?
    func showNoResultView()  {
        showNoResultViewCallCount += 1
        if let showNoResultViewHandler = showNoResultViewHandler {
            showNoResultViewHandler()
        }
        
    }

    private(set) var hideNoResultViewCallCount = 0
    var hideNoResultViewHandler: (() -> ())?
    func hideNoResultView()  {
        hideNoResultViewCallCount += 1
        if let hideNoResultViewHandler = hideNoResultViewHandler {
            hideNoResultViewHandler()
        }
        
    }

    private(set) var setUserActivityCallCount = 0
    var setUserActivityHandler: ((NSUserActivity) -> ())?
    func setUserActivity(_ userActivity: NSUserActivity)  {
        setUserActivityCallCount += 1
        if let setUserActivityHandler = setUserActivityHandler {
            setUserActivityHandler(userActivity)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentMessage(_ message: PresentableMessageType, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message, actions)
        }
        
    }
}

class MonographViewTypeMock: MonographViewType {
    init() { }


    private(set) var updateCallCount = 0
    var updateHandler: ((String, String, String?) -> ())?
    func update(with title: String, html: String, query: String?)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(title, html, query)
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func showError(_ error: PresentableMessageType, actions: [MessageAction])  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(error, actions)
        }
        
    }

    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var goCallCount = 0
    var goHandler: ((MonographAnchorIdentifier) -> ())?
    func go(to anchor: MonographAnchorIdentifier)  {
        goCallCount += 1
        if let goHandler = goHandler {
            goHandler(anchor)
        }
        
    }
}

class FeedbackViewTypeMock: FeedbackViewType {
    init() { }


    private(set) var showIntentionsMenuCallCount = 0
    var showIntentionsMenuHandler: (([FeedbackIntention]) -> ())?
    func showIntentionsMenu(with intentions: [FeedbackIntention])  {
        showIntentionsMenuCallCount += 1
        if let showIntentionsMenuHandler = showIntentionsMenuHandler {
            showIntentionsMenuHandler(intentions)
        }
        
    }

    private(set) var setSelectedIntentionCallCount = 0
    var setSelectedIntentionHandler: ((FeedbackIntention) -> ())?
    func setSelectedIntention(_ intention: FeedbackIntention)  {
        setSelectedIntentionCallCount += 1
        if let setSelectedIntentionHandler = setSelectedIntentionHandler {
            setSelectedIntentionHandler(intention)
        }
        
    }

    private(set) var setSubmitFeedbackButtonIsEnabledCallCount = 0
    var setSubmitFeedbackButtonIsEnabledHandler: ((Bool) -> ())?
    func setSubmitFeedbackButtonIsEnabled(_ isEnabled: Bool)  {
        setSubmitFeedbackButtonIsEnabledCallCount += 1
        if let setSubmitFeedbackButtonIsEnabledHandler = setSubmitFeedbackButtonIsEnabledHandler {
            setSubmitFeedbackButtonIsEnabledHandler(isEnabled)
        }
        
    }

    private(set) var showMessageTextViewCallCount = 0
    var showMessageTextViewHandler: (() -> ())?
    func showMessageTextView()  {
        showMessageTextViewCallCount += 1
        if let showMessageTextViewHandler = showMessageTextViewHandler {
            showMessageTextViewHandler()
        }
        
    }
}

class LibraryUpdateApplicationServiceTypeMock: LibraryUpdateApplicationServiceType {
    init() { }
    init(isBackgroundUpdatesEnabled: Bool = false, state: LibraryUpdaterState) {
        self.isBackgroundUpdatesEnabled = isBackgroundUpdatesEnabled
        self._state = state
    }


    private(set) var isBackgroundUpdatesEnabledSetCallCount = 0
    var isBackgroundUpdatesEnabled: Bool = false { didSet { isBackgroundUpdatesEnabledSetCallCount += 1 } }

    private(set) var stateSetCallCount = 0
    private var _state: LibraryUpdaterState!  { didSet { stateSetCallCount += 1 } }
    var state: LibraryUpdaterState {
        get { return _state }
        set { _state = newValue }
    }

    private(set) var initiateUpdateCallCount = 0
    var initiateUpdateHandler: ((Bool) -> ())?
    func initiateUpdate(isUserTriggered: Bool)  {
        initiateUpdateCallCount += 1
        if let initiateUpdateHandler = initiateUpdateHandler {
            initiateUpdateHandler(isUserTriggered)
        }
        
    }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class PharmaPageViewTypeMock: PharmaPageViewType {
    init() { }


    private(set) var setTitleCallCount = 0
    var setTitleHandler: ((String) -> ())?
    func setTitle(_ title: String)  {
        setTitleCallCount += 1
        if let setTitleHandler = setTitleHandler {
            setTitleHandler(title)
        }
        
    }

    private(set) var setIsLoadingCallCount = 0
    var setIsLoadingHandler: ((Bool) -> ())?
    func setIsLoading(_ isLoading: Bool)  {
        setIsLoadingCallCount += 1
        if let setIsLoadingHandler = setIsLoadingHandler {
            setIsLoadingHandler(isLoading)
        }
        
    }

    private(set) var addCallCount = 0
    var addHandler: (([UIViewController]) -> ())?
    func add(viewControllers: [UIViewController])  {
        addCallCount += 1
        if let addHandler = addHandler {
            addHandler(viewControllers)
        }
        
    }

    private(set) var setShowsPocketCardCallCount = 0
    var setShowsPocketCardHandler: ((Bool) -> ())?
    func setShowsPocketCard(_ showsCard: Bool)  {
        setShowsPocketCardCallCount += 1
        if let setShowsPocketCardHandler = setShowsPocketCardHandler {
            setShowsPocketCardHandler(showsCard)
        }
        
    }

    private(set) var scrollToCallCount = 0
    var scrollToHandler: ((PharmaPage, Bool) -> ())?
    func scrollTo(_ page: PharmaPage, animated: Bool)  {
        scrollToCallCount += 1
        if let scrollToHandler = scrollToHandler {
            scrollToHandler(page, animated)
        }
        
    }

    private(set) var showDisclaimerDialogCallCount = 0
    var showDisclaimerDialogHandler: ((@escaping (Bool) -> Void) -> ())?
    func showDisclaimerDialog(completion: @escaping (Bool) -> Void)  {
        showDisclaimerDialogCallCount += 1
        if let showDisclaimerDialogHandler = showDisclaimerDialogHandler {
            showDisclaimerDialogHandler(completion)
        }
        
    }

    private(set) var presentSubviewMessageCallCount = 0
    var presentSubviewMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentSubviewMessage(_ error: PresentableMessageType, actions: [MessageAction])  {
        presentSubviewMessageCallCount += 1
        if let presentSubviewMessageHandler = presentSubviewMessageHandler {
            presentSubviewMessageHandler(error, actions)
        }
        
    }

    private(set) var addCloseButtonCallCount = 0
    var addCloseButtonHandler: (() -> ())?
    func addCloseButton()  {
        addCloseButtonCallCount += 1
        if let addCloseButtonHandler = addCloseButtonHandler {
            addCloseButtonHandler()
        }
        
    }
}

class DashboardViewTypeMock: DashboardViewType {
    init() { }


    private(set) var setSectionsCallCount = 0
    var setSectionsHandler: (([DashboardSection]) -> ())?
    func setSections(sections: [DashboardSection])  {
        setSectionsCallCount += 1
        if let setSectionsHandler = setSectionsHandler {
            setSectionsHandler(sections)
        }
        
    }

    private(set) var updateIAPBannerCallCount = 0
    var updateIAPBannerHandler: ((String, String, Bool) -> ())?
    func updateIAPBanner(title: String, subtitle: String, isHidden: Bool)  {
        updateIAPBannerCallCount += 1
        if let updateIAPBannerHandler = updateIAPBannerHandler {
            updateIAPBannerHandler(title, subtitle, isHidden)
        }
        
    }

    private(set) var updateStageButtonCallCount = 0
    var updateStageButtonHandler: ((String?) -> ())?
    func updateStageButton(with title: String?)  {
        updateStageButtonCallCount += 1
        if let updateStageButtonHandler = updateStageButtonHandler {
            updateStageButtonHandler(title)
        }
        
    }
}

public class DeeplinkAwareWebViewControllerTypeMock: DeeplinkAwareWebViewControllerType {
    public init() { }


    public private(set) var showErrorCallCount = 0
    public var showErrorHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    public func showError(_ error: PresentableMessageType, actions: [MessageAction])  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(error, actions)
        }
        
    }

    public private(set) var loadRequestCallCount = 0
    public var loadRequestHandler: ((URLRequest) -> ())?
    public func loadRequest(_ request: URLRequest)  {
        loadRequestCallCount += 1
        if let loadRequestHandler = loadRequestHandler {
            loadRequestHandler(request)
        }
        
    }
}

class LibraryCoordinatorTypeMock: LibraryCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var goToLibraryTreeItemCallCount = 0
    var goToLibraryTreeItemHandler: ((LearningCardTreeItem) -> ())?
    func goToLibraryTreeItem(_ item: LearningCardTreeItem)  {
        goToLibraryTreeItemCallCount += 1
        if let goToLibraryTreeItemHandler = goToLibraryTreeItemHandler {
            goToLibraryTreeItemHandler(item)
        }
        
    }

    private(set) var goToLearningCardItemCallCount = 0
    var goToLearningCardItemHandler: ((LearningCardIdentifier) -> ())?
    func goToLearningCardItem(_ identifier: LearningCardIdentifier)  {
        goToLearningCardItemCallCount += 1
        if let goToLearningCardItemHandler = goToLearningCardItemHandler {
            goToLearningCardItemHandler(identifier)
        }
        
    }

    private(set) var goToLearningCardItemDeeplinkCallCount = 0
    var goToLearningCardItemDeeplinkHandler: ((LearningCardDeeplink) -> ())?
    func goToLearningCardItem(_ deeplink: LearningCardDeeplink)  {
        goToLearningCardItemDeeplinkCallCount += 1
        if let goToLearningCardItemDeeplinkHandler = goToLearningCardItemDeeplinkHandler {
            goToLearningCardItemDeeplinkHandler(deeplink)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var showLearningCardCallCount = 0
    var showLearningCardHandler: ((LearningCardDeeplink) -> ())?
    func showLearningCard(_ learningCard: LearningCardDeeplink)  {
        showLearningCardCallCount += 1
        if let showLearningCardHandler = showLearningCardHandler {
            showLearningCardHandler(learningCard)
        }
        
    }

    private(set) var showPharmaCardCallCount = 0
    var showPharmaCardHandler: ((PharmaCardDeeplink) -> ())?
    func showPharmaCard(_ pharmaCard: PharmaCardDeeplink)  {
        showPharmaCardCallCount += 1
        if let showPharmaCardHandler = showPharmaCardHandler {
            showPharmaCardHandler(pharmaCard)
        }
        
    }

    private(set) var showMonographCallCount = 0
    var showMonographHandler: ((MonographDeeplink) -> ())?
    func showMonograph(_ monographDeeplink: MonographDeeplink)  {
        showMonographCallCount += 1
        if let showMonographHandler = showMonographHandler {
            showMonographHandler(monographDeeplink)
        }
        
    }

    private(set) var showSearchViewCallCount = 0
    var showSearchViewHandler: (() -> ())?
    func showSearchView()  {
        showSearchViewCallCount += 1
        if let showSearchViewHandler = showSearchViewHandler {
            showSearchViewHandler()
        }
        
    }

    private(set) var dismissLearningCardCallCount = 0
    var dismissLearningCardHandler: (() -> ())?
    func dismissLearningCard()  {
        dismissLearningCardCallCount += 1
        if let dismissLearningCardHandler = dismissLearningCardHandler {
            dismissLearningCardHandler()
        }
        
    }
}

class BrazeApplicationServiceTypeMock: BrazeApplicationServiceType {
    init() { }
    init(client: Braze? = nil, isLoginTrackingNeeded: Bool = false, isEnabled: Bool = false) {
        self.client = client
        self.isLoginTrackingNeeded = isLoginTrackingNeeded
        self.isEnabled = isEnabled
    }


    private(set) var clientSetCallCount = 0
    var client: Braze? = nil { didSet { clientSetCallCount += 1 } }

    private(set) var isLoginTrackingNeededSetCallCount = 0
    var isLoginTrackingNeeded: Bool = false { didSet { isLoginTrackingNeededSetCallCount += 1 } }

    private(set) var isEnabledSetCallCount = 0
    var isEnabled: Bool = false { didSet { isEnabledSetCallCount += 1 } }

    private(set) var identifyCallCount = 0
    var identifyHandler: ((String, String) -> ())?
    func identify(id: String, email: String)  {
        identifyCallCount += 1
        if let identifyHandler = identifyHandler {
            identifyHandler(id, email)
        }
        
    }

    private(set) var resetCallCount = 0
    var resetHandler: (() -> ())?
    func reset()  {
        resetCallCount += 1
        if let resetHandler = resetHandler {
            resetHandler()
        }
        
    }

    private(set) var refreshContentCardsCallCount = 0
    var refreshContentCardsHandler: (() -> ())?
    func refreshContentCards()  {
        refreshContentCardsCallCount += 1
        if let refreshContentCardsHandler = refreshContentCardsHandler {
            refreshContentCardsHandler()
        }
        
    }

    private(set) var storeDismissalDateCallCount = 0
    var storeDismissalDateHandler: (() -> ())?
    func storeDismissalDate()  {
        storeDismissalDateCallCount += 1
        if let storeDismissalDateHandler = storeDismissalDateHandler {
            storeDismissalDateHandler()
        }
        
    }

    private(set) var conditionallyLogImpressionCallCount = 0
    var conditionallyLogImpressionHandler: ((BrazeContentCard) -> ())?
    func conditionallyLogImpression(for card: BrazeContentCard)  {
        conditionallyLogImpressionCallCount += 1
        if let conditionallyLogImpressionHandler = conditionallyLogImpressionHandler {
            conditionallyLogImpressionHandler(card)
        }
        
    }

    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }
    #if DEBUG || QA

    private(set) var forcedCardsSetCallCount = 0
    var forcedCards: [BrazeContentCard] = [BrazeContentCard]() { didSet { forcedCardsSetCallCount += 1 } }
    #endif

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }
}

class EditExtensionViewTypeMock: EditExtensionViewType {
    init() { }


    private(set) var setExtensionTextCallCount = 0
    var setExtensionTextHandler: ((String) -> ())?
    func setExtensionText(extensionContent: String)  {
        setExtensionTextCallCount += 1
        if let setExtensionTextHandler = setExtensionTextHandler {
            setExtensionTextHandler(extensionContent)
        }
        
    }

    private(set) var presentMessageCallCount = 0
    var presentMessageHandler: ((PresentableMessageType, [MessageAction]) -> ())?
    func presentMessage(_ message: PresentableMessageType, actions: [MessageAction])  {
        presentMessageCallCount += 1
        if let presentMessageHandler = presentMessageHandler {
            presentMessageHandler(message, actions)
        }
        
    }
}

class DashboardCoordinatorTypeMock: DashboardCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((Deeplink) -> ())?
    func navigate(to deepLink: Deeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(deepLink)
        }
        
    }

    private(set) var navigateToContentListCallCount = 0
    var navigateToContentListHandler: ((ClinicalTool) -> ())?
    func navigateToContentList(for clinicalTool: ClinicalTool)  {
        navigateToContentListCallCount += 1
        if let navigateToContentListHandler = navigateToContentListHandler {
            navigateToContentListHandler(clinicalTool)
        }
        
    }

    private(set) var preloadPocketGuidesCallCount = 0
    var preloadPocketGuidesHandler: (() -> ())?
    func preloadPocketGuides()  {
        preloadPocketGuidesCallCount += 1
        if let preloadPocketGuidesHandler = preloadPocketGuidesHandler {
            preloadPocketGuidesHandler()
        }
        
    }

    private(set) var navigateToPocketGuidesCallCount = 0
    var navigateToPocketGuidesHandler: (() -> ())?
    func navigateToPocketGuides()  {
        navigateToPocketGuidesCallCount += 1
        if let navigateToPocketGuidesHandler = navigateToPocketGuidesHandler {
            navigateToPocketGuidesHandler()
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((ImageResourceIdentifier) -> ())?
    func navigate(to imageResourceIdentifier: ImageResourceIdentifier)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(imageResourceIdentifier)
        }
        
    }

    private(set) var navigateToExternalAdditionIdentifierCallCount = 0
    var navigateToExternalAdditionIdentifierHandler: ((ExternalAdditionIdentifier) -> ())?
    func navigate(to externalAddition: ExternalAdditionIdentifier)  {
        navigateToExternalAdditionIdentifierCallCount += 1
        if let navigateToExternalAdditionIdentifierHandler = navigateToExternalAdditionIdentifierHandler {
            navigateToExternalAdditionIdentifierHandler(externalAddition)
        }
        
    }

    private(set) var navigateToCompleteRecentsListCallCount = 0
    var navigateToCompleteRecentsListHandler: (() -> ())?
    func navigateToCompleteRecentsList()  {
        navigateToCompleteRecentsListCallCount += 1
        if let navigateToCompleteRecentsListHandler = navigateToCompleteRecentsListHandler {
            navigateToCompleteRecentsListHandler()
        }
        
    }

    private(set) var navigateToStoreCallCount = 0
    var navigateToStoreHandler: (() -> ())?
    func navigateToStore()  {
        navigateToStoreCallCount += 1
        if let navigateToStoreHandler = navigateToStoreHandler {
            navigateToStoreHandler()
        }
        
    }

    private(set) var showUrlCallCount = 0
    var showUrlHandler: ((URL) -> ())?
    func showUrl(url: URL)  {
        showUrlCallCount += 1
        if let showUrlHandler = showUrlHandler {
            showUrlHandler(url)
        }
        
    }

    private(set) var navigateToUserStageSettingsCallCount = 0
    var navigateToUserStageSettingsHandler: (() -> ())?
    func navigateToUserStageSettings()  {
        navigateToUserStageSettingsCallCount += 1
        if let navigateToUserStageSettingsHandler = navigateToUserStageSettingsHandler {
            navigateToUserStageSettingsHandler()
        }
        
    }

    private(set) var navigateToContentCardFeedCallCount = 0
    var navigateToContentCardFeedHandler: (([BrazeContentCard]) -> ())?
    func navigateToContentCardFeed(cards: [BrazeContentCard])  {
        navigateToContentCardFeedCallCount += 1
        if let navigateToContentCardFeedHandler = navigateToContentCardFeedHandler {
            navigateToContentCardFeedHandler(cards)
        }
        
    }

    private(set) var showAppToWebURLCallCount = 0
    var showAppToWebURLHandler: ((URL, @escaping () -> Void) -> ())?
    func showAppToWebURL(_ url: URL, completion: @escaping () -> Void)  {
        showAppToWebURLCallCount += 1
        if let showAppToWebURLHandler = showAppToWebURLHandler {
            showAppToWebURLHandler(url, completion)
        }
        
    }
}

class DosagePopoverViewTypeMock: DosagePopoverViewType {
    init() { }
    init(preferredContentSize: CGSize = .zero) {
        self.preferredContentSize = preferredContentSize
    }


    private(set) var preferredContentSizeSetCallCount = 0
    var preferredContentSize: CGSize = .zero { didSet { preferredContentSizeSetCallCount += 1 } }

    private(set) var setContentCallCount = 0
    var setContentHandler: ((DosagePopoverViewData) -> ())?
    func setContent(_ viewData: DosagePopoverViewData)  {
        setContentCallCount += 1
        if let setContentHandler = setContentHandler {
            setContentHandler(viewData)
        }
        
    }
}

class SettingsCoordinatorTypeMock: SettingsCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController) {
        self._rootNavigationController = rootNavigationController
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var goToViewControllerCallCount = 0
    var goToViewControllerHandler: ((Settings.ItemType, Bool) -> ())?
    func goToViewController(of type: Settings.ItemType, animated: Bool)  {
        goToViewControllerCallCount += 1
        if let goToViewControllerHandler = goToViewControllerHandler {
            goToViewControllerHandler(type, animated)
        }
        
    }

    private(set) var openInAppCallCount = 0
    var openInAppHandler: ((URL) -> ())?
    func openInApp(_ url: URL)  {
        openInAppCallCount += 1
        if let openInAppHandler = openInAppHandler {
            openInAppHandler(url)
        }
        
    }

    private(set) var openLibrariesViewCallCount = 0
    var openLibrariesViewHandler: (() -> ())?
    func openLibrariesView()  {
        openLibrariesViewCallCount += 1
        if let openLibrariesViewHandler = openLibrariesViewHandler {
            openLibrariesViewHandler()
        }
        
    }

    private(set) var goToAccountDeletionCallCount = 0
    var goToAccountDeletionHandler: ((@escaping () -> Void) -> ())?
    func goToAccountDeletion(completion: @escaping () -> Void)  {
        goToAccountDeletionCallCount += 1
        if let goToAccountDeletionHandler = goToAccountDeletionHandler {
            goToAccountDeletionHandler(completion)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var goBackToSettingsCallCount = 0
    var goBackToSettingsHandler: (() -> ())?
    func goBackToSettings()  {
        goBackToSettingsCallCount += 1
        if let goBackToSettingsHandler = goBackToSettingsHandler {
            goBackToSettingsHandler()
        }
        
    }
}

class PharmaCoordinatorTypeMock: PharmaCoordinatorType {
    init() { }
    init(rootNavigationController: UINavigationController, delegate: PharmaCoordinatorDelegate? = nil) {
        self._rootNavigationController = rootNavigationController
        self.delegate = delegate
    }


    private(set) var rootNavigationControllerSetCallCount = 0
    private var _rootNavigationController: UINavigationController!  { didSet { rootNavigationControllerSetCallCount += 1 } }
    var rootNavigationController: UINavigationController {
        get { return _rootNavigationController }
        set { _rootNavigationController = newValue }
    }

    private(set) var startCallCount = 0
    var startHandler: ((Bool) -> ())?
    func start(animated: Bool)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(animated)
        }
        
    }

    private(set) var delegateSetCallCount = 0
    var delegate: PharmaCoordinatorDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var navigateCallCount = 0
    var navigateHandler: ((PharmaCardDeeplink) -> ())?
    func navigate(to pharmaCard: PharmaCardDeeplink)  {
        navigateCallCount += 1
        if let navigateHandler = navigateHandler {
            navigateHandler(pharmaCard)
        }
        
    }

    private(set) var navigateToCallCount = 0
    var navigateToHandler: ((LearningCardDeeplink) -> ())?
    func navigate(to learningCard: LearningCardDeeplink)  {
        navigateToCallCount += 1
        if let navigateToHandler = navigateToHandler {
            navigateToHandler(learningCard)
        }
        
    }

    private(set) var stopCallCount = 0
    var stopHandler: ((Bool) -> ())?
    func stop(animated: Bool)  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(animated)
        }
        
    }

    private(set) var openPDFCallCount = 0
    var openPDFHandler: ((URL, String) -> ())?
    func openPDF(with url: URL, title: String)  {
        openPDFCallCount += 1
        if let openPDFHandler = openPDFHandler {
            openPDFHandler(url, title)
        }
        
    }

    private(set) var sendFeedbackCallCount = 0
    var sendFeedbackHandler: (() -> ())?
    func sendFeedback()  {
        sendFeedbackCallCount += 1
        if let sendFeedbackHandler = sendFeedbackHandler {
            sendFeedbackHandler()
        }
        
    }

    private(set) var showDrugListCallCount = 0
    var showDrugListHandler: ((SubstanceIdentifier, PharmaPagePresenter.Tracker, DrugListDelegate?) -> ())?
    func showDrugList(for substanceIdentifier: SubstanceIdentifier, tracker: PharmaPagePresenter.Tracker, delegate: DrugListDelegate?)  {
        showDrugListCallCount += 1
        if let showDrugListHandler = showDrugListHandler {
            showDrugListHandler(substanceIdentifier, tracker, delegate)
        }
        
    }

    private(set) var showSnippetViewCallCount = 0
    var showSnippetViewHandler: ((Snippet, Deeplink) -> ())?
    func showSnippetView(with snippet: Snippet, for deeplink: Deeplink)  {
        showSnippetViewCallCount += 1
        if let showSnippetViewHandler = showSnippetViewHandler {
            showSnippetViewHandler(snippet, deeplink)
        }
        
    }

    private(set) var dismissDrugListCallCount = 0
    var dismissDrugListHandler: (((() -> Void)?) -> ())?
    func dismissDrugList(completion: (() -> Void)?)  {
        dismissDrugListCallCount += 1
        if let dismissDrugListHandler = dismissDrugListHandler {
            dismissDrugListHandler(completion)
        }
        
    }

    private(set) var openURLInternallyCallCount = 0
    var openURLInternallyHandler: ((URL) -> ())?
    func openURLInternally(_ url: URL)  {
        openURLInternallyCallCount += 1
        if let openURLInternallyHandler = openURLInternallyHandler {
            openURLInternallyHandler(url)
        }
        
    }

    private(set) var openURLExternallyCallCount = 0
    var openURLExternallyHandler: ((URL) -> ())?
    func openURLExternally(_ url: URL)  {
        openURLExternallyCallCount += 1
        if let openURLExternallyHandler = openURLExternallyHandler {
            openURLExternallyHandler(url)
        }
        
    }

    private(set) var showPricesAndPackageSizesCallCount = 0
    var showPricesAndPackageSizesHandler: (([PriceAndPackage]) -> ())?
    func showPricesAndPackageSizes(data: [PriceAndPackage])  {
        showPricesAndPackageSizesCallCount += 1
        if let showPricesAndPackageSizesHandler = showPricesAndPackageSizesHandler {
            showPricesAndPackageSizesHandler(data)
        }
        
    }

    private(set) var dismissPricesAndPackagesViewCallCount = 0
    var dismissPricesAndPackagesViewHandler: (() -> ())?
    func dismissPricesAndPackagesView()  {
        dismissPricesAndPackagesViewCallCount += 1
        if let dismissPricesAndPackagesViewHandler = dismissPricesAndPackagesViewHandler {
            dismissPricesAndPackagesViewHandler()
        }
        
    }
}

class MediaRepositoryTypeMock: MediaRepositoryType {
    init() { }


    private(set) var imageCallCount = 0
    var imageHandler: ((URL, @escaping (Result<UIImage, Error>) -> Void) -> ())?
    func image(for url: URL, completion: @escaping (Result<UIImage, Error>) -> Void)  {
        imageCallCount += 1
        if let imageHandler = imageHandler {
            imageHandler(url, completion)
        }
        
    }

    private(set) var clearCacheCallCount = 0
    var clearCacheHandler: (() -> ())?
    func clearCache()  {
        clearCacheCallCount += 1
        if let clearCacheHandler = clearCacheHandler {
            clearCacheHandler()
        }
        
    }
}

class InAppPurchaseSubscriptionClientMock: InAppPurchaseSubscriptionClient {
    init() { }
    init(localReceiptData: Data? = nil) {
        self.localReceiptData = localReceiptData
    }


    private(set) var fetchSubscriptionStateCallCount = 0
    var fetchSubscriptionStateHandler: ((@escaping (Result<InAppPurchaseSubscriptionState, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func fetchSubscriptionState(completion: @escaping (Result<InAppPurchaseSubscriptionState, InAppPurchaseApplicationServiceError>) -> Void)  {
        fetchSubscriptionStateCallCount += 1
        if let fetchSubscriptionStateHandler = fetchSubscriptionStateHandler {
            fetchSubscriptionStateHandler(completion)
        }
        
    }

    private(set) var updateProductMetadataCallCount = 0
    var updateProductMetadataHandler: ((@escaping (Result<SKProduct?, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func updateProductMetadata(completion: @escaping (Result<SKProduct?, InAppPurchaseApplicationServiceError>) -> Void)  {
        updateProductMetadataCallCount += 1
        if let updateProductMetadataHandler = updateProductMetadataHandler {
            updateProductMetadataHandler(completion)
        }
        
    }

    private(set) var localReceiptDataSetCallCount = 0
    var localReceiptData: Data? = nil { didSet { localReceiptDataSetCallCount += 1 } }

    private(set) var purchaseProductCallCount = 0
    var purchaseProductHandler: ((@escaping (Result<SKPaymentTransaction, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func purchaseProduct(completion: @escaping (Result<SKPaymentTransaction, InAppPurchaseApplicationServiceError>) -> Void)  {
        purchaseProductCallCount += 1
        if let purchaseProductHandler = purchaseProductHandler {
            purchaseProductHandler(completion)
        }
        
    }

    private(set) var restorePurchasesCallCount = 0
    var restorePurchasesHandler: ((@escaping (Result<SKPaymentTransaction?, InAppPurchaseApplicationServiceError>) -> Void) -> ())?
    func restorePurchases(completion: @escaping (Result<SKPaymentTransaction?, InAppPurchaseApplicationServiceError>) -> Void)  {
        restorePurchasesCallCount += 1
        if let restorePurchasesHandler = restorePurchasesHandler {
            restorePurchasesHandler(completion)
        }
        
    }

    private(set) var finishTransactionCallCount = 0
    var finishTransactionHandler: ((SKPaymentTransaction) -> ())?
    func finishTransaction(_ transaction: SKPaymentTransaction)  {
        finishTransactionCallCount += 1
        if let finishTransactionHandler = finishTransactionHandler {
            finishTransactionHandler(transaction)
        }
        
    }

    private(set) var completeTransactionsCallCount = 0
    var completeTransactionsHandler: ((@escaping (SKPaymentTransaction?) -> Void) -> ())?
    func completeTransactions(completion: @escaping (SKPaymentTransaction?) -> Void)  {
        completeTransactionsCallCount += 1
        if let completeTransactionsHandler = completeTransactionsHandler {
            completeTransactionsHandler(completion)
        }
        
    }
}

class TrackingTypeMock: TrackingType {
    init() { }


    private(set) var setCallCount = 0
    var setHandler: (([UserTraits]) -> ())?
    func set(_ userTraits: [UserTraits])  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(userTraits)
        }
        
    }

    private(set) var trackCallCount = 0
    var trackHandler: ((Event) -> ())?
    func track(_ event: Event)  {
        trackCallCount += 1
        if let trackHandler = trackHandler {
            trackHandler(event)
        }
        
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((UserTraits) -> ())?
    func update(_ userTraits: UserTraits)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(userTraits)
        }
        
    }
}

class ConfigurationMock: Knowledge_DE.Configuration {
    init() { }
    init(appVariant: AppVariant, languageCode: String = "", popoverWidth: CGFloat = 0.0, hasStudyObjective: Bool = false, availableUserStages: [UserStage] = [UserStage](), searchActivityType: String = "", sharedReceiptSecret: String = "", ambossProUnlimitedIAPIdentifier: String = "", useInAppPurchaseProductionEndpoint: Bool = false, segmentAnalyticsWriteKey: String = "", segmentAnalyticsFlushAt: Int = 0, segmentTrackApplicationLifecycleEvents: Bool = false, segmentProxyURLHost: String = "", segmentProxyURLPath: String = "", adjustAppToken: String = "", brazeAPIKey: String = "", brazeEndpoint: String = "", webBaseURL: URL = URL(fileURLWithPath: ""), graphQLURL: URL = URL(fileURLWithPath: ""), restBaseURL: URL = URL(fileURLWithPath: ""), articleBaseURL: URL = URL(fileURLWithPath: ""), sharedLearningCardBaseURL: URL = URL(fileURLWithPath: ""), meditricksRefererUrl: URL = URL(fileURLWithPath: ""), smartzoomRefererUrl: URL = URL(fileURLWithPath: ""), manageSharedExtensionsURL: URL = URL(fileURLWithPath: ""), qBankAppStoreLink: URL = URL(fileURLWithPath: ""), legalNoticeURL: URL = URL(fileURLWithPath: ""), privacyURL: URL = URL(fileURLWithPath: ""), termsAndConditionsURL: URL = URL(fileURLWithPath: ""), liabilityNoticeURL: URL = URL(fileURLWithPath: ""), inAppPurchaseManageSubscriptionURL: URL = URL(fileURLWithPath: ""), searchNoResultsFeedbackForm: URL = URL(fileURLWithPath: ""), qBankQuestionSessionPathComponent: String = "", qBankQuestionSessionURLQueryItems: [String: String] = [String: String](), cmeURL: URL = URL(fileURLWithPath: ""), usercentricsSettingsId: String = "", isConsentDialogEnabled: Bool = false, userCentricsAdjustTemplateID: String = "") {
        self._appVariant = appVariant
        self.languageCode = languageCode
        self.popoverWidth = popoverWidth
        self.hasStudyObjective = hasStudyObjective
        self.availableUserStages = availableUserStages
        self.searchActivityType = searchActivityType
        self.sharedReceiptSecret = sharedReceiptSecret
        self.ambossProUnlimitedIAPIdentifier = ambossProUnlimitedIAPIdentifier
        self.useInAppPurchaseProductionEndpoint = useInAppPurchaseProductionEndpoint
        self.segmentAnalyticsWriteKey = segmentAnalyticsWriteKey
        self.segmentAnalyticsFlushAt = segmentAnalyticsFlushAt
        self.segmentTrackApplicationLifecycleEvents = segmentTrackApplicationLifecycleEvents
        self.segmentProxyURLHost = segmentProxyURLHost
        self.segmentProxyURLPath = segmentProxyURLPath
        self.adjustAppToken = adjustAppToken
        self.brazeAPIKey = brazeAPIKey
        self.brazeEndpoint = brazeEndpoint
        self.webBaseURL = webBaseURL
        self.graphQLURL = graphQLURL
        self.restBaseURL = restBaseURL
        self.articleBaseURL = articleBaseURL
        self.sharedLearningCardBaseURL = sharedLearningCardBaseURL
        self.meditricksRefererUrl = meditricksRefererUrl
        self.smartzoomRefererUrl = smartzoomRefererUrl
        self.manageSharedExtensionsURL = manageSharedExtensionsURL
        self.qBankAppStoreLink = qBankAppStoreLink
        self.legalNoticeURL = legalNoticeURL
        self.privacyURL = privacyURL
        self.termsAndConditionsURL = termsAndConditionsURL
        self.liabilityNoticeURL = liabilityNoticeURL
        self.inAppPurchaseManageSubscriptionURL = inAppPurchaseManageSubscriptionURL
        self.searchNoResultsFeedbackForm = searchNoResultsFeedbackForm
        self.qBankQuestionSessionPathComponent = qBankQuestionSessionPathComponent
        self.qBankQuestionSessionURLQueryItems = qBankQuestionSessionURLQueryItems
        self.cmeURL = cmeURL
        self.usercentricsSettingsId = usercentricsSettingsId
        self.isConsentDialogEnabled = isConsentDialogEnabled
        self.userCentricsAdjustTemplateID = userCentricsAdjustTemplateID
    }


    private(set) var appVariantSetCallCount = 0
    private var _appVariant: AppVariant!  { didSet { appVariantSetCallCount += 1 } }
    var appVariant: AppVariant {
        get { return _appVariant }
        set { _appVariant = newValue }
    }

    private(set) var languageCodeSetCallCount = 0
    var languageCode: String = "" { didSet { languageCodeSetCallCount += 1 } }

    private(set) var popoverWidthSetCallCount = 0
    var popoverWidth: CGFloat = 0.0 { didSet { popoverWidthSetCallCount += 1 } }

    private(set) var hasStudyObjectiveSetCallCount = 0
    var hasStudyObjective: Bool = false { didSet { hasStudyObjectiveSetCallCount += 1 } }

    private(set) var availableUserStagesSetCallCount = 0
    var availableUserStages: [UserStage] = [UserStage]() { didSet { availableUserStagesSetCallCount += 1 } }

    private(set) var searchActivityTypeSetCallCount = 0
    var searchActivityType: String = "" { didSet { searchActivityTypeSetCallCount += 1 } }

    private(set) var sharedReceiptSecretSetCallCount = 0
    var sharedReceiptSecret: String = "" { didSet { sharedReceiptSecretSetCallCount += 1 } }

    private(set) var ambossProUnlimitedIAPIdentifierSetCallCount = 0
    var ambossProUnlimitedIAPIdentifier: String = "" { didSet { ambossProUnlimitedIAPIdentifierSetCallCount += 1 } }

    private(set) var useInAppPurchaseProductionEndpointSetCallCount = 0
    var useInAppPurchaseProductionEndpoint: Bool = false { didSet { useInAppPurchaseProductionEndpointSetCallCount += 1 } }

    private(set) var segmentAnalyticsWriteKeySetCallCount = 0
    var segmentAnalyticsWriteKey: String = "" { didSet { segmentAnalyticsWriteKeySetCallCount += 1 } }

    private(set) var segmentAnalyticsFlushAtSetCallCount = 0
    var segmentAnalyticsFlushAt: Int = 0 { didSet { segmentAnalyticsFlushAtSetCallCount += 1 } }

    private(set) var segmentTrackApplicationLifecycleEventsSetCallCount = 0
    var segmentTrackApplicationLifecycleEvents: Bool = false { didSet { segmentTrackApplicationLifecycleEventsSetCallCount += 1 } }

    private(set) var segmentProxyURLHostSetCallCount = 0
    var segmentProxyURLHost: String = "" { didSet { segmentProxyURLHostSetCallCount += 1 } }

    private(set) var segmentProxyURLPathSetCallCount = 0
    var segmentProxyURLPath: String = "" { didSet { segmentProxyURLPathSetCallCount += 1 } }

    private(set) var adjustAppTokenSetCallCount = 0
    var adjustAppToken: String = "" { didSet { adjustAppTokenSetCallCount += 1 } }

    private(set) var brazeAPIKeySetCallCount = 0
    var brazeAPIKey: String = "" { didSet { brazeAPIKeySetCallCount += 1 } }

    private(set) var brazeEndpointSetCallCount = 0
    var brazeEndpoint: String = "" { didSet { brazeEndpointSetCallCount += 1 } }

    private(set) var webBaseURLSetCallCount = 0
    var webBaseURL: URL = URL(fileURLWithPath: "") { didSet { webBaseURLSetCallCount += 1 } }

    private(set) var graphQLURLSetCallCount = 0
    var graphQLURL: URL = URL(fileURLWithPath: "") { didSet { graphQLURLSetCallCount += 1 } }

    private(set) var restBaseURLSetCallCount = 0
    var restBaseURL: URL = URL(fileURLWithPath: "") { didSet { restBaseURLSetCallCount += 1 } }

    private(set) var articleBaseURLSetCallCount = 0
    var articleBaseURL: URL = URL(fileURLWithPath: "") { didSet { articleBaseURLSetCallCount += 1 } }

    private(set) var sharedLearningCardBaseURLSetCallCount = 0
    var sharedLearningCardBaseURL: URL = URL(fileURLWithPath: "") { didSet { sharedLearningCardBaseURLSetCallCount += 1 } }

    private(set) var meditricksRefererUrlSetCallCount = 0
    var meditricksRefererUrl: URL = URL(fileURLWithPath: "") { didSet { meditricksRefererUrlSetCallCount += 1 } }

    private(set) var smartzoomRefererUrlSetCallCount = 0
    var smartzoomRefererUrl: URL = URL(fileURLWithPath: "") { didSet { smartzoomRefererUrlSetCallCount += 1 } }

    private(set) var manageSharedExtensionsURLSetCallCount = 0
    var manageSharedExtensionsURL: URL = URL(fileURLWithPath: "") { didSet { manageSharedExtensionsURLSetCallCount += 1 } }

    private(set) var qBankAppStoreLinkSetCallCount = 0
    var qBankAppStoreLink: URL = URL(fileURLWithPath: "") { didSet { qBankAppStoreLinkSetCallCount += 1 } }

    private(set) var legalNoticeURLSetCallCount = 0
    var legalNoticeURL: URL = URL(fileURLWithPath: "") { didSet { legalNoticeURLSetCallCount += 1 } }

    private(set) var privacyURLSetCallCount = 0
    var privacyURL: URL = URL(fileURLWithPath: "") { didSet { privacyURLSetCallCount += 1 } }

    private(set) var termsAndConditionsURLSetCallCount = 0
    var termsAndConditionsURL: URL = URL(fileURLWithPath: "") { didSet { termsAndConditionsURLSetCallCount += 1 } }

    private(set) var liabilityNoticeURLSetCallCount = 0
    var liabilityNoticeURL: URL = URL(fileURLWithPath: "") { didSet { liabilityNoticeURLSetCallCount += 1 } }

    private(set) var inAppPurchaseManageSubscriptionURLSetCallCount = 0
    var inAppPurchaseManageSubscriptionURL: URL = URL(fileURLWithPath: "") { didSet { inAppPurchaseManageSubscriptionURLSetCallCount += 1 } }

    private(set) var searchNoResultsFeedbackFormSetCallCount = 0
    var searchNoResultsFeedbackForm: URL = URL(fileURLWithPath: "") { didSet { searchNoResultsFeedbackFormSetCallCount += 1 } }

    private(set) var qBankQuestionSessionPathComponentSetCallCount = 0
    var qBankQuestionSessionPathComponent: String = "" { didSet { qBankQuestionSessionPathComponentSetCallCount += 1 } }

    private(set) var qBankQuestionSessionURLQueryItemsSetCallCount = 0
    var qBankQuestionSessionURLQueryItems: [String: String] = [String: String]() { didSet { qBankQuestionSessionURLQueryItemsSetCallCount += 1 } }

    private(set) var cmeURLSetCallCount = 0
    var cmeURL: URL = URL(fileURLWithPath: "") { didSet { cmeURLSetCallCount += 1 } }

    private(set) var usercentricsSettingsIdSetCallCount = 0
    var usercentricsSettingsId: String = "" { didSet { usercentricsSettingsIdSetCallCount += 1 } }

    private(set) var isConsentDialogEnabledSetCallCount = 0
    var isConsentDialogEnabled: Bool = false { didSet { isConsentDialogEnabledSetCallCount += 1 } }

    private(set) var userCentricsAdjustTemplateIDSetCallCount = 0
    var userCentricsAdjustTemplateID: String = "" { didSet { userCentricsAdjustTemplateIDSetCallCount += 1 } }
}

class DeepLinkServiceDelegateMock: DeepLinkServiceDelegate {
    init() { }


    private(set) var didReceiveDeepLinkCallCount = 0
    var didReceiveDeepLinkHandler: ((Deeplink) -> ())?
    func didReceiveDeepLink(_ deepLink: Deeplink)  {
        didReceiveDeepLinkCallCount += 1
        if let didReceiveDeepLinkHandler = didReceiveDeepLinkHandler {
            didReceiveDeepLinkHandler(deepLink)
        }
        
    }
}

class PharmaPresenterTypeMock: PharmaPresenterType {
    init() { }
    init(view: PharmaViewType? = nil, tracker: PharmaPagePresenter.Tracker? = nil, delegate: PharmaPresenterDelegate? = nil) {
        self.view = view
        self.tracker = tracker
        self.delegate = delegate
    }


    public private(set) var didTapPharmaRichTextLinkCallCount = 0
    public var didTapPharmaRichTextLinkHandler: ((Phrasionary.Data?, AmbossLink.Data?) -> ())?
    public func didTapPharmaRichTextLink(phrasionary: Phrasionary.Data?, ambossLink: AmbossLink.Data?)  {
        didTapPharmaRichTextLinkCallCount += 1
        if let didTapPharmaRichTextLinkHandler = didTapPharmaRichTextLinkHandler {
            didTapPharmaRichTextLinkHandler(phrasionary, ambossLink)
        }
        
    }

    private(set) var didSelectCallCount = 0
    var didSelectHandler: ((String) -> ())?
    func didSelect(anchor: String)  {
        didSelectCallCount += 1
        if let didSelectHandler = didSelectHandler {
            didSelectHandler(anchor)
        }
        
    }

    private(set) var viewSetCallCount = 0
    var view: PharmaViewType? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var trackerSetCallCount = 0
    var tracker: PharmaPagePresenter.Tracker? = nil { didSet { trackerSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: PharmaPresenterDelegate? = nil { didSet { delegateSetCallCount += 1 } }

    private(set) var prescriptionInformationButtonTappedCallCount = 0
    var prescriptionInformationButtonTappedHandler: ((PharmaPrescribingInfoViewData) -> ())?
    func prescriptionInformationButtonTapped(with prescribingInfoViewData: PharmaPrescribingInfoViewData)  {
        prescriptionInformationButtonTappedCallCount += 1
        if let prescriptionInformationButtonTappedHandler = prescriptionInformationButtonTappedHandler {
            prescriptionInformationButtonTappedHandler(prescribingInfoViewData)
        }
        
    }

    private(set) var patientPackageInsertButtonTappedCallCount = 0
    var patientPackageInsertButtonTappedHandler: ((PharmaPrescribingInfoViewData) -> ())?
    func patientPackageInsertButtonTapped(with prescribingInfoViewData: PharmaPrescribingInfoViewData)  {
        patientPackageInsertButtonTappedCallCount += 1
        if let patientPackageInsertButtonTappedHandler = patientPackageInsertButtonTappedHandler {
            patientPackageInsertButtonTappedHandler(prescribingInfoViewData)
        }
        
    }

    private(set) var pharmaSectionTappedCallCount = 0
    var pharmaSectionTappedHandler: ((PharmaViewData.SectionViewData, Bool) -> ())?
    func pharmaSectionTapped(section: PharmaViewData.SectionViewData, isExpanded: Bool)  {
        pharmaSectionTappedCallCount += 1
        if let pharmaSectionTappedHandler = pharmaSectionTappedHandler {
            pharmaSectionTappedHandler(section, isExpanded)
        }
        
    }

    private(set) var sendFeedbackCallCount = 0
    var sendFeedbackHandler: (() -> ())?
    func sendFeedback()  {
        sendFeedbackCallCount += 1
        if let sendFeedbackHandler = sendFeedbackHandler {
            sendFeedbackHandler()
        }
        
    }

    private(set) var otherPreparationsTappedCallCount = 0
    var otherPreparationsTappedHandler: (() -> ())?
    func otherPreparationsTapped()  {
        otherPreparationsTappedCallCount += 1
        if let otherPreparationsTappedHandler = otherPreparationsTappedHandler {
            otherPreparationsTappedHandler()
        }
        
    }

    private(set) var viewDidAppearCallCount = 0
    var viewDidAppearHandler: (() -> ())?
    func viewDidAppear()  {
        viewDidAppearCallCount += 1
        if let viewDidAppearHandler = viewDidAppearHandler {
            viewDidAppearHandler()
        }
        
    }

    private(set) var viewDismissedCallCount = 0
    var viewDismissedHandler: (() -> ())?
    func viewDismissed()  {
        viewDismissedCallCount += 1
        if let viewDismissedHandler = viewDismissedHandler {
            viewDismissedHandler()
        }
        
    }

    private(set) var showPricesAndPackageSizesCallCount = 0
    var showPricesAndPackageSizesHandler: (() -> ())?
    func showPricesAndPackageSizes()  {
        showPricesAndPackageSizesCallCount += 1
        if let showPricesAndPackageSizesHandler = showPricesAndPackageSizesHandler {
            showPricesAndPackageSizesHandler()
        }
        
    }
}

class UnzipperTypeMock: UnzipperType {
    init() { }


    private(set) var unzipFileAtPathCallCount = 0
    var unzipFileAtPathHandler: ((String, String, @escaping (Result<Void, UnzipperError>) -> Void) -> ())?
    func unzipFileAtPath(_ path: String, toDestination: String, completion: @escaping (Result<Void, UnzipperError>) -> Void)  {
        unzipFileAtPathCallCount += 1
        if let unzipFileAtPathHandler = unzipFileAtPathHandler {
            unzipFileAtPathHandler(path, toDestination, completion)
        }
        
    }
}

class TraceMock: Trace {
    init() { }


    private(set) var stopCallCount = 0
    var stopHandler: (() -> ())?
    func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    private(set) var setCallCount = 0
    var setHandler: ((String, String) -> ())?
    func set(value: String, for attribute: String)  {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(value, attribute)
        }
        
    }

    private(set) var setValueCallCount = 0
    var setValueHandler: ((Int64, String) -> ())?
    func set(value: Int64, for metric: String)  {
        setValueCallCount += 1
        if let setValueHandler = setValueHandler {
            setValueHandler(value, metric)
        }
        
    }
}

class GalleryImageRepositoryTypeMock: GalleryImageRepositoryType {
    init() { }


    private(set) var loadImageCallCount = 0
    var loadImageHandler: ((ImageReference, @escaping (Result<UIImage, NetworkError<EmptyAPIError>>) -> Void) -> ())?
    func loadImage(for reference: ImageReference, completion: @escaping (Result<UIImage, NetworkError<EmptyAPIError>>) -> Void)  {
        loadImageCallCount += 1
        if let loadImageHandler = loadImageHandler {
            loadImageHandler(reference, completion)
        }
        
    }
}

class PharmaDatabaseApplicationServiceTypeMock: PharmaDatabaseApplicationServiceType {
    init() { }
    init(pharmaDatabase: PharmaDatabaseType? = nil, state: PharmaDatabaseApplicationServiceState, isBackgroundUpdatesEnabled: Bool = false, featureFlagRepository: FeatureFlagRepositoryType = FeatureFlagRepositoryTypeMock()) {
        self.pharmaDatabase = pharmaDatabase
        self._state = state
        self.isBackgroundUpdatesEnabled = isBackgroundUpdatesEnabled
        self.featureFlagRepository = featureFlagRepository
    }


    private(set) var applicationCallCount = 0
    var applicationHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationCallCount += 1
        if let applicationHandler = applicationHandler {
            return applicationHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationDidFinishLaunchingWithOptionsCallCount = 0
    var applicationDidFinishLaunchingWithOptionsHandler: ((UIApplicationType, [UIApplication.LaunchOptionsKey: Any]?) -> (Bool))?
    func application(_ application: UIApplicationType, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        applicationDidFinishLaunchingWithOptionsCallCount += 1
        if let applicationDidFinishLaunchingWithOptionsHandler = applicationDidFinishLaunchingWithOptionsHandler {
            return applicationDidFinishLaunchingWithOptionsHandler(application, launchOptions)
        }
        return false
    }

    private(set) var applicationWillResignActiveCallCount = 0
    var applicationWillResignActiveHandler: ((UIApplicationType) -> ())?
    func applicationWillResignActive(_ application: UIApplicationType)  {
        applicationWillResignActiveCallCount += 1
        if let applicationWillResignActiveHandler = applicationWillResignActiveHandler {
            applicationWillResignActiveHandler(application)
        }
        
    }

    private(set) var applicationDidEnterBackgroundCallCount = 0
    var applicationDidEnterBackgroundHandler: ((UIApplicationType) -> ())?
    func applicationDidEnterBackground(_ application: UIApplicationType)  {
        applicationDidEnterBackgroundCallCount += 1
        if let applicationDidEnterBackgroundHandler = applicationDidEnterBackgroundHandler {
            applicationDidEnterBackgroundHandler(application)
        }
        
    }

    private(set) var applicationWillEnterForegroundCallCount = 0
    var applicationWillEnterForegroundHandler: ((UIApplicationType) -> ())?
    func applicationWillEnterForeground(_ application: UIApplicationType)  {
        applicationWillEnterForegroundCallCount += 1
        if let applicationWillEnterForegroundHandler = applicationWillEnterForegroundHandler {
            applicationWillEnterForegroundHandler(application)
        }
        
    }

    private(set) var applicationDidBecomeActiveCallCount = 0
    var applicationDidBecomeActiveHandler: ((UIApplicationType) -> ())?
    func applicationDidBecomeActive(_ application: UIApplicationType)  {
        applicationDidBecomeActiveCallCount += 1
        if let applicationDidBecomeActiveHandler = applicationDidBecomeActiveHandler {
            applicationDidBecomeActiveHandler(application)
        }
        
    }

    private(set) var applicationWillTerminateCallCount = 0
    var applicationWillTerminateHandler: ((UIApplicationType) -> ())?
    func applicationWillTerminate(_ application: UIApplicationType)  {
        applicationWillTerminateCallCount += 1
        if let applicationWillTerminateHandler = applicationWillTerminateHandler {
            applicationWillTerminateHandler(application)
        }
        
    }

    private(set) var applicationHandleEventsForBackgroundURLSessionCallCount = 0
    var applicationHandleEventsForBackgroundURLSessionHandler: ((UIApplicationType, String, @escaping () -> Void) -> ())?
    func application(_ application: UIApplicationType, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void)  {
        applicationHandleEventsForBackgroundURLSessionCallCount += 1
        if let applicationHandleEventsForBackgroundURLSessionHandler = applicationHandleEventsForBackgroundURLSessionHandler {
            applicationHandleEventsForBackgroundURLSessionHandler(application, identifier, completionHandler)
        }
        
    }

    private(set) var applicationPerformFetchWithCompletionHandlerCallCount = 0
    var applicationPerformFetchWithCompletionHandlerHandler: ((UIApplicationType, @escaping (UIBackgroundFetchResult) -> Void) -> ())?
    func application(_ application: UIApplicationType, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)  {
        applicationPerformFetchWithCompletionHandlerCallCount += 1
        if let applicationPerformFetchWithCompletionHandlerHandler = applicationPerformFetchWithCompletionHandlerHandler {
            applicationPerformFetchWithCompletionHandlerHandler(application, completionHandler)
        }
        
    }

    private(set) var pharmaDatabaseSetCallCount = 0
    var pharmaDatabase: PharmaDatabaseType? = nil { didSet { pharmaDatabaseSetCallCount += 1 } }

    private(set) var stateSetCallCount = 0
    private var _state: PharmaDatabaseApplicationServiceState!  { didSet { stateSetCallCount += 1 } }
    var state: PharmaDatabaseApplicationServiceState {
        get { return _state }
        set { _state = newValue }
    }

    private(set) var isBackgroundUpdatesEnabledSetCallCount = 0
    var isBackgroundUpdatesEnabled: Bool = false { didSet { isBackgroundUpdatesEnabledSetCallCount += 1 } }

    private(set) var featureFlagRepositorySetCallCount = 0
    var featureFlagRepository: FeatureFlagRepositoryType = FeatureFlagRepositoryTypeMock() { didSet { featureFlagRepositorySetCallCount += 1 } }

    private(set) var checkForUpdateCallCount = 0
    var checkForUpdateHandler: (() throws -> ())?
    func checkForUpdate() throws  {
        checkForUpdateCallCount += 1
        if let checkForUpdateHandler = checkForUpdateHandler {
            try checkForUpdateHandler()
        }
        
    }

    private(set) var startManualUpdateCallCount = 0
    var startManualUpdateHandler: (() throws -> ())?
    func startManualUpdate() throws  {
        startManualUpdateCallCount += 1
        if let startManualUpdateHandler = startManualUpdateHandler {
            try startManualUpdateHandler()
        }
        
    }

    private(set) var startAutomaticUpdateCallCount = 0
    var startAutomaticUpdateHandler: (() throws -> ())?
    func startAutomaticUpdate() throws  {
        startAutomaticUpdateCallCount += 1
        if let startAutomaticUpdateHandler = startAutomaticUpdateHandler {
            try startAutomaticUpdateHandler()
        }
        
    }

    private(set) var deleteDatabaseCallCount = 0
    var deleteDatabaseHandler: (() throws -> ())?
    func deleteDatabase() throws  {
        deleteDatabaseCallCount += 1
        if let deleteDatabaseHandler = deleteDatabaseHandler {
            try deleteDatabaseHandler()
        }
        
    }
    #if DEBUG

    private(set) var pharmaDBVersionSetCallCount = 0
    private var _pharmaDBVersion: Version!  { didSet { pharmaDBVersionSetCallCount += 1 } }
    var pharmaDBVersion: Version {
        get { return _pharmaDBVersion }
        set { _pharmaDBVersion = newValue }
    }
    #endif
}

