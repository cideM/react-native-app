//
//  PackageTests.swift
//  PharmaDatabaseTests
//
//  Created by Roberto Seidenberg on 02.05.22.
//

import GRDB
import Domain
@testable import PharmaDatabase
import XCTest

class PriceAndPackageTests: XCTestCase {

    // MARK: - Success cases

    func testThat_InitializingAPackage_WithValidData_ReturnsExpectedResult() throws {

        let id = Int.fixture()
        let drug_id = String.fixture()
        let position_ascending = Int.fixture()
        let position_mixed = Int.fixture()
        let package_size = String.fixture()
        let amount = String.fixture()
        let unit = String.fixture()
        let pharmacy_price = String.fixture()
        let recommended_price = String.fixture()
        let prescription = String.fixture()

        let row = fixture(
            id: id,
            drug_id: drug_id,
            position_ascending: position_ascending,
            position_mixed: position_mixed,
            package_size: package_size,
            amount: amount,
            unit: unit,
            pharmacy_price: pharmacy_price,
            recommended_price: recommended_price,
            prescription: prescription)

        XCTAssertEqual(row.id, id)
        XCTAssertEqual(row.drug_id, drug_id)
        XCTAssertEqual(row.position_ascending, position_ascending)
        XCTAssertEqual(row.position_mixed, position_mixed)
        XCTAssertEqual(row.package_size, package_size)
        XCTAssertEqual(row.amount, amount)
        XCTAssertEqual(row.unit, unit)
        XCTAssertEqual(row.pharmacy_price, pharmacy_price)
        XCTAssertEqual(row.recommended_price, recommended_price)
        XCTAssertEqual(row.prescription, prescription)
    }

    func testThat_InitializingAPackage_WithANilPharmacyPriceString_DoesNoeThrowAnError() throws {
        let row = fixture(pharmacy_price: nil)
        XCTAssertNoThrow(try PriceAndPackage(row: row))
    }

    func testThat_InitializingAPackage_WithANilRecommendedPriceString_ReturnsExpectedResult() throws {
        let row = fixture(recommended_price: nil)
        XCTAssertNoThrow(try PriceAndPackage(row: row))
    }

    // MARK: - Failure cases

    func testThat_InitializingAPackage_WithAnInvalidPackageSizeString_ThrowsAnError() throws {
        let packageSizeValue = String.fixture()
        let row = fixture(package_size: packageSizeValue)

        XCTAssertThrowsError(try PriceAndPackage(row: row), "Should throw error") {
            guard let error = $0 as? PharmaDatabase.FetchError else {
                return XCTFail("Unexpected error type. Should be PharmaDatabase.FetchError but is: \($0)")
            }
            switch error {
            case .unexpectedValue(let table, let column, let id, let value):
                XCTAssertEqual(table, "package")
                XCTAssertEqual(column, "package_size")
                XCTAssertEqual(id, String(describing: row.id))
                XCTAssertEqual(value, packageSizeValue)
            default:
                XCTFail("Unexpected state. Should be .unexpectedNilValue but is: \(error)")
            }
        }
    }

    func testThat_InitializingAPackage_WithANilAmount_ThrowsAnError() throws {
        let row = fixture(amount: nil)

        XCTAssertThrowsError(try PriceAndPackage(row: row), "Should throw error") {
            guard let error = $0 as? PharmaDatabase.FetchError else {
                return XCTFail("Unexpected error type. Should be PharmaDatabase.FetchError but is: \($0)")
            }
            switch error {
            case .unexpectedNilValue(let table, let column, let id):
                XCTAssertEqual(table, "package")
                XCTAssertEqual(column, "amount")
                XCTAssertEqual(id, String(describing: row.id))
            default:
                XCTFail("Unexpected state. Should be .unexpectedNilValue but is: \(error)")
            }
        }
    }

    func testThat_InitializingAPackage_WithANilUnitString_ThrowsAnError() throws {
        let row = fixture(unit: nil)

        XCTAssertThrowsError(try PriceAndPackage(row: row), "Should throw error") {
            guard let error = $0 as? PharmaDatabase.FetchError else {
                return XCTFail("Unexpected error type. Should be PharmaDatabase.FetchError but is: \($0)")
            }
            switch error {
            case .unexpectedNilValue(let table, let column, let id):
                XCTAssertEqual(table, "package")
                XCTAssertEqual(column, "unit")
                XCTAssertEqual(id, String(describing: row.id))
            default:
                XCTFail("Unexpected state. Should be .unexpectedNilValue but is: \(error)")
            }
        }
    }
}

private extension PriceAndPackageTests {

    // Sourcerys autogenerated fixture does not provide proper values for "package_size" hence we do this manually here
    func fixture(id: Int = .fixture(),
                    drug_id: String? = .fixture(),
                    position_ascending: Int? = .fixture(),
                    position_mixed: Int? = .fixture(),
                    package_size: String? = nil,
                    amount: String? = .fixture(),
                    unit: String? = .fixture(),
                    pharmacy_price: String? = .fixture(),
                    recommended_price: String? = .fixture(),
                    prescription: String? = .fixture()) -> PharmaDatabase.Row.Package {
        let packageSize = package_size ?? ["N1", "N2", "N3", "KTP", "NotApplicable"].randomElement()!

        let row = PharmaDatabase.Row.Package(id: id,
                                             drug_id: drug_id,
                                             position_ascending: position_ascending,
                                             position_mixed: position_mixed,
                                             package_size: packageSize,
                                             amount: amount,
                                             unit: unit,
                                             pharmacy_price: pharmacy_price,
                                             recommended_price: recommended_price,
                                             prescription: prescription)
        return row
    }
}
